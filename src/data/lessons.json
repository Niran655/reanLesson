[
  {
    "id": 1,
    "category": "HTML",
    "path": "/html/introduction",
    "title": "មេរៀនទី១: បុព្វហេតុ HTML (Introduction to HTML)",
    "explanation": "HTML (HyperText Markup Language) គឺជាភាសាសម្ដែងសម្រាប់បង្កើតទំព័របង្ហាញលើ Web។ វាប្រើប្រាស់ Tag ផ្សេងៗដើម្បីកំណត់រចនាសម្ព័ន្ធនិងមាតិកានៃទំព័រ។ HTML គឺជាមូលដ្ឋានគ្រឹះនៃគ្រប់ទំព័រវេបសាយទាំងអស់។",
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>ទំព័រដំបូងរបស់ខ្ញុំ</title>\n</head>\n<body>\n    <h1>សួស្តីពិភពលោក!</h1>\n    <p>នេះគឺជាកថាខណ្ឌដំបូងរបស់ខ្ញុំ។</p>\n</body>\n</html>",
    "tip": "HTML Tag ត្រូវតែបិទឱ្យបានត្រឹមត្រូវ។ ឧទាហរណ៍ <h1> ត្រូវបិទដោយ </h1>"
  },
  {
    "id": 2,
    "category": "HTML",
    "path": "/html/basic-structure",
    "title": "មេរៀនទី២: រចនាសម្ព័ន្ធមូលដ្ឋាន HTML (Basic HTML Structure)",
    "explanation": "រចនាសម្ព័ន្ធមូលដ្ឋាននៃឯកសារ HTML មានធាតុសំខាន់ៗដូចជា DOCTYPE, html, head, និង body។ ធាតុនីមួយៗមានតួនាទីជាក់លាក់ក្នុងការកំណត់រចនាសម្ព័ន្ធទំព័រ។",
    "code": "<!DOCTYPE html> <!-- កំណត់ប្រភេទឯកសារ -->\n<html lang=\"km\"> <!-- ធាតុឫស -->\n<head>\n    <!-- ព័ត៌មានអំពីទំព័រ -->\n    <meta charset=\"UTF-8\">\n    <title>ចំណងជើងទំព័រ</title>\n</head>\n<body>\n    <!-- មាតិកាដែលបង្ហាញ -->\n    <h1>ចំណងជើងធំ</h1>\n</body>\n</html>",
    "tip": "lang=\"km\" ជួយឱ្យកម្មវិធីអានអក្សរស្គាល់ថាទំព័រនេះជាភាសាខ្មែរ"
  },
  {
    "id": 3,
    "category": "HTML",
    "path": "/html/headings",
    "title": "មេរៀនទី៣: ចំណងជើង HTML (HTML Headings)",
    "explanation": "HTML មានចំណងជើង ៦ កម្រិតចាប់ពី h1 ដល់ h6។ h1 គឺធំបំផុត ហើយ h6 គឺតូចបំផុត។ ចំណងជើងត្រូវបានប្រើដើម្បីបង្កើតរចនាសម្ព័ន្ធនិងឋានានុក្រមនៃមាតិកា។",
    "code": "<h1>ចំណងជើងកម្រិត ១</h1>\n<h2>ចំណងជើងកម្រិត ២</h2>\n<h3>ចំណងជើងកម្រិត ៣</h3>\n<h4>ចំណងជើងកម្រិត ៤</h4>\n<h5>ចំណងជើងកម្រិត ៥</h5>\n<h6>ចំណងជើងកម្រិត ៦</h6>",
    "tip": "ប្រើ h1 សម្រាប់ចំណងជើងសំខាន់បំផុត និងកុំរំលងកម្រិត (ឧទាហរណ៍ កុំប្រើ h4 បន្ទាប់ពី h2)"
  },
  {
    "id": 4,
    "category": "HTML",
    "path": "/html/paragraphs",
    "title": "មេរៀនទី៤: កថាខណ្ឌ HTML (HTML Paragraphs)",
    "explanation": "Tag <p> ត្រូវបានប្រើដើម្បីបង្កើតកថាខណ្ឌ។ កថាខណ្ឌនីមួយៗនឹងមានចន្លោះមួយជុំវិញ។ អ្នកក៏អាចប្រើ <br> ដើម្បីបំបែកបន្ទាត់ផងដែរ។",
    "code": "<p>នេះគឺជាកថាខណ្ឌទីមួយ។ វាមានអត្ថបទជាច្រើនប្រយោគ។</p>\n\n<p>នេះគឺជាកថាខណ្ឌទីពីរ។<br>\nបន្ទាត់នេះនឹងបង្ហាញក្រោមបន្ទាត់ខាងលើ។</p>\n\n<p>កថាខណ្ឌទីបីមានចន្លោះដាច់ដោយឡែកពីកថាខណ្ឌផ្សេងទៀត។</p>",
    "tip": "ប្រើ <p> សម្រាប់កថាខណ្ឌ និង <br> សម្រាប់បំបែកបន្ទាត់ក្នុងកថាខណ្ឌតែមួយ"
  },
  {
    "id": 5,
    "category": "HTML",
    "path": "/html/links",
    "title": "មេរៀនទី៥: តំណភ្ជាប់ HTML (HTML Links)",
    "explanation": "Tag <a> ត្រូវបានប្រើដើម្បីបង្កើតតំណភ្ជាប់។ Attribute href កំណត់ទីតាំងដែលតំណភ្ជាប់នឹងនាំទៅ។ តំណភ្ជាប់អាចនាំទៅទំព័រផ្សេង ឬផ្នែកក្នុងទំព័រដដែល។",
    "code": "<!-- តំណភ្ជាប់ទៅទំព័រផ្សេង -->\n<a href=\"https://www.google.com/\">ទៅ Google</a>\n\n<!-- តំណភ្ជាប់ទៅទំព័រក្នុងវេបសាយដដែល -->\n<a href=\"about.html\">អំពីយើង</a>\n\n<!-- តំណភ្ជាប់ទៅផ្នែកក្នុងទំព័រ -->\n<a href=\"#section1\">ទៅផ្នែកទី១</a>\n\n<!-- បើកក្នុង tab ថ្មី -->\n<a href=\"https://www.facebook.com\" target=\"_blank\">Facebook</a>",
    "tip": "ប្រើ target=\"_blank\" ដើម្បីបើកតំណភ្ជាប់ក្នុង tab ថ្មី"
  },
  {
    "id": 6,
    "category": "HTML",
    "path": "/html/images",
    "title": "មេរៀនទី៦: រូបភាព HTML (HTML Images)",
    "explanation": "Tag <img> ត្រូវបានប្រើដើម្បីបង្ហាញរូបភាព។ វាមិនមាន closing tag ទេ។ Attribute src កំណត់ទីតាំងរូបភាព ហើយ alt ផ្តល់ការពិពណ៌នាសម្រាប់រូបភាព។",
    "code": "<!-- រូបភាពពីកុំព្យូទ័រ -->\n<img src=\"my-photo.jpg\" alt=\"រូបថតរបស់ខ្ញុំ\">\n\n<!-- រូបភាពពីអ៊ីនធឺណិត -->\n<img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRVNN58XFDLxdqtwwWRSE924NjtuSryXFGxjg&s\" alt=\"រូបភាពឧទាហរណ៍\">\n\n<!-- កំណត់ទំហំរូបភាព -->\n<img src=\"photo.jpg\" alt=\"រូបថត\" width=\"300\" height=\"200\">\n\n<!-- រូបភាពជាតំណភ្ជាប់ -->\n<a href=\"https://www.example.com\">\n    <img src=\"logo.png\" alt=\"Logo\">\n</a>",
    "tip": "attribute alt សំខាន់ណាស់សម្រាប់ accessibility និងពេលរូបភាពមិនអាចបង្ហាញ"
  },
  {
    "id": 7,
    "category": "HTML",
    "path": "/html/lists",
    "title": "មេរៀនទី៧: បញ្ជី HTML (HTML Lists)",
    "explanation": "HTML មានបញ្ជី ២ ប្រភេទ៖ បញ្ជីមានលេខ (ordered list) ប្រើ <ol> និងបញ្ជីគ្មានលេខ (unordered list) ប្រើ <ul>។ ធាតុនីមួយៗក្នុងបញ្ជីប្រើ <li>។",
    "code": "<!-- បញ្ជីគ្មានលេខ -->\n<ul>\n    <li>ផ្លែប៉ោម</li>\n    <li>ផ្លែចេក</li>\n    <li>ផ្លែស្វាយ</li>\n</ul>\n\n<!-- បញ្ជីមានលេខ -->\n<ol>\n    <li>ជំហានទី១</li>\n    <li>ជំហានទី២</li>\n    <li>ជំហានទី៣</li>\n</ol>\n\n<!-- បញ្ជីក្នុងបញ្ជី -->\n<ul>\n    <li>ផ្លែឈើ\n        <ul>\n            <li>ផ្លែប៉ោម</li>\n            <li>ផ្លែចេក</li>\n        </ul>\n    </li>\n    <li>បន្លែ</li>\n</ul>",
    "tip": "អ្នកអាចដាក់បញ្ជីក្នុងបញ្ជីដើម្បីបង្កើតរចនាសម្ព័ន្ធស្មុគស្មាញ"
  },
  {
    "id": 8,
    "category": "HTML",
    "path": "/html/tables",
    "title": "មេរៀនទី៨: តារាង HTML (HTML Tables)",
    "explanation": "តារាង HTML ត្រូវបានបង្កើតដោយប្រើ <table>។ <tr> សម្រាប់ជួរ <td> សម្រាប់ក្រឡា និង <th> សម្រាប់ក្បាលតារាង។ តារាងមានប្រយោជន៍សម្រាប់បង្ហាញទិន្នន័យជាលក្ខណៈតារាង។",
    "code": "<table border=\"1\">\n    <tr>\n        <th>ឈ្មោះ</th>\n        <th>អាយុ</th>\n        <th>ទីក្រុង</th>\n    </tr>\n    <tr>\n        <td>សុខា</td>\n        <td>២៥</td>\n        <td>ភ្នំពេញ</td>\n    </tr>\n    <tr>\n        <td>ដារា</td>\n        <td>៣០</td>\n        <td>សៀមរាប</td>\n    </tr>\n    <tr>\n        <td>វិចិត្រ</td>\n        <td>២៨</td>\n        <td>បាត់ដំបង</td>\n    </tr>\n</table>",
    "tip": "ប្រើ <th> សម្រាប់ក្បាលតារាងដើម្បីធ្វើឱ្យតារាងមានន័យច្បាស់"
  },
  {
    "id": 9,
    "category": "HTML",
    "path": "/html/forms",
    "title": "មេរៀនទី៩: ទម្រង់ HTML (HTML Forms)",
    "explanation": "ទម្រង់ HTML ត្រូវបានប្រើដើម្បីប្រមូលព័ត៌មានពីអ្នកប្រើប្រាស់។ <form> គឺជា container សម្រាប់ធាតុបញ្ចូលផ្សេងៗដូចជា input, textarea, select។",
    "code": "<form action=\"/submit\" method=\"post\">\n    <label for=\"name\">ឈ្មោះ:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    \n    <label for=\"email\">អ៊ីមែល:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    \n    <label for=\"message\">សារ:</label>\n    <textarea id=\"message\" name=\"message\" rows=\"4\"></textarea>\n    \n    <input type=\"submit\" value=\"ផ្ញើ\">\n</form>",
    "tip": "ប្រើ label ជាមួយ input ដើម្បីធ្វើឱ្យទម្រង់ងាយស្រួលប្រើ"
  },
  {
    "id": 10,
    "category": "HTML",
    "path": "/html/input-types",
    "title": "មេរៀនទី១០: ប្រភេទ Input HTML (HTML Input Types)",
    "explanation": "HTML មាន input types ជាច្រើនសម្រាប់ការបញ្ចូលទិន្នន័យផ្សេងៗគ្នា។ នីមួយៗមានលក្ខណៈពិសេសនិងការប្រើប្រាស់ខុសៗគ្នា។",
    "code": "<!-- ប្រភេទ input ផ្សេងៗ -->\n<input type=\"text\" placeholder=\"អត្ថបទ\">\n<input type=\"password\" placeholder=\"ពាក្យសម្ងាត់\">\n<input type=\"email\" placeholder=\"អ៊ីមែល\">\n<input type=\"number\" placeholder=\"លេខ\">\n<input type=\"date\" placeholder=\"កាលបរិច្ឆេទ\">\n<input type=\"color\" placeholder=\"ពណ៌\">\n<input type=\"file\" placeholder=\"ឯកសារ\">\n\n<!-- Radio buttons -->\n<input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\">\n<label for=\"male\">ប្រុស</label>\n<input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n<label for=\"female\">ស្រី</label>\n\n<!-- Checkbox -->\n<input type=\"checkbox\" id=\"agree\" name=\"agree\">\n<label for=\"agree\">យល់ព្រមលក្ខខណ្ឌ</label>",
    "tip": "ប្រើ input type ដែលសមស្របដើម្បីទទួលបានការបញ្ចូលទិន្នន័យត្រឹមត្រូវ"
  },
  {
    "id": 11,
    "category": "HTML",
    "path": "/html/semantic-elements",
    "title": "មេរៀនទី១១: ធាតុ Semantic HTML (HTML Semantic Elements)",
    "explanation": "ធាតុ Semantic HTML ផ្តល់ន័យច្បាស់លាស់អំពីមាតិកា។ ធាតុទាំងនេះជួយ browser និង search engine យល់ពីរចនាសម្ព័ន្ធទំព័របានប្រសើរជាង។",
    "code": "<header>\n    <h1>ចំណងជើងវេបសាយ</h1>\n    <nav>\n        <a href=\"#home\">ទំព័រដើម</a>\n        <a href=\"#about\">អំពីយើង</a>\n        <a href=\"#contact\">ទំនាក់ទំនង</a>\n    </nav>\n</header>\n\n<main>\n    <article>\n        <h2>ចំណងជើងអត្ថបទ</h2>\n        <p>មាតិកាអត្ថបទ...</p>\n    </article>\n    \n    <aside>\n        <h3>ព័ត៌មានបន្ថែម</h3>\n        <p>ព័ត៌មានពាក់ព័ន្ធ...</p>\n    </aside>\n</main>\n\n<footer>\n    <p>&copy; ២០២៤ វេបសាយរបស់ខ្ញុំ</p>\n</footer>",
    "tip": "ប្រើធាតុ semantic ដើម្បីធ្វើឱ្យកូដមានន័យច្បាស់និងល្អសម្រាប់ SEO"
  },
  {
    "id": 12,
    "category": "HTML",
    "path": "/html/div-span",
    "title": "មេរៀនទី១២: Div និង Span HTML (HTML Div and Span)",
    "explanation": "<div> និង <span> គឺជាធាតុ generic សម្រាប់ grouping និង styling។ <div> គឺ block element ហើយ <span> គឺ inline element។ ពួកវាមិនមានន័យ semantic ទេ។",
    "code": "<!-- Div សម្រាប់ grouping block elements -->\n<div class=\"container\">\n    <h2>ផ្នែកព័ត៌មាន</h2>\n    <p>នេះគឺជាមាតិកាក្នុង div។</p>\n</div>\n\n<div class=\"sidebar\">\n    <h3>ម៉ឺនុយ</h3>\n    <ul>\n        <li>ធាតុទី១</li>\n        <li>ធាតុទី២</li>\n    </ul>\n</div>\n\n<!-- Span សម្រាប់ styling inline text -->\n<p>នេះគឺជាអត្ថបទធម្មតា និង <span style=\"color: red;\">នេះគឺជាអត្ថបទពណ៌ក្រហម</span> ក្នុងកថាខណ្ឌដដែល។</p>\n\n<p>តម្លៃ: <span class=\"price\">$១០០</span></p>",
    "tip": "ប្រើ div សម្រាប់ layout និង span សម្រាប់ styling អត្ថបទតូចៗ"
  },
  {
    "id": 13,
    "category": "HTML",
    "path": "/html/attributes",
    "title": "មេរៀនទី១៣: Attributes HTML (HTML Attributes)",
    "explanation": "Attributes ផ្តល់ព័ត៌មានបន្ថែមអំពីធាតុ HTML។ ពួកវាត្រូវបានសរសេរក្នុង opening tag និងមានទម្រង់ name=\"value\"។ Attributes ជាច្រើនមានសម្រាប់ធាតុទាំងអស់។",
    "code": "<!-- Global attributes -->\n<div id=\"main-content\" class=\"container\" title=\"មាតិកាសំខាន់\">\n    <p>មាតិកា</p>\n</div>\n\n<!-- Link attributes -->\n<a href=\"https://www.youtube.com/\" target=\"_blank\" title=\"ទៅវេបសាយឧទាហរណ៍\">តំណភ្ជាប់ទៅកាន់ Youtube</a>\n\n<!-- Image attributes -->\n<img src=\"https://cdn.pixabay.com/photo/2020/03/17/12/02/vietnam-4940065_1280.jpg\" alt=\"រូបថត\" width=\"300\" height=\"200\" title=\"រូបថតស្រីស្អាត\">\n\n<!-- Form attributes -->\n<input type=\"text\" name=\"username\" placeholder=\"ឈ្មោះអ្នកប្រើ\" required maxlength=\"20\">\n\n<!-- Style attribute -->\n<p style=\"color: blue; font-size: 18px;\">អត្ថបទពណ៌ខៀវ</p>",
    "tip": "id attribute ត្រូវតែមានតែមួយគត់ក្នុងទំព័រ ប៉ុន្តែ class អាចប្រើបានច្រើន"
  },
  {
    "id": 14,
    "category": "HTML",
    "path": "/html/comments",
    "title": "មេរៀនទី១៤: មតិយោបល់ HTML (HTML Comments)",
    "explanation": "មតិយោបល់ HTML ត្រូវបានប្រើដើម្បីបន្ថែមការពន្យល់ក្នុងកូដដែលមិនបង្ហាញលើទំព័រ។ វាមានប្រយោជន៍សម្រាប់ការកត់ចំណាំនិងការ debug។",
    "code": "<!-- នេះគឺជាមតិយោបល់ វានឹងមិនបង្ហាញលើទំព័រទេ -->\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>ទំព័រឧទាហរណ៍</title>\n    <!-- Meta tags សម្រាប់ SEO -->\n    <meta name=\"description\" content=\"ការពិពណ៌នាទំព័រ\">\n</head>\n<body>\n    <!-- Header section -->\n    <header>\n        <h1>ចំណងជើងសំខាន់</h1>\n    </header>\n    \n    <!-- Main content area -->\n    <main>\n        <p>មាតិកាសំខាន់នៅទីនេះ</p>\n        <!-- TODO: បន្ថែមរូបភាពនៅទីនេះ -->\n    </main>\n    \n    <!-- \n    នេះគឺជាមតិយោបល់ច្រើនបន្ទាត់\n    អ្នកអាចសរសេរការពន្យល់វែងៗនៅទីនេះ\n    -->\n</body>\n</html>",
    "tip": "ប្រើមតិយោបល់ដើម្បីពន្យល់កូដស្មុគស្មាញ ឬដើម្បីបិទកូដបណ្តោះអាសន្ន"
  },
  {
    "id": 15,
    "category": "HTML",
    "path": "/html/meta-tags",
    "title": "មេរៀនទី១៥: Meta Tags HTML (HTML Meta Tags)",
    "explanation": "Meta tags ផ្តល់ព័ត៌មានអំពីទំព័រ HTML ដែលមិនបង្ហាញលើទំព័រ។ ពួកវាសំខាន់សម្រាប់ SEO, responsive design, និងការកំណត់ការបង្ហាញទំព័រ។",
    "code": "<!DOCTYPE html>\n<html lang=\"km\">\n<head>\n    <!-- Character encoding -->\n    <meta charset=\"UTF-8\">\n    \n    <!-- Responsive design -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \n    <!-- SEO meta tags -->\n    <meta name=\"description\" content=\"វេបសាយរៀនកូដជាភាសាខ្មែរ\">\n    <meta name=\"keywords\" content=\"HTML, CSS, JavaScript, ភាសាខ្មែរ\">\n    <meta name=\"author\" content=\"ឈ្មោះអ្នកនិពន្ធ\">\n    \n    <!-- Social media meta tags -->\n    <meta property=\"og:title\" content=\"ចំណងជើងសម្រាប់ Facebook\">\n    <meta property=\"og:description\" content=\"ការពិពណ៌នាសម្រាប់ Facebook\">\n    <meta property=\"og:image\" content=\"image.jpg\">\n    \n    <title>ចំណងជើងទំព័រ</title>\n</head>\n<body>\n    <h1>មាតិកាទំព័រ</h1>\n</body>\n</html>",
    "tip": "Meta viewport tag សំខាន់ណាស់សម្រាប់ធ្វើឱ្យទំព័រ responsive លើ mobile"
  },
  {
    "id": 16,
    "category": "HTML",
    "path": "/html/multimedia",
    "title": "មេរៀនទី១៦: Multimedia HTML (HTML Multimedia)",
    "explanation": "HTML អាចបង្ហាញ multimedia ដូចជាវីដេអូ និងអូឌីយ៉ូដោយប្រើ <video> និង <audio> tags។ ធាតុទាំងនេះអនុញ្ញាតឱ្យបង្កប់មេឌៀដោយផ្ទាល់ក្នុងទំព័រ។",
    "code": "<!-- Video element -->\n<video width=\"400\" height=\"300\" controls>\n    <source src=\"movie.mp4\" type=\"video/mp4\">\n    <source src=\"movie.webm\" type=\"video/webm\">\n    កម្មវិធីរុករករបស់អ្នកមិនគាំទ្រ video tag ទេ។\n</video>\n\n<!-- Audio element -->\n<audio controls>\n    <source src=\"music.mp3\" type=\"audio/mpeg\">\n    <source src=\"music.ogg\" type=\"audio/ogg\">\n    កម្មវិធីរុករករបស់អ្នកមិនគាំទ្រ audio tag ទេ។\n</audio>\n\n<!-- Embedded YouTube video -->\n<iframe width=\"560\" height=\"315\" \n        src=\"https://www.youtube.com/embed/VIDEO_ID\" \n        title=\"YouTube video player\" \n        frameborder=\"0\" \n        allowfullscreen>\n</iframe>",
    "tip": "ប្រើ multiple source formats ដើម្បីធានាថាមេឌៀអាចដំណើរការលើ browser ទាំងអស់"
  },
  {
    "id": 17,
    "category": "HTML",
    "path": "/html/iframe",
    "title": "មេរៀនទី១៧: iFrame HTML (HTML iFrame)",
    "explanation": "iFrame អនុញ្ញាតឱ្យបង្កប់ទំព័រ HTML មួយក្នុងទំព័រមួយទៀត។ វាមានប្រយោជន៍សម្រាប់បង្កប់មាតិកាពីវេបសាយផ្សេងដូចជា Google Maps, YouTube វីដេអូ។",
    "code": "<!-- Basic iframe -->\n<iframe src=\"https://www.example.com\" \n        width=\"600\" \n        height=\"400\" \n        title=\"វេបសាយឧទាហរណ៍\">\n</iframe>\n\n<!-- Google Maps iframe -->\n<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3908.7!2d104.9!3d11.5!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2zMTHCsDMwJzAwLjAiTiAxMDTCsDU0JzAwLjAiRQ!5e0!3m2!1sen!2skh!4v1234567890\" \n        width=\"600\" \n        height=\"450\" \n        style=\"border:0;\" \n        allowfullscreen=\"\" \n        loading=\"lazy\">\n</iframe>\n\n<!-- Responsive iframe -->\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 56.25%;\">\n    <iframe src=\"https://www.youtube.com/embed/VIDEO_ID\" \n            style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" \n            frameborder=\"0\" \n            allowfullscreen>\n    </iframe>\n</div>",
    "tip": "ប្រើ responsive wrapper div ដើម្បីធ្វើឱ្យ iframe responsive"
  },
  {
    "id": 18,
    "category": "HTML",
    "path": "/html/entities",
    "title": "មេរៀនទី១៨: HTML Entities",
    "explanation": "HTML entities ត្រូវបានប្រើដើម្បីបង្ហាញតួអក្សរពិសេសដែលមានន័យក្នុង HTML។ ឧទាហរណ៍ < > & និងតួអក្សរពិសេសផ្សេងទៀត។",
    "code": "<!-- តួអក្សរពិសេស HTML -->\n<p>ដើម្បីបង្ហាញ &lt;h1&gt; tag អ្នកត្រូវប្រើ entities</p>\n<p>សញ្ញា &amp; ត្រូវសរសេរជា &amp;amp;</p>\n<p>សញ្ញា &quot; ត្រូវសរសេរជា &amp;quot;</p>\n<p>ចន្លោះដែលមិនបាត់ &nbsp; ត្រូវប្រើ &amp;nbsp;</p>\n\n<!-- តួអក្សរពិសេសផ្សេងទៀត -->\n<p>រូបិយប័ណ្ណ: &euro; &pound; &yen; &cent;</p>\n<p>សញ្ញាគណិតវិទ្យា: &plusmn; &times; &divide; &ne;</p>\n<p>សញ្ញាព្រួញ: &larr; &rarr; &uarr; &darr;</p>\n<p>សញ្ញាផ្សេងៗ: &copy; &reg; &trade; &deg;</p>\n\n<!-- Unicode characters -->\n<p>អក្សរខ្មែរ: &#6016; &#6017; &#6018;</p>\n<p>Emoji: &#128512; &#128513; &#128514;</p>",
    "tip": "ប្រើ HTML entities ពេលអ្នកចង់បង្ហាញតួអក្សរដែលមានន័យពិសេសក្នុង HTML"
  },
  {
    "id": 19,
    "category": "HTML",
    "path": "/html/head-elements",
    "title": "មេរៀនទី១៩: ធាតុក្នុង Head HTML (HTML Head Elements)",
    "explanation": "ផ្នែក <head> មានធាតុសំខាន់ៗដែលមិនបង្ហាញលើទំព័រ ប៉ុន្តែចាំបាច់សម្រាប់ការកំណត់ទំព័រ។ ធាតុទាំងនេះរួមមាន title, meta, link, style, script។",
    "code": "<!DOCTYPE html>\n<html lang=\"km\">\n<head>\n    <!-- ចំណងជើងទំព័រ -->\n    <title>ចំណងជើងទំព័រ - វេបសាយរបស់ខ្ញុំ</title>\n    \n    <!-- Meta tags -->\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"ការពិពណ៌នាទំព័រ\">\n    \n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+Khmer\">\n    \n    <!-- Favicon -->\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n    \n    <!-- Internal CSS -->\n    <style>\n        body { font-family: 'Noto Sans Khmer', sans-serif; }\n    </style>\n    \n    <!-- JavaScript -->\n    <script src=\"script.js\"></script>\n    <script>\n        console.log('ទំព័របានផ្ទុក');\n    </script>\n</head>\n<body>\n    <h1>មាតិកាទំព័រ</h1>\n</body>\n</html>",
    "tip": "រៀបចំធាតុក្នុង head តាមលំដាប់៖ meta tags, title, links, styles, scripts"
  },
  {
    "id": 20,
    "category": "HTML",
    "path": "/html/block-inline",
    "title": "មេរៀនទី២០: Block vs Inline Elements",
    "explanation": "ធាតុ HTML មាន ២ ប្រភេទសំខាន់៖ Block elements ដែលកាន់កន្លែងពេញបន្ទាត់ និង Inline elements ដែលកាន់កន្លែងតាមតម្រូវការ។ ការយល់ដឹងនេះសំខាន់សម្រាប់ layout។",
    "code": "<!-- Block elements - កាន់កន្លែងពេញបន្ទាត់ -->\n<div>នេះគឺជា div (block)</div>\n<div>នេះគឺជា div ទីពីរ (block)</div>\n\n<h1>ចំណងជើង (block)</h1>\n<p>កថាខណ្ឌ (block)</p>\n<ul>\n    <li>បញ្ជី (block)</li>\n</ul>\n\n<!-- Inline elements - កាន់កន្លែងតាមតម្រូវការ -->\n<p>\n    នេះគឺជាអត្ថបទធម្មតា \n    <span>នេះគឺជា span (inline)</span> \n    <a href=\"#\">នេះគឺជាតំណភ្ជាប់ (inline)</a> \n    <strong>អត្ថបទដិត (inline)</strong> \n    <em>អត្ថបទទ្រេត (inline)</em>\n    នៅក្នុងកថាខណ្ឌដដែល។\n</p>\n\n<!-- Inline-block elements -->\n<img src=\"image.jpg\" alt=\"រូបភាព\" style=\"display: inline-block;\">\n<button>ប៊ូតុង</button>",
    "tip": "Block elements ចាប់ផ្តើមបន្ទាត់ថ្មី ហើយ inline elements បន្តនៅបន្ទាត់ដដែល"
  },
  {
    "id": 21,
    "category": "HTML",
    "path": "/html/html5-features",
    "title": "មេរៀនទី២១: លក្ខណៈពិសេស HTML5 (HTML5 Features)",
    "explanation": "HTML5 បានបន្ថែមលក្ខណៈពិសេសថ្មីៗជាច្រើនដូចជា semantic elements, multimedia support, form enhancements, និង APIs ថ្មីៗ។",
    "code": "<!-- HTML5 Semantic Elements -->\n<article>\n    <header>\n        <h1>ចំណងជើងអត្ថបទ</h1>\n        <time datetime=\"2024-01-01\">១ មករា ២០២៤</time>\n    </header>\n    \n    <section>\n        <h2>ផ្នែកទី១</h2>\n        <p>មាតិកាផ្នែកទី១...</p>\n    </section>\n    \n    <aside>\n        <h3>ព័ត៌មានពាក់ព័ន្ធ</h3>\n        <p>ព័ត៌មានបន្ថែម...</p>\n    </aside>\n    \n    <footer>\n        <p>អ្នកនិពន្ធ: ឈ្មោះអ្នកនិពន្ធ</p>\n    </footer>\n</article>\n\n<!-- HTML5 Form Elements -->\n<form>\n    <input type=\"email\" placeholder=\"អ៊ីមែល\" required>\n    <input type=\"url\" placeholder=\"វេបសាយ\">\n    <input type=\"tel\" placeholder=\"លេខទូរស័ព្ទ\">\n    <input type=\"date\" placeholder=\"កាលបរិច្ឆេទ\">\n    <input type=\"range\" min=\"0\" max=\"100\">\n    <datalist id=\"browsers\">\n        <option value=\"Chrome\">\n        <option value=\"Firefox\">\n        <option value=\"Safari\">\n    </datalist>\n    <input list=\"browsers\" placeholder=\"ជ្រើសរើសកម្មវិធីរុករក\">\n</form>",
    "tip": "HTML5 semantic elements ធ្វើឱ្យកូដមានន័យច្បាស់និងល្អសម្រាប់ SEO"
  },
  {
    "id": 22,
    "category": "HTML",
    "path": "/html/accessibility",
    "title": "មេរៀនទី២២: Accessibility HTML",
    "explanation": "Accessibility សំខាន់ដើម្បីធ្វើឱ្យវេបសាយអាចប្រើបានដោយមនុស្សគ្រប់រូប រួមទាំងអ្នកពិការ។ HTML ផ្តល់នូវ attributes និង elements ជាច្រើនសម្រាប់ accessibility។",
    "code": "<!-- Alt text សម្រាប់រូបភាព -->\n<img src=\"chart.jpg\" alt=\"គំនូសតាងបង្ហាញការលក់ឡើង ២០%\">\n\n<!-- Labels សម្រាប់ form inputs -->\n<label for=\"username\">ឈ្មោះអ្នកប្រើ:</label>\n<input type=\"text\" id=\"username\" name=\"username\">\n\n<!-- ARIA attributes -->\n<button aria-label=\"បិទផ្ទាំង\" onclick=\"closeModal()\">\n    <span aria-hidden=\"true\">&times;</span>\n</button>\n\n<!-- Heading hierarchy -->\n<h1>ចំណងជើងសំខាន់</h1>\n<h2>ចំណងជើងរង</h2>\n<h3>ចំណងជើងរងរង</h3>\n\n<!-- Skip links -->\n<a href=\"#main-content\" class=\"skip-link\">រំលងទៅមាតិកាសំខាន់</a>\n\n<!-- Table headers -->\n<table>\n    <thead>\n        <tr>\n            <th scope=\"col\">ឈ្មោះ</th>\n            <th scope=\"col\">អាយុ</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>សុខា</td>\n            <td>២៥</td>\n        </tr>\n    </tbody>\n</table>",
    "tip": "ប្រើ alt text, labels, និង semantic HTML ដើម្បីធ្វើឱ្យវេបសាយ accessible"
  },
  {
    "id": 23,
    "category": "HTML",
    "path": "/html/validation",
    "title": "មេរៀនទី២៣: ការត្រួតពិនិត្យ HTML (HTML Validation)",
    "explanation": "ការត្រួតពិនិត្យ HTML សំខាន់ដើម្បីធានាថាកូដត្រឹមត្រូវតាមស្តង់ដារ។ HTML ត្រឹមត្រូវធ្វើឱ្យទំព័រដំណើរការបានល្អនិងមាន SEO ល្អ។",
    "code": "<!-- HTML ត្រឹមត្រូវ -->\n<!DOCTYPE html>\n<html lang=\"km\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ចំណងជើងត្រឹមត្រូវ</title>\n</head>\n<body>\n    <!-- Tags បិទត្រឹមត្រូវ -->\n    <h1>ចំណងជើង</h1>\n    <p>កថាខណ្ឌមានការបិទ tag ត្រឹមត្រូវ។</p>\n    \n    <!-- Attributes មាន quotes -->\n    <img src=\"image.jpg\" alt=\"ការពិពណ៌នារូបភាព\">\n    <a href=\"https://example.com\" title=\"តំណភ្ជាប់ឧទាហរណ៍\">តំណភ្ជាប់</a>\n    \n    <!-- Nested tags ត្រឹមត្រូវ -->\n    <div>\n        <p>កថាខណ្ឌក្នុង div</p>\n        <ul>\n            <li>ធាតុបញ្ជី</li>\n        </ul>\n    </div>\n</body>\n</html>\n\n<!-- កំហុសទូទៅ -->\n<!-- <p>Tag មិនបិទ -->\n<!-- <img src=image.jpg alt=no quotes> -->\n<!-- <div><p>Nested incorrectly</div></p> -->",
    "tip": "ប្រើ HTML validator ដូចជា W3C Markup Validator ដើម្បីពិនិត្យកូដ"
  },
  {
    "id": 24,
    "category": "HTML",
    "path": "/html/best-practices",
    "title": "មេរៀនទី២៤: ការអនុវត្តល្អបំផុត HTML (HTML Best Practices)",
    "explanation": "ការអនុវត្តល្អបំផុតជួយធ្វើឱ្យកូដ HTML មានគុណភាពល្អ រក្សាបានងាយ និងដំណើរការបានល្អ។ នេះរួមមានការសរសេរកូដស្អាត ការប្រើ semantic elements និងការគោរពស្តង់ដារ។",
    "code": "<!DOCTYPE html>\n<html lang=\"km\">\n<head>\n    <!-- Meta tags នៅដើម -->\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"ការពិពណ៌នាទំព័រ\">\n    \n    <!-- Title ច្បាស់លាស់ -->\n    <title>ចំណងជើងទំព័រ - ឈ្មោះវេបសាយ</title>\n    \n    <!-- External resources -->\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <!-- ប្រើ semantic HTML -->\n    <header>\n        <nav>\n            <ul>\n                <li><a href=\"#home\">ទំព័រដើម</a></li>\n                <li><a href=\"#about\">អំពីយើង</a></li>\n            </ul>\n        </nav>\n    </header>\n    \n    <main>\n        <!-- Headings តាមលំដាប់ -->\n        <h1>ចំណងជើងសំខាន់</h1>\n        <h2>ចំណងជើងរង</h2>\n        \n        <!-- Alt text សម្រាប់រូបភាព -->\n        <img src=\"image.jpg\" alt=\"ការពិពណ៌នាមានន័យ\">\n        \n        <!-- Form labels -->\n        <form>\n            <label for=\"email\">អ៊ីមែល:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </form>\n    </main>\n    \n    <!-- Scripts នៅចុងបំផុត -->\n    <script src=\"script.js\"></script>\n</body>\n</html>",
    "tip": "រក្សាកូដឱ្យស្អាត ប្រើ indentation ត្រឹមត្រូវ និងសរសេរ comments សម្រាប់ផ្នែកស្មុគស្មាញ"
  },
  {
    "id": 25,
    "category": "HTML",
    "path": "/html/responsive-images",
    "title": "មេរៀនទី២៥: រូបភាព Responsive HTML (HTML Responsive Images)",
    "explanation": "រូបភាព responsive ធ្វើឱ្យរូបភាពបង្ហាញបានល្អលើឧបករណ៍ទាំងអស់។ HTML ផ្តល់នូវវិធីសាស្រ្តជាច្រើនដើម្បីធ្វើឱ្យរូបភាព responsive។",
    "code": "<!-- រូបភាព responsive មូលដ្ឋាន -->\n<img src=\"image.jpg\" alt=\"រូបភាព\" style=\"max-width: 100%; height: auto;\">\n\n<!-- Picture element សម្រាប់រូបភាពផ្សេងៗ -->\n<picture>\n    <source media=\"(min-width: 800px)\" srcset=\"large-image.jpg\">\n    <source media=\"(min-width: 400px)\" srcset=\"medium-image.jpg\">\n    <img src=\"small-image.jpg\" alt=\"រូបភាព responsive\">\n</picture>\n\n<!-- Srcset សម្រាប់ resolution ផ្សេងៗ -->\n<img src=\"image-400.jpg\" \n     srcset=\"image-400.jpg 400w, \n             image-800.jpg 800w, \n             image-1200.jpg 1200w\" \n     sizes=\"(max-width: 600px) 400px, \n            (max-width: 1000px) 800px, \n            1200px\" \n     alt=\"រូបភាព responsive\">\n\n<!-- Figure និង figcaption -->\n<figure>\n    <img src=\"chart.jpg\" alt=\"គំនូសតាងលក់ដូរ\">\n    <figcaption>គំនូសតាងបង្ហាញការលក់ដូរឆ្នាំ ២០២៤</figcaption>\n</figure>",
    "tip": "ប្រើ max-width: 100% និង height: auto ដើម្បីធ្វើឱ្យរូបភាព responsive មូលដ្ឋាន"
  },
  {
    "id": 26,
    "category": "HTML",
    "path": "/html/seo-basics",
    "title": "មេរៀនទី២៦: SEO មូលដ្ឋាន HTML (HTML SEO Basics)",
    "explanation": "SEO (Search Engine Optimization) ជួយឱ្យទំព័រវេបសាយរកឃើញបានងាយក្នុង search engines។ HTML មានធាតុជាច្រើនដែលសំខាន់សម្រាប់ SEO។",
    "code": "<!DOCTYPE html>\n<html lang=\"km\">\n<head>\n    <!-- Title tag សំខាន់បំផុតសម្រាប់ SEO -->\n    <title>ពាក្យគន្លឹះសំខាន់ - ឈ្មោះវេបសាយ</title>\n    \n    <!-- Meta description -->\n    <meta name=\"description\" content=\"ការពិពណ៌នាទំព័រ ១៥០-១៦០ តួអក្សរ ដែលមានពាក្យគន្លឹះសំខាន់\">\n    \n    <!-- Meta keywords (មិនសូវសំខាន់ហើយ) -->\n    <meta name=\"keywords\" content=\"ពាក្យគន្លឹះ១, ពាក្យគន្លឹះ២, ពាក្យគន្លឹះ៣\">\n    \n    <!-- Open Graph សម្រាប់ social media -->\n    <meta property=\"og:title\" content=\"ចំណងជើងសម្រាប់ Facebook\">\n    <meta property=\"og:description\" content=\"ការពិពណ៌នាសម្រាប់ social media\">\n    <meta property=\"og:image\" content=\"https://example.com/image.jpg\">\n    <meta property=\"og:url\" content=\"https://example.com/page\">\n    \n    <!-- Canonical URL -->\n    <link rel=\"canonical\" href=\"https://example.com/page\">\n</head>\n<body>\n    <!-- H1 tag តែមួយក្នុងទំព័រ -->\n    <h1>ចំណងជើងសំខាន់ដែលមានពាក្យគន្លឹះ</h1>\n    \n    <!-- Structured data -->\n    <article>\n        <h2>ចំណងជើងអត្ថបទ</h2>\n        <p>មាតិកាដែលមានគុណភាពនិងពាក្យគន្លឹះ។</p>\n        \n        <!-- Internal links -->\n        <a href=\"/related-page\">ទំព័រពាក់ព័ន្ធ</a>\n    </article>\n</body>\n</html>",
    "tip": "សរសេរមាតិកាមានគុណភាព ប្រើ heading tags ត្រឹមត្រូវ និងបន្ថែម alt text សម្រាប់រូបភាព"
  },
  {
    "id": 27,
    "category": "HTML",
    "path": "/html/performance",
    "title": "មេរៀនទី២៧: ការកែលម្អដំណើរការ HTML (HTML Performance)",
    "explanation": "ការកែលម្អដំណើរការ HTML ធ្វើឱ្យទំព័រផ្ទុកលឿន។ នេះរួមមានការបង្រួមទំហំឯកសារ ការប្រើ lazy loading និងការរៀបចំ resources ឱ្យបានត្រឹមត្រូវ។",
    "code": "<!DOCTYPE html>\n<html lang=\"km\">\n<head>\n    <!-- Preload critical resources -->\n    <link rel=\"preload\" href=\"critical.css\" as=\"style\">\n    <link rel=\"preload\" href=\"font.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n    \n    <!-- DNS prefetch -->\n    <link rel=\"dns-prefetch\" href=\"//fonts.googleapis.com\">\n    \n    <!-- Critical CSS inline -->\n    <style>\n        /* Critical CSS នៅទីនេះ */\n        body { font-family: Arial, sans-serif; }\n    </style>\n    \n    <!-- Non-critical CSS -->\n    <link rel=\"stylesheet\" href=\"styles.css\" media=\"print\" onload=\"this.media='all'\">\n</head>\n<body>\n    <!-- Lazy loading images -->\n    <img src=\"https://st5.depositphotos.com/26554908/72639/i/450/depositphotos_726398350-stock-photo-portrait-cute-smiles-asian-attractive.jpg\" \n         data-src=\"actual-image.jpg\" \n         alt=\"រូបភាព\" \n         loading=\"lazy\">\n    \n    <!-- Optimized images -->\n    <picture>\n        <source srcset=\"image.webp\" type=\"image/webp\">\n        <source srcset=\"image.jpg\" type=\"image/jpeg\">\n        <img src=\"image.jpg\" alt=\"រូបភាព\">\n    </picture>\n    \n    <!-- Defer non-critical JavaScript -->\n    <script src=\"non-critical.js\" defer></script>\n    \n    <!-- Async for independent scripts -->\n    <script src=\"analytics.js\" async></script>\n    \n    <!-- Critical JavaScript inline -->\n    <script>\n        // Critical JavaScript នៅទីនេះ\n    </script>\n</body>\n</html>",
    "tip": "ដាក់ CSS នៅ head និង JavaScript នៅចុង body ដើម្បីកែលម្អដំណើរការ"
  },
  {
    "id": 28,
    "category": "HTML",
    "path": "/html/progressive-enhancement",
    "title": "មេរៀនទី២៨: Progressive Enhancement HTML",
    "explanation": "Progressive Enhancement គឺជាវិធីសាស្រ្តបង្កើតវេបសាយដែលដំណើរការបានលើឧបករណ៍ទាំងអស់ ចាប់ពីមូលដ្ឋានបំផុតរហូតដល់ទំនើប។ ចាប់ផ្តើមពី HTML រឹងមាំ បន្ទាប់មក CSS និង JavaScript។",
    "code": "<!-- HTML មូលដ្ឋានដែលដំណើរការគ្រប់ទីកន្លែង -->\n<form action=\"/submit\" method=\"post\">\n    <fieldset>\n        <legend>ព័ត៌មានផ្ទាល់ខ្លួន</legend>\n        \n        <label for=\"name\">ឈ្មោះ (ចាំបាច់):</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required>\n        \n        <label for=\"email\">អ៊ីមែល (ចាំបាច់):</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        \n        <label for=\"phone\">លេខទូរស័ព្ទ:</label>\n        <input type=\"tel\" id=\"phone\" name=\"phone\">\n        \n        <label for=\"message\">សារ:</label>\n        <textarea id=\"message\" name=\"message\" rows=\"4\"></textarea>\n    </fieldset>\n    \n    <!-- Fallback button ដែលដំណើរការគ្មាន JavaScript -->\n    <button type=\"submit\">ផ្ញើសារ</button>\n    \n    <!-- Enhanced button សម្រាប់ JavaScript -->\n    <button type=\"button\" id=\"ajax-submit\" style=\"display: none;\">ផ្ញើសារ (លឿន)</button>\n</form>\n\n<!-- Content ដែលមានន័យគ្មាន CSS -->\n<article>\n    <h1>ចំណងជើងអត្ថបទ</h1>\n    <p><time datetime=\"2024-01-01\">១ មករា ២០២៤</time></p>\n    <p>មាតិកាអត្ថបទដែលអានបានគ្មាន styling...</p>\n</article>",
    "tip": "ធ្វើឱ្យមុខងារមូលដ្ឋានដំណើរការជាមុនសិន បន្ទាប់មកបន្ថែម enhancement"
  },
  {
    "id": 29,
    "category": "HTML",
    "path": "/html/web-components",
    "title": "មេរៀនទី២៩: Web Components HTML",
    "explanation": "Web Components អនុញ្ញាតឱ្យបង្កើត custom HTML elements ដែលអាចប្រើបានម្តងហើយម្តងទៀត។ វារួមមាន Custom Elements, Shadow DOM, និង HTML Templates។",
    "code": "<!-- HTML Template -->\n<template id=\"user-card-template\">\n    <style>\n        .card {\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            padding: 16px;\n            margin: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        .avatar {\n            width: 50px;\n            height: 50px;\n            border-radius: 50%;\n        }\n    </style>\n    <div class=\"card\">\n        <img class=\"avatar\" src=\"\" alt=\"\">\n        <h3 class=\"name\"></h3>\n        <p class=\"email\"></p>\n    </div>\n</template>\n\n<!-- ការប្រើប្រាស់ Custom Element -->\n<user-card name=\"សុខា\" email=\"sokha@example.com\" avatar=\"avatar1.jpg\"></user-card>\n<user-card name=\"ដារា\" email=\"dara@example.com\" avatar=\"avatar2.jpg\"></user-card>\n\n<!-- Slot សម្រាប់ content projection -->\n<template id=\"modal-template\">\n    <style>\n        .modal {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n        }\n    </style>\n    <div class=\"modal\">\n        <slot name=\"header\"></slot>\n        <slot></slot>\n        <slot name=\"footer\"></slot>\n    </div>\n</template>\n\n<custom-modal>\n    <h2 slot=\"header\">ចំណងជើង Modal</h2>\n    <p>មាតិកា Modal នៅទីនេះ</p>\n    <button slot=\"footer\">បិទ</button>\n</custom-modal>",
    "tip": "Web Components ល្អសម្រាប់បង្កើត UI components ដែលអាចប្រើបានម្តងហើយម្តងទៀត"
  },
  {
    "id": 30,
    "category": "HTML",
    "path": "/html/modern-html",
    "title": "មេរៀនទី៣០: HTML ទំនើប (Modern HTML)",
    "explanation": "HTML ទំនើបមានលក្ខណៈពិសេសថ្មីៗដែលធ្វើឱ្យការអភិវឌ្ឍន៍វេបសាយកាន់តែងាយស្រួល។ នេះរួមមាន new input types, APIs, និង semantic elements ថ្មីៗ។",
    "code": "<!DOCTYPE html>\n<html lang=\"km\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HTML ទំនើប</title>\n    \n    <!-- Module scripts -->\n    <script type=\"module\" src=\"app.js\"></script>\n    \n    <!-- CSS Custom Properties -->\n    <style>\n        :root {\n            --primary-color: #007bff;\n            --font-size: 16px;\n        }\n    </style>\n</head>\n<body>\n    <!-- Dialog element -->\n    <dialog id=\"myDialog\">\n        <form method=\"dialog\">\n            <p>តើអ្នកប្រាកដទេ?</p>\n            <button value=\"cancel\">បោះបង់</button>\n            <button value=\"confirm\">យល់ព្រម</button>\n        </form>\n    </dialog>\n    \n    <!-- Details/Summary -->\n    <details>\n        <summary>ចុចដើម្បីមើលព័ត៌មានបន្ថែម</summary>\n        <p>នេះគឺជាព័ត៌មានលម្អិតដែលអាចបង្ហាញ/លាក់បាន។</p>\n    </details>\n    \n    <!-- Progress element -->\n    <label for=\"progress\">ដំណើរការ:</label>\n    <progress id=\"progress\" value=\"70\" max=\"100\">70%</progress>\n    \n    <!-- Meter element -->\n    <label for=\"disk-usage\">ការប្រើប្រាស់ disk:</label>\n    <meter id=\"disk-usage\" value=\"0.6\" min=\"0\" max=\"1\">60%</meter>\n    \n    <!-- Output element -->\n    <form oninput=\"result.value=parseInt(a.value)+parseInt(b.value)\">\n        <input type=\"range\" id=\"a\" value=\"50\"> +\n        <input type=\"number\" id=\"b\" value=\"50\"> =\n        <output name=\"result\" for=\"a b\">100</output>\n    </form>\n    \n    <!-- Picture with modern formats -->\n    <picture>\n        <source srcset=\"image.avif\" type=\"image/avif\">\n        <source srcset=\"image.webp\" type=\"image/webp\">\n        <img src=\"image.jpg\" alt=\"រូបភាព\" loading=\"lazy\">\n    </picture>\n</body>\n</html>",
    "tip": "ប្រើ HTML ទំនើបដើម្បីបង្កើតបទពិសោធន៍អ្នកប្រើប្រាស់ល្អប្រសើរ"
  },
  {
    "id": 31,
    "category": "CSS",
    "path": "/css/introduction",
    "title": "មេរៀនទី១: បុព្វហេតុ CSS (Introduction to CSS)",
    "explanation": "CSS (Cascading Style Sheets) គឺជាភាសាសម្រាប់កំណត់រូបរាង ពណ៌ ទំហំអក្សរ និងលេអាប់នៃធាតុ HTML។ CSS ធ្វើឱ្យទំព័រវេបសាយមានភាពស្អាត ទាក់ទាញ និងងាយស្រួលប្រើប្រាស់។",
    "code": "/* CSS មូលដ្ឋាន */\nbody {\n    font-family: 'Noto Sans Khmer', Arial, sans-serif;\n    background-color: #f5f5f5;\n    margin: 0;\n    padding: 20px;\n}\n\nh1 {\n    color: #2c3e50;\n    text-align: center;\n    font-size: 2.5em;\n}\n\np {\n    color: #34495e;\n    line-height: 1.6;\n    margin-bottom: 15px;\n}\n\n.highlight {\n    background-color: #f1c40f;\n    padding: 5px;\n    border-radius: 3px;\n}",
    "tip": "CSS ត្រូវបានសរសេរជា selector និង properties ដែល selector កំណត់ធាតុ ហើយ properties កំណត់រូបរាង"
  },
  {
    "id": 32,
    "category": "CSS",
    "path": "/css/selectors",
    "title": "មេរៀនទី២: CSS Selectors",
    "explanation": "CSS Selectors ត្រូវបានប្រើដើម្បីជ្រើសរើសធាតុ HTML ដែលយើងចង់កំណត់រូបរាង។ មាន selector ប្រភេទផ្សេងៗគ្នាដូចជា element, class, id, attribute selectors។",
    "code": "/* Element selector */\nh1 {\n    color: blue;\n}\n\n/* Class selector */\n.my-class {\n    background-color: yellow;\n}\n\n/* ID selector */\n#my-id {\n    font-size: 20px;\n}\n\n/* Attribute selector */\ninput[type=\"text\"] {\n    border: 2px solid green;\n}\n\n/* Descendant selector */\ndiv p {\n    margin-left: 20px;\n}\n\n/* Child selector */\nul > li {\n    list-style-type: square;\n}\n\n/* Pseudo-class selector */\na:hover {\n    color: red;\n    text-decoration: underline;\n}\n\n/* Multiple selectors */\nh1, h2, h3 {\n    font-family: 'Noto Sans Khmer', sans-serif;\n}",
    "tip": "ប្រើ class selectors សម្រាប់ styling ទូទៅ និង ID selectors សម្រាប់ធាតុតែមួយ"
  },
  {
    "id": 33,
    "category": "CSS",
    "path": "/css/colors",
    "title": "មេរៀនទី៣: ពណ៌ CSS (CSS Colors)",
    "explanation": "CSS អនុញ្ញាតឱ្យកំណត់ពណ៌តាមវិធីផ្សេងៗគ្នា។ អ្នកអាចប្រើឈ្មោះពណ៌ hex codes, RGB, HSL ឬ RGBA សម្រាប់ពណ៌ដែលមាន transparency។",
    "code": "/* ឈ្មោះពណ៌ */\nh1 {\n    color: red;\n    background-color: lightblue;\n}\n\n/* Hex colors */\n.header {\n    color: #ff6b6b; /* ក្រហមស្រាល */\n    background-color: #4ecdc4; /* បៃតងខៀវ */\n}\n\n/* RGB colors */\n.content {\n    color: rgb(255, 107, 107);\n    background-color: rgb(78, 205, 196);\n}\n\n/* RGBA colors (មាន transparency) */\n.overlay {\n    background-color: rgba(0, 0, 0, 0.5); /* ខ្មៅ 50% transparent */\n}\n\n/* HSL colors */\n.button {\n    background-color: hsl(195, 53%, 79%);\n    color: hsl(348, 100%, 61%);\n}\n\n/* CSS Custom Properties (Variables) */\n:root {\n    --primary-color: #3498db;\n    --secondary-color: #e74c3c;\n}\n\n.card {\n    background-color: var(--primary-color);\n    border: 2px solid var(--secondary-color);\n}",
    "tip": "ប្រើ CSS variables ដើម្បីរក្សាពណ៌ដែលប្រើញឹកញាប់ និងងាយស្រួលផ្លាស់ប្តូរ"
  },
  {
    "id": 34,
    "category": "CSS",
    "path": "/css/fonts",
    "title": "មេរៀនទី៤: ពុម្ពអក្សរ CSS (CSS Fonts)",
    "explanation": "CSS ផ្តល់នូវការគ្រប់គ្រងពុម្ពអក្សរយ៉ាងពេញលេញ។ អ្នកអាចកំណត់ប្រភេទពុម្ពអក្សរ ទំហំ ទម្ងន់ និងលក្ខណៈផ្សេងៗទៀត។ សម្រាប់ភាសាខ្មែរ ត្រូវប្រើពុម្ពអក្សរដែលគាំទ្រ Unicode។",
    "code": "/* ពុម្ពអក្សរសម្រាប់ភាសាខ្មែរ */\nbody {\n    font-family: 'Noto Sans Khmer', 'Khmer OS', Arial, sans-serif;\n    font-size: 16px;\n    line-height: 1.6;\n}\n\n/* ទំហំពុម្ពអក្សរ */\nh1 { font-size: 2.5em; }\nh2 { font-size: 2em; }\nh3 { font-size: 1.5em; }\np { font-size: 1em; }\n.small-text { font-size: 0.8em; }\n\n/* ទម្ងន់ពុម្ពអក្សរ */\n.light { font-weight: 300; }\n.normal { font-weight: 400; }\n.bold { font-weight: 700; }\n.extra-bold { font-weight: 900; }\n\n/* រចនាពុម្ពអក្សរ */\n.italic { font-style: italic; }\n.oblique { font-style: oblique; }\n\n/* ការតុបតែងពុម្ពអក្សរ */\n.underline { text-decoration: underline; }\n.line-through { text-decoration: line-through; }\n.no-decoration { text-decoration: none; }\n\n/* ការបំលែងអក្សរ */\n.uppercase { text-transform: uppercase; }\n.lowercase { text-transform: lowercase; }\n.capitalize { text-transform: capitalize; }\n\n/* ចម្ងាយរវាងអក្សរ */\n.letter-spacing { letter-spacing: 2px; }\n.word-spacing { word-spacing: 5px; }",
    "tip": "សម្រាប់ភាសាខ្មែរ ត្រូវប្រើ 'Noto Sans Khmer' ឬ 'Khmer OS' ដើម្បីបង្ហាញអក្សរបានត្រឹមត្រូវ"
  },
  {
    "id": 35,
    "category": "CSS",
    "path": "/css/text-styling",
    "title": "មេរៀនទី៥: ការតុបតែងអត្ថបទ CSS (CSS Text Styling)",
    "explanation": "CSS ផ្តល់នូវវិធីជាច្រើនដើម្បីតុបតែងអត្ថបទ។ នេះរួមមានការកំណត់ការតម្រឹម ចម្ងាយបន្ទាត់ ស្រមោល និងលក្ខណៈផ្សេងៗទៀតដែលធ្វើឱ្យអត្ថបទមានភាពទាក់ទាញ។",
    "code": "/* ការតម្រឹមអត្ថបទ */\n.text-left { text-align: left; }\n.text-center { text-align: center; }\n.text-right { text-align: right; }\n.text-justify { text-align: justify; }\n\n/* ចម្ងាយបន្ទាត់ */\n.line-height-normal { line-height: normal; }\n.line-height-1-5 { line-height: 1.5; }\n.line-height-2 { line-height: 2; }\n\n/* ស្រមោលអត្ថបទ */\n.text-shadow {\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.glow-text {\n    text-shadow: 0 0 10px #00ff00;\n}\n\n.multiple-shadow {\n    text-shadow: \n        1px 1px 2px red,\n        0 0 1em blue,\n        0 0 0.2em blue;\n}\n\n/* ការគ្រប់គ្រងអត្ថបទលើស */\n.text-overflow {\n    width: 200px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n/* ការបំបែកពាក្យ */\n.word-break {\n    word-break: break-all;\n}\n\n.word-wrap {\n    word-wrap: break-word;\n}\n\n/* ការកំណត់ចំនួនបន្ទាត់ */\n.line-clamp {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}",
    "tip": "ប្រើ line-height: 1.5-1.6 សម្រាប់ភាសាខ្មែរដើម្បីធ្វើឱ្យអត្ថបទងាយអាន"
  },
  {
    "id": 36,
    "category": "CSS",
    "path": "/css/box-model",
    "title": "មេរៀនទី៦: Box Model CSS",
    "explanation": "Box Model គឺជាគំនិតមូលដ្ឋានក្នុង CSS ដែលពិពណ៌នាអំពីរចនាសម្ព័ន្ធនៃធាតុ HTML។ វារួមមាន content, padding, border, និង margin។ ការយល់ដឹង Box Model សំខាន់សម្រាប់ការធ្វើ layout។",
    "code": "/* Box Model ពេញលេញ */\n.box {\n    /* Content */\n    width: 300px;\n    height: 200px;\n    \n    /* Padding - ចម្ងាយខាងក្នុង */\n    padding: 20px;\n    /* ឬ */\n    padding-top: 10px;\n    padding-right: 15px;\n    padding-bottom: 10px;\n    padding-left: 15px;\n    \n    /* Border - ស៊ុម */\n    border: 2px solid #333;\n    /* ឬ */\n    border-width: 2px;\n    border-style: solid;\n    border-color: #333;\n    \n    /* Margin - ចម្ងាយខាងក្រៅ */\n    margin: 10px;\n    /* ឬ */\n    margin-top: 10px;\n    margin-right: auto; /* កណ្តាលផ្ដេក */\n    margin-bottom: 10px;\n    margin-left: auto; /* កណ្តាលផ្ដេក */\n}\n\n/* Box-sizing property */\n.border-box {\n    box-sizing: border-box; /* width រួមបញ្ចូល padding និង border */\n    width: 300px;\n    padding: 20px;\n    border: 5px solid red;\n}\n\n.content-box {\n    box-sizing: content-box; /* width គិតតែ content */\n    width: 300px;\n    padding: 20px;\n    border: 5px solid blue;\n}\n\n/* Reset box-sizing សម្រាប់ទាំងអស់ */\n* {\n    box-sizing: border-box;\n}",
    "tip": "ប្រើ box-sizing: border-box ដើម្បីធ្វើឱ្យការគណនាទំហំងាយស្រួលជាង"
  },
  {
    "id": 37,
    "category": "CSS",
    "path": "/css/borders",
    "title": "មេរៀនទី៧: ស៊ុម CSS (CSS Borders)",
    "explanation": "ស៊ុម CSS អនុញ្ញាតឱ្យបន្ថែមស៊ុមជុំវិញធាតុ។ អ្នកអាចកំណត់ទម្ងន់ រចនា ពណ៌ និងកាត់ជ្រុងស៊ុម។ ស៊ុមជួយបង្កើតការបំបែកនិងរចនាសម្រស់។",
    "code": "/* ស៊ុមមូលដ្ឋាន */\n.simple-border {\n    border: 2px solid #333;\n}\n\n/* ស៊ុមម្ខាងៗ */\n.individual-borders {\n    border-top: 3px solid red;\n    border-right: 2px dashed blue;\n    border-bottom: 1px dotted green;\n    border-left: 4px double orange;\n}\n\n/* រចនាស៊ុមផ្សេងៗ */\n.border-styles {\n    border-width: 3px;\n    border-color: #666;\n}\n\n.solid { border-style: solid; }\n.dashed { border-style: dashed; }\n.dotted { border-style: dotted; }\n.double { border-style: double; }\n.groove { border-style: groove; }\n.ridge { border-style: ridge; }\n.inset { border-style: inset; }\n.outset { border-style: outset; }\n\n/* ជ្រុងមូល */\n.rounded-corners {\n    border: 2px solid #007bff;\n    border-radius: 10px;\n}\n\n.circle {\n    width: 100px;\n    height: 100px;\n    border: 3px solid #28a745;\n    border-radius: 50%; /* ធ្វើឱ្យជារាងមូល */\n}\n\n/* ជ្រុងមូលម្ខាងៗ */\n.custom-radius {\n    border: 2px solid #dc3545;\n    border-top-left-radius: 20px;\n    border-top-right-radius: 10px;\n    border-bottom-right-radius: 20px;\n    border-bottom-left-radius: 10px;\n}",
    "tip": "ប្រើ border-radius: 50% ដើម្បីធ្វើឱ្យធាតុរាងការ៉េជារាងមូល"
  },
  {
    "id": 38,
    "category": "CSS",
    "path": "/css/margins-padding",
    "title": "មេរៀនទី៨: Margins និង Padding CSS",
    "explanation": "Margins និង Padding គឺជាចម្ងាយដែលបង្កើតកន្លែងទំនេរជុំវិញធាតុ។ Padding គឺចម្ងាយខាងក្នុងធាតុ ហើយ Margin គឺចម្ងាយខាងក្រៅធាតុ។ ការប្រើប្រាស់ត្រឹមត្រូវធ្វើឱ្យ layout ស្អាត។",
    "code": "/* Padding - ចម្ងាយខាងក្នុង */\n.padding-all {\n    padding: 20px; /* ទាំង 4 ខាង */\n}\n\n.padding-vertical-horizontal {\n    padding: 10px 20px; /* ឈរ ផ្ដេក */\n}\n\n.padding-individual {\n    padding: 10px 15px 20px 25px; /* លើ ស្តាំ ក្រោម ឆ្វេង */\n}\n\n.padding-specific {\n    padding-top: 10px;\n    padding-right: 15px;\n    padding-bottom: 20px;\n    padding-left: 25px;\n}\n\n/* Margin - ចម្ងាយខាងក្រៅ */\n.margin-all {\n    margin: 20px;\n}\n\n.margin-auto {\n    margin: 0 auto; /* កណ្តាលផ្ដេក */\n    width: 300px;\n}\n\n.margin-negative {\n    margin-top: -10px; /* Negative margin */\n}\n\n/* Margin Collapse */\n.margin-collapse-1 {\n    margin-bottom: 20px;\n}\n\n.margin-collapse-2 {\n    margin-top: 30px; /* នឹងក្លាយជា 30px តែប៉ុណ្ណោះ */\n}\n\n/* ការកំណត់ចម្ងាយសម្រាប់ layout */\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n}\n\n.section {\n    margin-bottom: 40px;\n}\n\n.card {\n    padding: 20px;\n    margin: 10px;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n}",
    "tip": "ប្រើ margin: 0 auto ដើម្បីដាក់ធាតុនៅកណ្តាល និង padding សម្រាប់ចម្ងាយខាងក្នុង"
  },
  {
    "id": 39,
    "category": "CSS",
    "path": "/css/display",
    "title": "មេរៀនទី៩: Display Property CSS",
    "explanation": "Display property កំណត់របៀបដែលធាតុត្រូវបានបង្ហាញ។ វាមានតម្លៃសំខាន់ៗដូចជា block, inline, inline-block, flex, grid, none។ ការយល់ដឹង display សំខាន់សម្រាប់ការធ្វើ layout។",
    "code": "/* Display values មូលដ្ឋាន */\n.block {\n    display: block;\n    width: 100%;\n    background-color: lightblue;\n    margin: 5px 0;\n}\n\n.inline {\n    display: inline;\n    background-color: lightgreen;\n    padding: 5px;\n    /* width និង height មិនដំណើរការ */\n}\n\n.inline-block {\n    display: inline-block;\n    width: 150px;\n    height: 50px;\n    background-color: lightyellow;\n    margin: 5px;\n    text-align: center;\n    line-height: 50px;\n}\n\n/* លាក់ធាតុ */\n.hidden {\n    display: none; /* លាក់ពេញលេញ */\n}\n\n.invisible {\n    visibility: hidden; /* លាក់ប៉ុន្តែនៅកាន់កន្លែង */\n}\n\n/* Flexbox */\n.flex-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 10px;\n}\n\n.flex-item {\n    flex: 1;\n    padding: 20px;\n    background-color: lightcoral;\n    text-align: center;\n}\n\n/* Grid */\n.grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 10px;\n}\n\n.grid-item {\n    padding: 20px;\n    background-color: lightsteelblue;\n    text-align: center;\n}\n\n/* Table display */\n.table {\n    display: table;\n    width: 100%;\n}\n\n.table-row {\n    display: table-row;\n}\n\n.table-cell {\n    display: table-cell;\n    padding: 10px;\n    border: 1px solid #ccc;\n}",
    "tip": "ប្រើ display: flex សម្រាប់ layout ១ ទិស និង display: grid សម្រាប់ layout ២ ទិស"
  },
  {
    "id": 40,
    "category": "CSS",
    "path": "/css/positioning",
    "title": "មេរៀនទី១០: ការដាក់ទីតាំង CSS (CSS Positioning)",
    "explanation": "CSS Positioning អនុញ្ញាតឱ្យគ្រប់គ្រងទីតាំងធាតុយ៉ាងជាក់លាក់។ មានប្រភេទ positioning ៥ យ៉ាង៖ static, relative, absolute, fixed, និង sticky។",
    "code": "/* Static positioning (default) */\n.static {\n    position: static;\n    /* top, right, bottom, left មិនដំណើរការ */\n}\n\n/* Relative positioning */\n.relative {\n    position: relative;\n    top: 10px;\n    left: 20px;\n    background-color: lightblue;\n}\n\n/* Absolute positioning */\n.absolute {\n    position: absolute;\n    top: 50px;\n    right: 20px;\n    width: 200px;\n    background-color: lightgreen;\n    padding: 10px;\n}\n\n/* Fixed positioning */\n.fixed {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    background-color: lightcoral;\n    padding: 10px;\n    border-radius: 5px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n}\n\n/* Sticky positioning */\n.sticky {\n    position: sticky;\n    top: 0;\n    background-color: lightyellow;\n    padding: 10px;\n    border-bottom: 2px solid #333;\n}\n\n/* Z-index សម្រាប់ layer */\n.layer-1 {\n    position: relative;\n    z-index: 1;\n    background-color: red;\n}\n\n.layer-2 {\n    position: relative;\n    z-index: 2;\n    background-color: blue;\n    margin-top: -20px;\n}\n\n/* Container សម្រាប់ absolute positioning */\n.container {\n    position: relative;\n    width: 300px;\n    height: 200px;\n    border: 2px solid #333;\n}\n\n.absolute-child {\n    position: absolute;\n    bottom: 10px;\n    right: 10px;\n    background-color: orange;\n    padding: 5px;\n}",
    "tip": "ប្រើ position: relative លើ parent element ដើម្បីគ្រប់គ្រង absolute positioning របស់ child"
  },
  {
    "id": 41,
    "category": "CSS",
    "path": "/css/flexbox",
    "title": "មេរៀនទី១១: Flexbox CSS",
    "explanation": "Flexbox គឺជាវិធីសាស្រ្តដ៏មានអានុភាពសម្រាប់ការធ្វើ layout។ វាអនុញ្ញាតឱ្យរៀបចំធាតុក្នុងទិសដៅមួយ (ផ្ដេក ឬ ឈរ) និងគ្រប់គ្រងការតម្រឹម ចម្ងាយ និងទំហំបានយ៉ាងងាយស្រួល។",
    "code": "/* Flex container */\n.flex-container {\n    display: flex;\n    \n    /* ទិសដៅ */\n    flex-direction: row; /* row, row-reverse, column, column-reverse */\n    \n    /* ការរុំ */\n    flex-wrap: wrap; /* nowrap, wrap, wrap-reverse */\n    \n    /* ការតម្រឹមផ្ដេក */\n    justify-content: center; /* flex-start, flex-end, center, space-between, space-around, space-evenly */\n    \n    /* ការតម្រឹមឈរ */\n    align-items: center; /* flex-start, flex-end, center, baseline, stretch */\n    \n    /* ចម្ងាយរវាងធាតុ */\n    gap: 20px;\n    \n    height: 300px;\n    border: 2px solid #333;\n}\n\n/* Flex items */\n.flex-item {\n    /* ការលូតលាស់ */\n    flex-grow: 1; /* ធាតុនឹងលូតលាស់បំពេញកន្លែងទំនេរ */\n    \n    /* ការបង្រួម */\n    flex-shrink: 1; /* ធាតុនឹងបង្រួមពេលកន្លែងតូច */\n    \n    /* ទំហំមូលដ្ឋាន */\n    flex-basis: 200px; /* ទំហំដើម */\n    \n    /* ឬប្រើ shorthand */\n    /* flex: 1 1 200px; */ /* grow shrink basis */\n    \n    background-color: lightblue;\n    padding: 20px;\n    text-align: center;\n    border-radius: 5px;\n}\n\n/* ឧទាហរណ៍ layout ជាក់ស្តែង */\n.navbar {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 20px;\n    background-color: #333;\n    color: white;\n}\n\n.nav-links {\n    display: flex;\n    gap: 20px;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n.card-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    justify-content: center;\n}\n\n.card {\n    flex: 0 1 300px;\n    padding: 20px;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n}",
    "tip": "ប្រើ justify-content សម្រាប់ការតម្រឹមតាម main axis និង align-items សម្រាប់ cross axis"
  },
  {
    "id": 42,
    "category": "CSS",
    "path": "/css/grid",
    "title": "មេរៀនទី១២: CSS Grid",
    "explanation": "CSS Grid គឺជាប្រព័ន្ធ layout ២ ទិសដ៏មានអានុភាព។ វាអនុញ្ញាតឱ្យបង្កើត layout ស្មុគស្មាញដោយកំណត់ rows និង columns។ Grid ល្អសម្រាប់ការធ្វើ layout ទំព័រទាំងមូល។",
    "code": "/* Grid container */\n.grid-container {\n    display: grid;\n    \n    /* កំណត់ columns */\n    grid-template-columns: 200px 1fr 100px; /* fixed flexible fixed */\n    /* ឬ */\n    grid-template-columns: repeat(3, 1fr); /* 3 columns ស្មើគ្នា */\n    \n    /* កំណត់ rows */\n    grid-template-rows: 100px auto 50px;\n    \n    /* ចម្ងាយ */\n    gap: 20px;\n    /* ឬ */\n    row-gap: 20px;\n    column-gap: 10px;\n    \n    height: 100vh;\n}\n\n/* Grid items */\n.grid-item {\n    background-color: lightblue;\n    padding: 20px;\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n/* ការដាក់ទីតាំងជាក់លាក់ */\n.header {\n    grid-column: 1 / -1; /* ពេញទាំង row */\n    background-color: lightcoral;\n}\n\n.sidebar {\n    grid-row: 2 / 4; /* ពី row 2 ដល់ 4 */\n    background-color: lightgreen;\n}\n\n.main-content {\n    grid-column: 2;\n    grid-row: 2;\n    background-color: lightyellow;\n}\n\n/* Grid areas */\n.layout-grid {\n    display: grid;\n    grid-template-areas:\n        \"header header header\"\n        \"sidebar main aside\"\n        \"footer footer footer\";\n    grid-template-columns: 200px 1fr 150px;\n    grid-template-rows: 80px 1fr 60px;\n    gap: 10px;\n    height: 100vh;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n\n/* Responsive grid */\n.responsive-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n}",
    "tip": "ប្រើ grid-template-areas ដើម្បីបង្កើត layout ដែលងាយយល់និងថែទាំ"
  },
  {
    "id": 43,
    "category": "CSS",
    "path": "/css/responsive-design",
    "title": "មេរៀនទី១៣: Responsive Design CSS",
    "explanation": "Responsive Design ធ្វើឱ្យវេបសាយមើលឃើញបានល្អលើឧបករណ៍ទាំងអស់។ វាប្រើ media queries, flexible layouts, និង responsive units ដើម្បីសម្របសម្រួលទៅតាមទំហំអេក្រង់។",
    "code": "/* Mobile-first approach */\n.container {\n    width: 100%;\n    padding: 10px;\n    margin: 0 auto;\n}\n\n/* Tablet */\n@media screen and (min-width: 768px) {\n    .container {\n        max-width: 750px;\n        padding: 20px;\n    }\n    \n    .grid {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        gap: 20px;\n    }\n}\n\n/* Desktop */\n@media screen and (min-width: 1024px) {\n    .container {\n        max-width: 1200px;\n    }\n    \n    .grid {\n        grid-template-columns: repeat(3, 1fr);\n    }\n    \n    .sidebar {\n        display: block;\n    }\n}\n\n/* Large desktop */\n@media screen and (min-width: 1200px) {\n    .container {\n        max-width: 1400px;\n    }\n}\n\n/* Responsive typography */\n.responsive-text {\n    font-size: clamp(1rem, 2.5vw, 2rem);\n}\n\n/* Responsive images */\n.responsive-img {\n    max-width: 100%;\n    height: auto;\n}\n\n/* Flexible units */\n.flexible-box {\n    width: 90vw; /* 90% of viewport width */\n    height: 50vh; /* 50% of viewport height */\n    padding: 2rem; /* relative to root font-size */\n    margin: 1em; /* relative to element font-size */\n}\n\n/* Print styles */\n@media print {\n    .no-print {\n        display: none;\n    }\n    \n    body {\n        font-size: 12pt;\n        color: black;\n        background: white;\n    }\n}",
    "tip": "ចាប់ផ្តើមពី mobile design មុន (mobile-first) បន្ទាប់មកបន្ថែម styles សម្រាប់អេក្រង់ធំ"
  },
  {
    "id": 44,
    "category": "CSS",
    "path": "/css/animations",
    "title": "មេរៀនទី១៤: ចលនា CSS (CSS Animations)",
    "explanation": "CSS Animations អនុញ្ញាតឱ្យបង្កើតចលនាដោយមិនចាំបាច់ JavaScript។ មានពីរប្រភេទ៖ Transitions សម្រាប់ការផ្លាស់ប្តូរសាមញ្ញ និង Keyframe animations សម្រាប់ចលនាស្មុគស្មាញ។",
    "code": "/* CSS Transitions */\n.transition-button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    \n    /* Transition properties */\n    transition: all 0.3s ease;\n    /* ឬ */\n    transition-property: background-color, transform;\n    transition-duration: 0.3s;\n    transition-timing-function: ease-in-out;\n    transition-delay: 0s;\n}\n\n.transition-button:hover {\n    background-color: #0056b3;\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n/* Keyframe Animations */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes bounce {\n    0%, 20%, 50%, 80%, 100% {\n        transform: translateY(0);\n    }\n    40% {\n        transform: translateY(-30px);\n    }\n    60% {\n        transform: translateY(-15px);\n    }\n}\n\n@keyframes rotate {\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n/* ការប្រើប្រាស់ animations */\n.fade-in {\n    animation: fadeIn 1s ease-out;\n}\n\n.bounce {\n    animation: bounce 2s infinite;\n}\n\n.rotate {\n    animation: rotate 2s linear infinite;\n}\n\n/* Animation shorthand */\n.complex-animation {\n    animation: fadeIn 1s ease-out 0.5s both;\n    /* name duration timing-function delay fill-mode */\n}\n\n/* Loading spinner */\n.spinner {\n    width: 40px;\n    height: 40px;\n    border: 4px solid #f3f3f3;\n    border-top: 4px solid #3498db;\n    border-radius: 50%;\n    animation: rotate 1s linear infinite;\n}",
    "tip": "ប្រើ transform properties សម្រាប់ animations ដើម្បីទទួលបានដំណើរការល្អ"
  },
  {
    "id": 45,
    "category": "CSS",
    "path": "/css/pseudo-classes",
    "title": "មេរៀនទី១៥: Pseudo-classes CSS",
    "explanation": "Pseudo-classes អនុញ្ញាតឱ្យ style ធាតុតាមស្ថានភាពពិសេស។ ឧទាហរណ៍ :hover, :focus, :active, :first-child។ ពួកវាមានប្រយោជន៍សម្រាប់ការបង្កើតអន្តរកម្មនិង styling ស្ថានភាពផ្សេងៗ។",
    "code": "/* Link pseudo-classes */\na:link {\n    color: blue;\n    text-decoration: none;\n}\n\na:visited {\n    color: purple;\n}\n\na:hover {\n    color: red;\n    text-decoration: underline;\n}\n\na:active {\n    color: orange;\n}\n\n/* Form pseudo-classes */\ninput:focus {\n    outline: 2px solid #007bff;\n    border-color: #007bff;\n}\n\ninput:valid {\n    border-color: green;\n}\n\ninput:invalid {\n    border-color: red;\n}\n\ninput:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n}\n\n/* Structural pseudo-classes */\nli:first-child {\n    font-weight: bold;\n    color: #007bff;\n}\n\nli:last-child {\n    border-bottom: none;\n}\n\nli:nth-child(odd) {\n    background-color: #f8f9fa;\n}\n\nli:nth-child(even) {\n    background-color: #e9ecef;\n}\n\nli:nth-child(3n) {\n    color: red; /* រាល់ធាតុទី 3, 6, 9... */\n}\n\np:first-of-type {\n    font-size: 1.2em;\n}\n\np:last-of-type {\n    margin-bottom: 0;\n}\n\n/* Other useful pseudo-classes */\n.container:empty {\n    display: none;\n}\n\ninput:checked + label {\n    color: green;\n    font-weight: bold;\n}\n\n.dropdown:hover .dropdown-menu {\n    display: block;\n}\n\n/* Target pseudo-class */\n.section:target {\n    background-color: yellow;\n    padding: 20px;\n}",
    "tip": "ប្រើ :hover និង :focus ដើម្បីបង្កើតបទពិសោធន៍អ្នកប្រើប្រាស់ល្អ"
  },
  {
    "id": 46,
    "category": "CSS",
    "path": "/css/pseudo-elements",
    "title": "មេរៀនទី១៦: Pseudo-elements CSS",
    "explanation": "Pseudo-elements អនុញ្ញាតឱ្យ style ផ្នែកជាក់លាក់នៃធាតុ ឬបង្កើតធាតុថ្មី។ ពួកវាប្រើ :: (double colon)។ Pseudo-elements ទូទៅរួមមាន ::before, ::after, ::first-line, ::first-letter។",
    "code": "/* ::before និង ::after */\n.quote::before {\n    content: '\"';\n    font-size: 2em;\n    color: #007bff;\n    font-weight: bold;\n}\n\n.quote::after {\n    content: '\"';\n    font-size: 2em;\n    color: #007bff;\n    font-weight: bold;\n}\n\n/* បង្កើតធាតុតុបតែង */\n.button::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(45deg, transparent, rgba(255,255,255,0.3), transparent);\n    transform: translateX(-100%);\n    transition: transform 0.5s;\n}\n\n.button:hover::before {\n    transform: translateX(100%);\n}\n\n/* ::first-line និង ::first-letter */\np::first-line {\n    font-weight: bold;\n    color: #333;\n}\n\np::first-letter {\n    font-size: 3em;\n    float: left;\n    line-height: 1;\n    margin-right: 5px;\n    color: #007bff;\n}\n\n/* ::selection */\n::selection {\n    background-color: #007bff;\n    color: white;\n}\n\n/* ::placeholder */\ninput::placeholder {\n    color: #999;\n    font-style: italic;\n}\n\n/* ការបង្កើត tooltip */\n.tooltip {\n    position: relative;\n    cursor: pointer;\n}\n\n.tooltip::after {\n    content: attr(data-tooltip);\n    position: absolute;\n    bottom: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    background-color: #333;\n    color: white;\n    padding: 5px 10px;\n    border-radius: 4px;\n    font-size: 14px;\n    white-space: nowrap;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.3s;\n}\n\n.tooltip:hover::after {\n    opacity: 1;\n    visibility: visible;\n}\n\n/* Counter */\n.counter {\n    counter-reset: item;\n}\n\n.counter li::before {\n    counter-increment: item;\n    content: counter(item) \". \";\n    font-weight: bold;\n    color: #007bff;\n}",
    "tip": "ប្រើ content property ជាមួយ ::before និង ::after ដើម្បីបន្ថែមមាតិកាតុបតែង"
  },
  {
    "id": 47,
    "category": "CSS",
    "path": "/css/variables",
    "title": "មេរៀនទី១៧: CSS Variables (Custom Properties)",
    "explanation": "CSS Variables ឬ Custom Properties អនុញ្ញាតឱ្យរក្សាទុកតម្លៃដែលអាចប្រើបានម្តងហើយម្តងទៀត។ វាធ្វើឱ្យកូដងាយថែទាំ និងអាចផ្លាស់ប្តូរតម្លៃបានយ៉ាងងាយស្រួល។",
    "code": "/* កំណត់ variables នៅ root */\n:root {\n    /* ពណ៌ */\n    --primary-color: #007bff;\n    --secondary-color: #6c757d;\n    --success-color: #28a745;\n    --danger-color: #dc3545;\n    --warning-color: #ffc107;\n    \n    /* ទំហំ */\n    --font-size-small: 0.875rem;\n    --font-size-base: 1rem;\n    --font-size-large: 1.25rem;\n    \n    /* ចម្ងាយ */\n    --spacing-xs: 0.25rem;\n    --spacing-sm: 0.5rem;\n    --spacing-md: 1rem;\n    --spacing-lg: 1.5rem;\n    --spacing-xl: 3rem;\n    \n    /* ស្រមោល */\n    --shadow-sm: 0 1px 3px rgba(0,0,0,0.12);\n    --shadow-md: 0 4px 6px rgba(0,0,0,0.1);\n    --shadow-lg: 0 10px 25px rgba(0,0,0,0.15);\n    \n    /* Border radius */\n    --border-radius: 0.375rem;\n    --border-radius-lg: 0.5rem;\n}\n\n/* ការប្រើប្រាស់ variables */\n.button {\n    background-color: var(--primary-color);\n    color: white;\n    padding: var(--spacing-sm) var(--spacing-md);\n    border: none;\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-base);\n    box-shadow: var(--shadow-sm);\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.button:hover {\n    box-shadow: var(--shadow-md);\n    transform: translateY(-1px);\n}\n\n.button--secondary {\n    background-color: var(--secondary-color);\n}\n\n.button--success {\n    background-color: var(--success-color);\n}\n\n/* Dark mode ដោយប្រើ variables */\n[data-theme=\"dark\"] {\n    --primary-color: #0d6efd;\n    --bg-color: #212529;\n    --text-color: #ffffff;\n}\n\nbody {\n    background-color: var(--bg-color, #ffffff);\n    color: var(--text-color, #000000);\n}\n\n/* Responsive variables */\n@media (min-width: 768px) {\n    :root {\n        --font-size-base: 1.125rem;\n        --spacing-md: 1.5rem;\n    }\n}",
    "tip": "ប្រើ CSS variables ដើម្បីបង្កើត design system ដែលងាយថែទាំ"
  },
  {
    "id": 48,
    "category": "CSS",
    "path": "/css/transforms",
    "title": "មេរៀនទី១៨: CSS Transforms",
    "explanation": "CSS Transforms អនុញ្ញាតឱ្យផ្លាស់ប្តូររូបរាងធាតុដោយមិនប៉ះពាល់ដល់ layout។ អ្នកអាចបង្វិល ពង្រីក បង្រួម និងផ្លាស់ទីធាតុ។ Transforms ត្រូវបានប្រើជាមួយ animations ដើម្បីបង្កើតបែបផែនស្អាត។",
    "code": "/* 2D Transforms */\n.translate {\n    transform: translate(50px, 100px); /* ផ្លាស់ទី x, y */\n    /* ឬ */\n    transform: translateX(50px) translateY(100px);\n}\n\n.scale {\n    transform: scale(1.5); /* ពង្រីក 1.5 ដង */\n    /* ឬ */\n    transform: scaleX(2) scaleY(0.5); /* ពង្រីកផ្ដេក បង្រួមឈរ */\n}\n\n.rotate {\n    transform: rotate(45deg); /* បង្វិល 45 ដឺក្រេ */\n}\n\n.skew {\n    transform: skew(20deg, 10deg); /* ទ្រេត x, y */\n}\n\n/* ការផ្សំ transforms */\n.combined {\n    transform: translate(50px, 50px) rotate(45deg) scale(1.2);\n}\n\n/* Transform origin */\n.rotate-corner {\n    transform: rotate(45deg);\n    transform-origin: top left; /* បង្វិលពីជ្រុងលើឆ្វេង */\n}\n\n.rotate-center {\n    transform: rotate(45deg);\n    transform-origin: center; /* បង្វិលពីកណ្តាល (default) */\n}\n\n/* 3D Transforms */\n.rotate-3d {\n    transform: rotateX(45deg) rotateY(45deg) rotateZ(45deg);\n}\n\n.translate-3d {\n    transform: translate3d(50px, 100px, 20px);\n}\n\n.perspective-container {\n    perspective: 1000px; /* កំណត់ចម្ងាយមើល */\n}\n\n.card-3d {\n    transform-style: preserve-3d;\n    transition: transform 0.5s;\n}\n\n.card-3d:hover {\n    transform: rotateY(180deg);\n}\n\n/* ឧទាហរណ៍ការប្រើប្រាស់ */\n.hover-effect {\n    transition: transform 0.3s ease;\n}\n\n.hover-effect:hover {\n    transform: translateY(-5px) scale(1.05);\n}\n\n.loading-spinner {\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n}\n\n/* Flip card */\n.flip-card {\n    perspective: 1000px;\n    width: 300px;\n    height: 200px;\n}\n\n.flip-card-inner {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n}\n\n.flip-card:hover .flip-card-inner {\n    transform: rotateY(180deg);\n}",
    "tip": "ប្រើ transform ជំនួស position properties សម្រាប់ animations ដើម្បីទទួលបានដំណើរការល្អ"
  },
  {
    "id": 49,
    "category": "CSS",
    "path": "/css/gradients",
    "title": "មេរៀនទី១៩: CSS Gradients",
    "explanation": "CSS Gradients អនុញ្ញាតឱ្យបង្កើតការផ្លាស់ប្តូរពណ៌រលូនរវាងពណ៌ពីរ ឬច្រើន។ មានប្រភេទ gradient ពីរ៖ Linear gradients (ត្រង់) និង Radial gradients (រង្វង់)។",
    "code": "/* Linear Gradients */\n.linear-gradient-basic {\n    background: linear-gradient(to right, red, blue);\n}\n\n.linear-gradient-angle {\n    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n}\n\n.linear-gradient-multiple {\n    background: linear-gradient(\n        to bottom,\n        #ff6b6b 0%,\n        #feca57 50%,\n        #48dbfb 100%\n    );\n}\n\n/* Radial Gradients */\n.radial-gradient-basic {\n    background: radial-gradient(circle, red, blue);\n}\n\n.radial-gradient-ellipse {\n    background: radial-gradient(\n        ellipse at center,\n        #ff6b6b 0%,\n        #4ecdc4 100%\n    );\n}\n\n.radial-gradient-position {\n    background: radial-gradient(\n        circle at top left,\n        #feca57,\n        #ff9ff3\n    );\n}\n\n/* Conic Gradients */\n.conic-gradient {\n    background: conic-gradient(\n        from 0deg,\n        red,\n        orange,\n        yellow,\n        green,\n        blue,\n        indigo,\n        violet,\n        red\n    );\n    border-radius: 50%;\n}\n\n/* Repeating Gradients */\n.repeating-linear {\n    background: repeating-linear-gradient(\n        45deg,\n        #ff6b6b,\n        #ff6b6b 10px,\n        #4ecdc4 10px,\n        #4ecdc4 20px\n    );\n}\n\n.repeating-radial {\n    background: repeating-radial-gradient(\n        circle,\n        #ff6b6b,\n        #ff6b6b 10px,\n        #4ecdc4 10px,\n        #4ecdc4 20px\n    );\n}\n\n/* ឧទាហរណ៍ការប្រើប្រាស់ */\n.gradient-button {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 12px 24px;\n    border: none;\n    border-radius: 25px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.gradient-button:hover {\n    background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}\n\n.gradient-text {\n    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    font-size: 2em;\n    font-weight: bold;\n}\n\n.gradient-border {\n    border: 3px solid;\n    border-image: linear-gradient(45deg, #ff6b6b, #4ecdc4) 1;\n}",
    "tip": "ប្រើ gradients ដើម្បីបង្កើតផ្ទៃខាងក្រោយស្អាត និងបែបផែនទំនើប"
  },
  {
    "id": 50,
    "category": "CSS",
    "path": "/css/shadows",
    "title": "មេរៀនទី២០: CSS Shadows",
    "explanation": "CSS Shadows បន្ថែមស្រមោលដល់ធាតុ ធ្វើឱ្យមានភាពជ្រៅ។ មានពីរប្រភេទ៖ box-shadow សម្រាប់ធាតុ និង text-shadow សម្រាប់អត្ថបទ។ Shadows ជួយបង្កើតបែបផែន Material Design។",
    "code": "/* Box Shadows */\n.shadow-basic {\n    box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.3);\n}\n\n.shadow-inset {\n    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.shadow-multiple {\n    box-shadow: \n        0 1px 3px rgba(0, 0, 0, 0.12),\n        0 1px 2px rgba(0, 0, 0, 0.24);\n}\n\n/* Material Design Shadows */\n.elevation-1 {\n    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\n}\n\n.elevation-2 {\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n}\n\n.elevation-3 {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n}\n\n.elevation-4 {\n    box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n}\n\n.elevation-5 {\n    box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);\n}\n\n/* Text Shadows */\n.text-shadow-basic {\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n}\n\n.text-shadow-glow {\n    text-shadow: 0 0 10px #00ff00;\n}\n\n.text-shadow-3d {\n    text-shadow: \n        1px 1px 0px #ccc,\n        2px 2px 0px #c9c9c9,\n        3px 3px 0px #bbb,\n        4px 4px 0px #b9b9b9,\n        5px 5px 0px #aaa,\n        6px 6px 1px rgba(0,0,0,.1);\n}\n\n/* ឧទាហរណ៍ការប្រើប្រាស់ */\n.card {\n    background: white;\n    border-radius: 8px;\n    padding: 20px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    transition: box-shadow 0.3s ease;\n}\n\n.card:hover {\n    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);\n}\n\n.button-shadow {\n    background: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 5px;\n    box-shadow: 0 2px 5px rgba(0, 123, 255, 0.3);\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.button-shadow:hover {\n    box-shadow: 0 4px 10px rgba(0, 123, 255, 0.4);\n    transform: translateY(-1px);\n}\n\n.button-shadow:active {\n    box-shadow: 0 1px 3px rgba(0, 123, 255, 0.3);\n    transform: translateY(0);\n}",
    "tip": "ប្រើ rgba() colors សម្រាប់ shadows ដើម្បីទទួលបាន transparency ល្អ"
  },
  {
    "id": 51,
    "category": "CSS",
    "path": "/css/filters",
    "title": "មេរៀនទី២១: CSS Filters",
    "explanation": "CSS Filters អនុញ្ញាតឱ្យអនុវត្តបែបផែនក្រាហ្វិកដល់ធាតុ។ អ្នកអាចធ្វើឱ្យរូបភាពមានភាពស្រអាប់ ពណ៌ខុស ឬបែបផែនផ្សេងៗដោយមិនចាំបាច់កែសម្រួលរូបភាពដើម។",
    "code": "/* Filter Functions */\n.blur {\n    filter: blur(5px);\n}\n\n.brightness {\n    filter: brightness(150%); /* ភ្លឺជាង */\n}\n\n.contrast {\n    filter: contrast(200%); /* ពណ៌ចាស់ជាង */\n}\n\n.grayscale {\n    filter: grayscale(100%); /* ស្រអាប់ */\n}\n\n.hue-rotate {\n    filter: hue-rotate(90deg); /* ផ្លាស់ប្តូរពណ៌ */\n}\n\n.invert {\n    filter: invert(100%); /* បញ្ច្រាសពណ៌ */\n}\n\n.opacity {\n    filter: opacity(50%); /* ភាពថ្លា */\n}\n\n.saturate {\n    filter: saturate(200%); /* ពណ៌ចាស់ជាង */\n}\n\n.sepia {\n    filter: sepia(100%); /* បែបផែនចាស់ */\n}\n\n/* ការផ្សំ filters */\n.combined-filters {\n    filter: \n        brightness(110%) \n        contrast(120%) \n        saturate(130%);\n}\n\n/* Drop Shadow */\n.drop-shadow {\n    filter: drop-shadow(5px 5px 10px rgba(0, 0, 0, 0.3));\n}\n\n/* ឧទាហរណ៍ការប្រើប្រាស់ */\n.image-hover {\n    transition: filter 0.3s ease;\n}\n\n.image-hover:hover {\n    filter: brightness(110%) saturate(120%);\n}\n\n.image-gallery img {\n    filter: grayscale(100%);\n    transition: filter 0.3s ease;\n}\n\n.image-gallery img:hover {\n    filter: grayscale(0%);\n}\n\n/* Dark mode filter */\n[data-theme=\"dark\"] img {\n    filter: brightness(80%) contrast(120%);\n}\n\n/* Loading effect */\n.loading {\n    filter: blur(2px) brightness(50%);\n    transition: filter 0.5s ease;\n}\n\n.loading.loaded {\n    filter: blur(0) brightness(100%);\n}\n\n/* Instagram-style filters */\n.filter-vintage {\n    filter: \n        sepia(50%) \n        contrast(120%) \n        brightness(110%) \n        saturate(90%);\n}\n\n.filter-cool {\n    filter: \n        hue-rotate(180deg) \n        saturate(120%) \n        brightness(105%);\n}\n\n.filter-warm {\n    filter: \n        hue-rotate(-30deg) \n        saturate(130%) \n        brightness(110%);\n}",
    "tip": "ប្រើ filters ជាមួយ transitions ដើម្បីបង្កើតបែបផែនអន្តរកម្មស្អាត"
  },
  {
    "id": 52,
    "category": "CSS",
    "path": "/css/clipping-masking",
    "title": "មេរៀនទី២២: CSS Clipping និង Masking",
    "explanation": "CSS Clipping និង Masking អនុញ្ញាតឱ្យបង្ហាញតែផ្នែកជាក់លាក់នៃធាតុ។ clip-path កំណត់រាងកាត់ ហើយ mask ប្រើរូបភាពដើម្បីបង្ហាញ/លាក់ផ្នែកនៃធាតុ។",
    "code": "/* Basic Clipping */\n.clip-circle {\n    clip-path: circle(50%);\n}\n\n.clip-ellipse {\n    clip-path: ellipse(60% 40%);\n}\n\n.clip-polygon {\n    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n}\n\n.clip-inset {\n    clip-path: inset(10px 20px 30px 40px);\n}\n\n/* រាងស្មុគស្មាញ */\n.clip-star {\n    clip-path: polygon(\n        50% 0%, \n        61% 35%, \n        98% 35%, \n        68% 57%, \n        79% 91%, \n        50% 70%, \n        21% 91%, \n        32% 57%, \n        2% 35%, \n        39% 35%\n    );\n}\n\n.clip-hexagon {\n    clip-path: polygon(\n        30% 0%, \n        70% 0%, \n        100% 50%, \n        70% 100%, \n        30% 100%, \n        0% 50%\n    );\n}\n\n.clip-arrow {\n    clip-path: polygon(\n        0% 20%, \n        60% 20%, \n        60% 0%, \n        100% 50%, \n        60% 100%, \n        60% 80%, \n        0% 80%\n    );\n}\n\n/* CSS Masks */\n.mask-gradient {\n    mask: linear-gradient(to right, transparent, black, transparent);\n    -webkit-mask: linear-gradient(to right, transparent, black, transparent);\n}\n\n.mask-radial {\n    mask: radial-gradient(circle at center, black 50%, transparent 70%);\n    -webkit-mask: radial-gradient(circle at center, black 50%, transparent 70%);\n}\n\n.mask-image {\n    mask: url('mask.png');\n    -webkit-mask: url('mask.png');\n    mask-size: cover;\n    -webkit-mask-size: cover;\n}\n\n/* ឧទាហរណ៍ការប្រើប្រាស់ */\n.profile-picture {\n    width: 150px;\n    height: 150px;\n    clip-path: circle(50%);\n    transition: clip-path 0.3s ease;\n}\n\n.profile-picture:hover {\n    clip-path: circle(60%);\n}\n\n.card-clipped {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 20px;\n    clip-path: polygon(0 0, 100% 0, 95% 100%, 0 100%);\n}\n\n.text-reveal {\n    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    mask: linear-gradient(90deg, transparent 0%, black 20%, black 80%, transparent 100%);\n    -webkit-mask: linear-gradient(90deg, transparent 0%, black 20%, black 80%, transparent 100%);\n    animation: reveal 3s infinite;\n}\n\n@keyframes reveal {\n    0% {\n        mask-position: -100% 0;\n        -webkit-mask-position: -100% 0;\n    }\n    100% {\n        mask-position: 100% 0;\n        -webkit-mask-position: 100% 0;\n    }\n}",
    "tip": "ប្រើ clip-path generator tools ដើម្បីបង្កើតរាងស្មុគស្មាញបានងាយស្រួល"
  },
  {
    "id": 53,
    "category": "CSS",
    "path": "/css/modern-layouts",
    "title": "មេរៀនទី២៣: CSS Modern Layouts",
    "explanation": "CSS ទំនើបផ្តល់នូវវិធីសាស្រ្តថ្មីៗសម្រាប់ការធ្វើ layout។ នេះរួមមាន Container Queries, Subgrid, Aspect Ratio, និង CSS Logical Properties ដែលធ្វើឱ្យការធ្វើ layout កាន់តែងាយស្រួល។",
    "code": "/* Container Queries */\n.card-container {\n    container-type: inline-size;\n    container-name: card;\n}\n\n@container card (min-width: 300px) {\n    .card {\n        display: flex;\n        flex-direction: row;\n    }\n    \n    .card-image {\n        flex: 0 0 40%;\n    }\n}\n\n/* Aspect Ratio */\n.video-container {\n    aspect-ratio: 16 / 9;\n    background: #000;\n}\n\n.square {\n    aspect-ratio: 1;\n    background: #007bff;\n}\n\n.golden-ratio {\n    aspect-ratio: 1.618;\n    background: #ffc107;\n}\n\n/* CSS Subgrid */\n.grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 20px;\n}\n\n.subgrid-item {\n    display: grid;\n    grid-template-rows: subgrid;\n    grid-row: span 3;\n}\n\n/* CSS Logical Properties */\n.logical-spacing {\n    margin-block-start: 1rem; /* margin-top */\n    margin-block-end: 1rem;   /* margin-bottom */\n    margin-inline-start: 2rem; /* margin-left */\n    margin-inline-end: 2rem;   /* margin-right */\n    \n    padding-block: 1rem;  /* padding-top + padding-bottom */\n    padding-inline: 2rem; /* padding-left + padding-right */\n    \n    border-block-start: 2px solid red;    /* border-top */\n    border-inline-end: 2px solid blue;    /* border-right */\n}\n\n/* Modern Grid Layouts */\n.auto-fit-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1rem;\n}\n\n.auto-fill-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: 1rem;\n}\n\n/* CSS Grid Areas with Line Names */\n.layout-grid {\n    display: grid;\n    grid-template-columns: \n        [sidebar-start] 250px \n        [sidebar-end main-start] 1fr \n        [main-end aside-start] 200px \n        [aside-end];\n    grid-template-rows: \n        [header-start] 80px \n        [header-end content-start] 1fr \n        [content-end footer-start] 60px \n        [footer-end];\n    gap: 1rem;\n    height: 100vh;\n}\n\n.header {\n    grid-column: sidebar-start / aside-end;\n    grid-row: header-start / header-end;\n}\n\n.sidebar {\n    grid-column: sidebar-start / sidebar-end;\n    grid-row: content-start / content-end;\n}\n\n/* Modern Flexbox Patterns */\n.flex-space-between {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1rem;\n}\n\n.flex-center {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n}\n\n.flex-sidebar {\n    display: flex;\n    gap: 2rem;\n}\n\n.flex-sidebar > aside {\n    flex: 0 0 250px;\n}\n\n.flex-sidebar > main {\n    flex: 1;\n    min-width: 0; /* ការពារ overflow */\n}",
    "tip": "ប្រើ modern CSS features ដើម្បីបង្កើត layouts ដែលមានភាពបត់បែននិងងាយថែទាំ"
  },
  {
    "id": 54,
    "category": "CSS",
    "path": "/css/performance",
    "title": "មេរៀនទី២៤: CSS Performance",
    "explanation": "CSS Performance សំខាន់សម្រាប់ការផ្ទុកទំព័រលឿន។ នេះរួមមានការសរសេរ selectors ប្រកបដោយប្រសិទ្ធភាព ការប្រើ CSS properties ដែលមិនធ្វើឱ្យ reflow/repaint និងការបង្រួម CSS។",
    "code": "/* Efficient Selectors */\n/* ល្អ - ជៀសវាង descendant selectors ស្មុគស្មាញ */\n.nav-item { }\n.button-primary { }\n\n/* មិនល្អ - selectors ស្មុគស្មាញ */\n/* div > ul > li > a.nav-link:hover { } */\n\n/* ប្រើ CSS Custom Properties សម្រាប់ការផ្លាស់ប្តូរលឿន */\n:root {\n    --primary-color: #007bff;\n    --transition-speed: 0.3s;\n}\n\n.button {\n    background-color: var(--primary-color);\n    transition: background-color var(--transition-speed);\n}\n\n/* ប្រើ transform និង opacity សម្រាប់ animations */\n.fade-in {\n    opacity: 0;\n    transform: translateY(20px);\n    transition: opacity 0.3s ease, transform 0.3s ease;\n}\n\n.fade-in.visible {\n    opacity: 1;\n    transform: translateY(0);\n}\n\n/* ជៀសវាង properties ដែលធ្វើឱ្យ layout reflow */\n/* ល្អ */\n.smooth-animation {\n    transform: translateX(100px);\n    transition: transform 0.3s ease;\n}\n\n/* មិនល្អ */\n/* .slow-animation {\n    left: 100px;\n    transition: left 0.3s ease;\n} */\n\n/* ប្រើ will-change សម្រាប់ animations */\n.will-animate {\n    will-change: transform, opacity;\n}\n\n.will-animate.animating {\n    transform: scale(1.1);\n    opacity: 0.8;\n}\n\n/* បន្ទាប់ពី animation បញ្ចប់ */\n.will-animate.animation-complete {\n    will-change: auto;\n}\n\n/* ប្រើ contain property */\n.isolated-component {\n    contain: layout style paint;\n}\n\n/* Critical CSS - ដាក់ក្នុង <head> */\n.above-fold {\n    /* Styles សម្រាប់មាតិកាដែលមើលឃើញដំបូង */\n    font-family: system-ui, sans-serif;\n    line-height: 1.6;\n    color: #333;\n}\n\n/* Non-critical CSS - ផ្ទុកក្រោយ */\n.below-fold {\n    /* Styles សម្រាប់មាតិកាដែលមើលឃើញក្រោយ */\n}\n\n/* ប្រើ CSS Grid និង Flexbox ជំនួស floats */\n.modern-layout {\n    display: grid;\n    grid-template-columns: 1fr 3fr 1fr;\n    gap: 1rem;\n}\n\n/* Minimize repaints */\n.gpu-accelerated {\n    transform: translateZ(0); /* បង្ខំឱ្យប្រើ GPU */\n    backface-visibility: hidden;\n}\n\n/* ប្រើ CSS containment */\n.card {\n    contain: layout style;\n}\n\n.card-list {\n    contain: layout;\n}",
    "tip": "ប្រើ transform និង opacity សម្រាប់ animations ដើម្បីជៀសវាង layout thrashing"
  },
  {
    "id": 55,
    "category": "CSS",
    "path": "/css/best-practices",
    "title": "មេរៀនទី២៥: CSS Best Practices",
    "explanation": "CSS Best Practices ជួយធ្វើឱ្យកូដមានគុណភាពល្អ រក្សាបានងាយ និងដំណើរការបានល្អ។ នេះរួមមានការរៀបចំកូដ ការដាក់ឈ្មោះ class និងការប្រើ methodologies ដូចជា BEM។",
    "code": "/* BEM Methodology */\n/* Block */\n.card { }\n\n/* Element */\n.card__header { }\n.card__body { }\n.card__footer { }\n.card__title { }\n.card__description { }\n\n/* Modifier */\n.card--featured { }\n.card--large { }\n.card__title--highlighted { }\n\n/* ឧទាហរណ៍ BEM ពេញលេញ */\n.button {\n    display: inline-block;\n    padding: 0.75rem 1.5rem;\n    border: none;\n    border-radius: 0.375rem;\n    font-weight: 500;\n    text-decoration: none;\n    cursor: pointer;\n    transition: all 0.2s ease;\n}\n\n.button--primary {\n    background-color: #007bff;\n    color: white;\n}\n\n.button--secondary {\n    background-color: #6c757d;\n    color: white;\n}\n\n.button--large {\n    padding: 1rem 2rem;\n    font-size: 1.125rem;\n}\n\n.button--small {\n    padding: 0.5rem 1rem;\n    font-size: 0.875rem;\n}\n\n/* CSS Organization */\n/* 1. Reset/Normalize */\n* {\n    box-sizing: border-box;\n}\n\n/* 2. Variables */\n:root {\n    --color-primary: #007bff;\n    --color-secondary: #6c757d;\n    --spacing-unit: 1rem;\n    --border-radius: 0.375rem;\n}\n\n/* 3. Base styles */\nbody {\n    font-family: system-ui, sans-serif;\n    line-height: 1.6;\n    color: #333;\n}\n\n/* 4. Layout */\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 var(--spacing-unit);\n}\n\n/* 5. Components */\n.card {\n    background: white;\n    border-radius: var(--border-radius);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    padding: var(--spacing-unit);\n}\n\n/* 6. Utilities */\n.text-center { text-align: center; }\n.text-left { text-align: left; }\n.text-right { text-align: right; }\n\n.mt-1 { margin-top: calc(var(--spacing-unit) * 0.25); }\n.mt-2 { margin-top: calc(var(--spacing-unit) * 0.5); }\n.mt-3 { margin-top: var(--spacing-unit); }\n.mt-4 { margin-top: calc(var(--spacing-unit) * 1.5); }\n\n/* Responsive Design Patterns */\n.responsive-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: var(--spacing-unit);\n}\n\n/* Mobile-first Media Queries */\n@media (min-width: 768px) {\n    .container {\n        padding: 0 calc(var(--spacing-unit) * 2);\n    }\n}\n\n@media (min-width: 1024px) {\n    .container {\n        padding: 0 calc(var(--spacing-unit) * 3);\n    }\n}\n\n/* Accessibility */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n/* Focus styles */\n.button:focus,\ninput:focus,\ntextarea:focus {\n    outline: 2px solid var(--color-primary);\n    outline-offset: 2px;\n}\n\n/* Print styles */\n@media print {\n    .no-print {\n        display: none !important;\n    }\n    \n    body {\n        font-size: 12pt;\n        color: black;\n        background: white;\n    }\n}",
    "tip": "ប្រើ BEM methodology និង CSS custom properties ដើម្បីធ្វើឱ្យកូដងាយថែទាំ"
  },
  {
    "id": 56,
    "category": "JavaScript",
    "path": "/javascript/introduction",
    "title": "មេរៀនទី១: បុព្វហេតុ JavaScript (Introduction to JavaScript)",
    "explanation": "JavaScript គឺជាភាសាកម្មវិធីដែលអនុញ្ញាតឱ្យបង្កើតអន្តរកម្មនៅលើទំព័រវេបសាយ។ វាអាចផ្លាស់ប្តូរមាតិកា HTML, ឆ្លើយតបទៅនឹងការចុចប៊ូតុង, ធ្វើការគណនា និងទំនាក់ទំនងជាមួយ server។",
    "code": "// នេះគឺជា comment មួយបន្ទាត់\n/* នេះគឺជា comment ច្រើនបន្ទាត់\n   អ្នកអាចសរសេរការពន្យល់វែងៗនៅទីនេះ */\n\n// បង្ហាញសារនៅក្នុង console\nconsole.log('សួស្តីពិភពលោក!');\n\n// បង្ហាញ alert box\nalert('នេះគឺជាសារជូនដំណឹង'); \n\n// ការគណនាសាមញ្ញ\nlet លេខទី១ = 10;\nlet លេខទី២ = 5;\nlet លទ្ធផល = លេខទី១ + លេខទី២;\nconsole.log('លទ្ធផល: ' + លទ្ធផល);\n\n// ការប្រើប្រាស់ function\nfunction សួរឈ្មោះ() {\n    let ឈ្មោះ = prompt('តើអ្នកឈ្មោះអ្វី?');\n    if (ឈ្មោះ) {\n        alert('សួស្តី ' + ឈ្មោះ + '!');\n    }\n}\nសួរឈ្មោះ()",
    "tip": "JavaScript អាចដាក់នៅក្នុង HTML ដោយប្រើ <script> tag ឬក្នុងឯកសារ .js ដាច់ដោយឡែក"
  },
  {
    "id": 57,
    "category": "JavaScript",
    "path": "/javascript/variables",
    "title": "មេរៀនទី២: អថេរ JavaScript (JavaScript Variables)",
    "explanation": "អថេរគឺជាកន្លែងរក្សាទុកទិន្នន័យ។ JavaScript មានបីវិធីដើម្បីប្រកាសអថេរ៖ var, let, និង const។ let និង const គឺជាវិធីទំនើបដែលត្រូវបានណែនាំឱ្យប្រើ។",
    "code": "// ការប្រកាសអថេរ\nlet ឈ្មោះ = 'សុខា';\nconst អាយុ = 25;\nvar ទីក្រុង = 'ភ្នំពេញ'; // មិនណែនាំ\n\n// ប្រភេទទិន្នន័យ\nlet អត្ថបទ = 'នេះគឺជាអត្ថបទ';\nlet លេខ = 42;\nlet លេខទសភាគ = 3.14;\nlet ពិត = true;\nlet មិនពិត = false;\nlet គ្មានតម្លៃ = null;\nlet មិនបានកំណត់ = undefined;\n\n// Array (អារេ)\nlet ផ្លែឈើ = ['ប៉ោម', 'ចេក', 'ស្វាយ'];\nlet លេខជាច្រើន = [1, 2, 3, 4, 5];\n\n// Object (វត្ថុ)\nlet មនុស្ស = {\n    ឈ្មោះ: 'ដារា',\n    អាយុ: 30,\n    ទីក្រុង: 'សៀមរាប'\n};\n\n// ការបង្ហាញតម្លៃ\nconsole.log('ឈ្មោះ: ' + ឈ្មោះ);\nconsole.log('អាយុ: ' + អាយុ);\nconsole.log('ផ្លែឈើទីមួយ: ' + ផ្លែឈើ[0]);\nconsole.log('ឈ្មោះមនុស្ស: ' + មនុស្ស.ឈ្មោះ);\n\n// ការផ្លាស់ប្តូរតម្លៃ\nឈ្មោះ = 'វិចិត្រ'; // អាចផ្លាស់ប្តូរបាន\n// អាយុ = 26; // មិនអាចផ្លាស់ប្តូរបានទេ (const)\n\n// ការពិនិត្យប្រភេទទិន្នន័យ\nconsole.log(typeof ឈ្មោះ); // string\nconsole.log(typeof អាយុ); // number\nconsole.log(typeof ពិត); // boolean",
    "tip": "ប្រើ const សម្រាប់តម្លៃដែលមិនផ្លាស់ប្តូរ និង let សម្រាប់តម្លៃដែលអាចផ្លាស់ប្តូរបាន"
  },
  {
    "id": 58,
    "category": "JavaScript",
    "path": "/javascript/operators",
    "title": "មេរៀនទី៣: សញ្ញាប្រមាណវិធី JavaScript (JavaScript Operators)",
    "explanation": "សញ្ញាប្រមាណវិធីត្រូវបានប្រើដើម្បីធ្វើប្រមាណកម្មលើអថេរនិងតម្លៃ។ មានប្រភេទជាច្រើនដូចជា សញ្ញាគណិតវិទ្យា, ការប្រៀបធៀប, ការផ្សំ, និងសញ្ញាតក្ក។",
    "code": "// សញ្ញាគណិតវិទ្យា\nlet a = 10;\nlet b = 3;\n\nconsole.log('បូក: ' + (a + b));        // 13\nconsole.log('ដក: ' + (a - b));         // 7\nconsole.log('គុណ: ' + (a * b));        // 30\nconsole.log('ចែក: ' + (a / b));        // 3.333...\nconsole.log('សេស: ' + (a % b));        // 1\nconsole.log('ស្វ័យគុណ: ' + (a ** b)); // 1000\n\n// សញ្ញាការប្រៀបធៀប\nlet x = 5;\nlet y = '5';\n\nconsole.log(x == y);  // true (ស្មើតម្លៃ)\nconsole.log(x === y); // false (ស្មើតម្លៃនិងប្រភេទ)\nconsole.log(x != y);  // false\nconsole.log(x !== y); // true\nconsole.log(x > 3);   // true\nconsole.log(x < 10);  // true\nconsole.log(x >= 5);  // true\nconsole.log(x <= 4);  // false\n\n// សញ្ញាតក្ក\nlet អាយុ = 20;\nlet មានប័ណ្ណបើកបរ = true;\n\nconsole.log(អាយុ >= 18 && មានប័ណ្ណបើកបរ); // true (AND)\nconsole.log(អាយុ < 18 || មានប័ណ្ណបើកបរ);  // true (OR)\nconsole.log(!មានប័ណ្ណបើកបរ);              // false (NOT)\n\n// សញ្ញាការផ្សំ\nlet ចំនួន = 10;\nចំនួន += 5;  // ចំនួន = ចំនួន + 5 (15)\nចំនួន -= 3;  // ចំនួន = ចំនួន - 3 (12)\nចំនួន *= 2;  // ចំនួន = ចំនួន * 2 (24)\nចំនួន /= 4;  // ចំនួន = ចំនួន / 4 (6)\n\n// សញ្ញាបង្កើន/បង្រួម\nlet i = 0;\ni++;    // i = i + 1 (បង្កើនក្រោយ)\n++i;    // i = i + 1 (បង្កើនមុន)\ni--;    // i = i - 1 (បង្រួមក្រោយ)\n--i;    // i = i - 1 (បង្រួមមុន)\n\n// Ternary operator\nlet ពិន្ទុ = 85;\nlet ផលលទ្ធ = ពិន្ទុ >= 60 ? 'ជាប់' : 'ធ្លាក់';\nconsole.log('ផលលទ្ធ: ' + ផលលទ្ធ);\n\n// Nullish coalescing operator\nlet ឈ្មោះអ្នកប្រើ = null;\nlet ឈ្មោះបង្ហាញ = ឈ្មោះអ្នកប្រើ ?? 'ភ្ញៀវ';\nconsole.log(ឈ្មោះបង្ហាញ); // 'ភ្ញៀវ'",
    "tip": "ប្រើ === ជំនួស == ដើម្បីប្រៀបធៀបទាំងតម្លៃនិងប្រភេទទិន្នន័យ"
  },
  {
    "id": 59,
    "category": "JavaScript",
    "path": "/javascript/conditionals",
    "title": "មេរៀនទី៤: លក្ខខណ្ឌ JavaScript (JavaScript Conditionals)",
    "explanation": "លក្ខខណ្ឌអនុញ្ញាតឱ្យកម្មវិធីធ្វើការសម្រេចចិត្ត។ JavaScript មាន if, else if, else, switch statements ដើម្បីគ្រប់គ្រងលំហូរនៃកម្មវិធី។",
    "code": "// if statement មូលដ្ឋាន\nlet អាយុ = 18;\n\nif (អាយុ >= 18) {\n    console.log('អ្នកគ្រប់អាយុហើយ');\n}\n\n// if-else statement\nlet ពិន្ទុ = 75;\n\nif (ពិន្ទុ >= 60) {\n    console.log('អ្នកជាប់');\n} else {\n    console.log('អ្នកធ្លាក់');\n}\n\n// if-else if-else statement\nlet ពិន្ទុប្រលង = 85;\nlet ចំណាត់ថ្នាក់;\n\nif (ពិន្ទុប្រលង >= 90) {\n    ចំណាត់ថ្នាក់ = 'A';\n} else if (ពិន្ទុប្រលង >= 80) {\n    ចំណាត់ថ្នាក់ = 'B';\n} else if (ពិន្ទុប្រលង >= 70) {\n    ចំណាត់ថ្នាក់ = 'C';\n} else if (ពិន្ទុប្រលង >= 60) {\n    ចំណាត់ថ្នាក់ = 'D';\n} else {\n    ចំណាត់ថ្នាក់ = 'F';\n}\n\nconsole.log('ចំណាត់ថ្នាក់: ' + ចំណាត់ថ្នាក់);\n\n// Switch statement\nlet ថ្ងៃ = 3;\nlet ឈ្មោះថ្ងៃ;\n\nswitch (ថ្ងៃ) {\n    case 1:\n        ឈ្មោះថ្ងៃ = 'ច័ន្ទ';\n        break;\n    case 2:\n        ឈ្មោះថ្ងៃ = 'អង្គារ';\n        break;\n    case 3:\n        ឈ្មោះថ្ងៃ = 'ពុធ';\n        break;\n    case 4:\n        ឈ្មោះថ្ងៃ = 'ព្រហស្បតិ៍';\n        break;\n    case 5:\n        ឈ្មោះថ្ងៃ = 'សុក្រ';\n        break;\n    case 6:\n        ឈ្មោះថ្ងៃ = 'សៅរ៍';\n        break;\n    case 7:\n        ឈ្មោះថ្ងៃ = 'អាទិត្យ';\n        break;\n    default:\n        ឈ្មោះថ្ងៃ = 'មិនស្គាល់';\n}\n\nconsole.log('ថ្ងៃ: ' + ឈ្មោះថ្ងៃ);\n\n// Ternary operator (conditional operator)\nlet អាកាសធាតុ = 'ភ្លៀង';\nlet សកម្មភាព = អាកាសធាតុ === 'ភ្លៀង' ? 'នៅផ្ទះ' : 'ចេញក្រៅ';\nconsole.log('សកម្មភាព: ' + សកម្មភាព);\n\n// Nested conditionals\nlet ម៉ោង = 14;\nlet ថ្ងៃសប្តាហ៍ = 'សៅរ៍';\n\nif (ថ្ងៃសប្តាហ៍ === 'សៅរ៍' || ថ្ងៃសប្តាហ៍ === 'អាទិត្យ') {\n    if (ម៉ោង < 12) {\n        console.log('ពេលព្រឹកនៃថ្ងៃឈប់សម្រាក');\n    } else {\n        console.log('ពេលរសៀលនៃថ្ងៃឈប់សម្រាក');\n    }\n} else {\n    console.log('ថ្ងៃធ្វើការ');\n}",
    "tip": "ប្រើ switch statement ពេលមានជម្រើសច្រើន និង ternary operator សម្រាប់លក្ខខណ្ឌសាមញ្ញ"
  },
  {
    "id": 60,
    "category": "JavaScript",
    "path": "/javascript/loops",
    "title": "មេរៀនទី៥: រង្វិលជុំ JavaScript (JavaScript Loops)",
    "explanation": "រង្វិលជុំអនុញ្ញាតឱ្យដំណើរការកូដម្តងហើយម្តងទៀតរហូតដល់លក្ខខណ្ឌជាក់លាក់ត្រូវបានបំពេញ។ JavaScript មាន for, while, do-while loops និង methods ពិសេសសម្រាប់ arrays។",
    "code": "// For loop មូលដ្ឋាន\nconsole.log('For loop:');\nfor (let i = 1; i <= 5; i++) {\n    console.log('លេខ: ' + i);\n}\n\n// While loop\nconsole.log('\\nWhile loop:');\nlet ចំនួន = 1;\nwhile (ចំនួន <= 5) {\n    console.log('ចំនួន: ' + ចំនួន);\n    ចំនួន++;\n}\n\n// Do-while loop\nconsole.log('\\nDo-while loop:');\nlet j = 1;\ndo {\n    console.log('j: ' + j);\n    j++;\n} while (j <= 3);\n\n// For loop ជាមួយ array\nlet ផ្លែឈើ = ['ប៉ោម', 'ចេក', 'ស្វាយ', 'ក្រូចថ្លុង'];\n\nconsole.log('\\nFor loop ជាមួយ array:');\nfor (let i = 0; i < ផ្លែឈើ.length; i++) {\n    console.log('ផ្លែឈើ ' + (i + 1) + ': ' + ផ្លែឈើ[i]);\n}\n\n// For...of loop (សម្រាប់ arrays)\nconsole.log('\\nFor...of loop:');\nfor (let ផ្លែ of ផ្លែឈើ) {\n    console.log('ផ្លែឈើ: ' + ផ្លែ);\n}\n\n// For...in loop (សម្រាប់ objects)\nlet មនុស្ស = {\n    ឈ្មោះ: 'សុខា',\n    អាយុ: 25,\n    ទីក្រុង: 'ភ្នំពេញ'\n};\n\nconsole.log('\\nFor...in loop:');\nfor (let key in មនុស្ស) {\n    console.log(key + ': ' + មនុស្ស[key]);\n}\n\n// Break និង Continue\nconsole.log('\\nBreak និង Continue:');\nfor (let i = 1; i <= 10; i++) {\n    if (i === 5) {\n        continue; // រំលង 5\n    }\n    if (i === 8) {\n        break; // ឈប់នៅ 8\n    }\n    console.log('i: ' + i);\n}\n\n// Nested loops\nconsole.log('\\nNested loops (តារាងគុណ):');\nfor (let i = 1; i <= 3; i++) {\n    for (let j = 1; j <= 3; j++) {\n        console.log(i + ' x ' + j + ' = ' + (i * j));\n    }\n}\n\n// Array methods (forEach, map, filter)\nlet លេខ = [1, 2, 3, 4, 5];\n\nconsole.log('\\nforEach method:');\nលេខ.forEach(function(លេខ, index) {\n    console.log('Index ' + index + ': ' + លេខ);\n});",
    "tip": "ប្រើ for...of សម្រាប់ arrays និង for...in សម្រាប់ objects"
  },
  {
    "id": 61,
    "category": "JavaScript",
    "path": "/javascript/functions",
    "title": "មេរៀនទី៦: មុខងារ JavaScript (JavaScript Functions)",
    "explanation": "មុខងារគឺជាប្លុកកូដដែលអាចប្រើបានម្តងហើយម្តងទៀត។ វាជួយធ្វើឱ្យកូដមានការរៀបចំល្អ និងងាយស្រួលថែទាំ។ JavaScript មានវិធីជាច្រើនដើម្បីបង្កើតមុខងារ។",
    "code": "// Function declaration\nfunction សួរសុខទុក្ខ(ឈ្មោះ) {\n    return 'សួស្តី ' + ឈ្មោះ + '! តើអ្នកសុខសប្បាយទេ?';\n}\n\n// ការហៅមុខងារ\nlet សារ = សួរសុខទុក្ខ('សុខា');\nconsole.log(សារ);\n\n// Function expression\nlet គុណ = function(a, b) {\n    return a * b;\n};\n\nconsole.log('៥ x ៣ = ' + គុណ(5, 3));\n\n// Arrow function (ES6)\nlet បូក = (a, b) => {\n    return a + b;\n};\n\n// Arrow function (សំណុំរូបខ្លី)\nlet ដក = (a, b) => a - b;\nlet ការ៉េ = x => x * x;\n\nconsole.log('១០ + ៥ = ' + បូក(10, 5));\nconsole.log('១០ - ៥ = ' + ដក(10, 5));\nconsole.log('៥² = ' + ការ៉េ(5));\n\n// Function ជាមួយ default parameters\nfunction បង្កើតសារស្វាគមន៍(ឈ្មោះ = 'ភ្ញៀវ', ពេលវេលា = 'ថ្ងៃ') {\n    return 'សួស្តី' + ពេលវេលា + ' ' + ឈ្មោះ + '!';\n}\n\nconsole.log(បង្កើតសារស្វាគមន៍());\nconsole.log(បង្កើតសារស្វាគមន៍('ដារា', 'ល្ងាច'));\n\n// Rest parameters\nfunction បូកទាំងអស់(...លេខ) {\n    let ផលបូក = 0;\n    for (let ផលបូកS of លេខ) {\n        ផលបូក += លេខ;\n    }\n    return ផលបូក;\n}\n\nconsole.log('បូក: ' + បូកទាំងអស់(1, 2, 3, 4, 5));\n\n// Higher-order functions\nfunction ធ្វើប្រមាណកម្ម(a, b, operation) {\n    return operation(a, b);\n}\n\nlet ផលគុណ = ធ្វើប្រមាណកម្ម(6, 4, (x, y) => x * y);\nconsole.log('៦ x ៤ = ' + ផលគុណ);\n\n// Callback function\nfunction ដំណើរការទិន្នន័យ(ទិន្នន័យ, callback) {\n    console.log('កំពុងដំណើរការ: ' + ទិន្នន័យ);\n    callback(ទិន្នន័យ);\n}\n\nដំណើរការទិន្នន័យ('ព័ត៌មានសំខាន់', function(ទិន្នន័យ) {\n    console.log('បានបញ្ចប់: ' + ទិន្នន័យ);\n});\n\n// IIFE (Immediately Invoked Function Expression)\n(function() {\n    console.log('នេះគឺជា IIFE - ដំណើរការភ្លាមៗ');\n})();\n\n// Recursive function\nfunction factorial(n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log('៥! = ' + factorial(5));",
    "tip": "ប្រើ arrow functions សម្រាប់មុខងារខ្លី និង function declarations សម្រាប់មុខងារស្មុគស្មាញ"
  },
  {
    "id": 62,
    "category": "JavaScript",
    "path": "/javascript/arrays",
    "title": "មេរៀនទី៧: អារេ JavaScript (JavaScript Arrays)",
    "explanation": "អារេគឺជារចនាសម្ព័ន្ធទិន្នន័យដែលអាចរក្សាទុកតម្លៃច្រើននៅក្នុងអថេរតែមួយ។ JavaScript arrays មានភាពបត់បែន និងមាន methods ជាច្រើនសម្រាប់ការគ្រប់គ្រងទិន្នន័យ។",
    "code": "// បង្កើត arrays\nlet ផ្លែឈើ = ['ប៉ោម', 'ចេក', 'ស្វាយ'];\nlet លេខ = [1, 2, 3, 4, 5];\nlet លាយ = ['អត្ថបទ', 42, true, null];\n\n// ការចូលដំណើរការធាតុ\nconsole.log('ផ្លែឈើទីមួយ: ' + ផ្លែឈើ[0]);\nconsole.log('ផ្លែឈើចុងក្រោយ: ' + ផ្លែឈើ[ផ្លែឈើ.length - 1]);\n\n// ការផ្លាស់ប្តូរធាតុ\nផ្លែឈើ[1] = 'ក្រូចថ្លុង';\nconsole.log('បន្ទាប់ពីផ្លាស់ប្តូរ: ' + ផ្លែឈើ);\n\n// Array methods - បន្ថែម/លុបធាតុ\nផ្លែឈើ.push('ទំពាំងបាយជូរ'); // បន្ថែមចុងក្រោយ\nផ្លែឈើ.unshift('ម្នាស់'); // បន្ថែមដើម\nconsole.log('បន្ទាប់ពីបន្ថែម: ' + ផ្លែឈើ);\n\nlet ផ្លែចុងក្រោយ = ផ្លែឈើ.pop(); // លុបចុងក្រោយ\nlet ផ្លែដើម = ផ្លែឈើ.shift(); // លុបដើម\nconsole.log('បានលុប: ' + ផ្លែចុងក្រោយ + ', ' + ផ្លែដើម);\nconsole.log('បន្ទាប់ពីលុប: ' + ផ្លែឈើ);\n\n// Array methods - ស្វែងរក\nlet សិស្ស = ['សុខា', 'ដារា', 'វិចិត្រ', 'សុភា'];\nconsole.log('រកឃើញ \"ដារា\" នៅ index: ' + សិស្ស.indexOf('ដារា'));\nconsole.log('តើមាន \"វិចិត្រ\" ទេ? ' + សិស្ស.includes('វិចិត្រ'));\n\n// Array methods - កាត់ និង ភ្ជាប់\nlet ផ្នែកកាត់ = សិស្ស.slice(1, 3); // កាត់ពី index 1 ដល់ 2\nconsole.log('ផ្នែកកាត់: ' + ផ្នែកកាត់);\n\nlet សិស្សថ្មី = ['មករា', 'កុម្ភៈ'];\nlet សិស្សទាំងអស់ = សិស្ស.concat(សិស្សថ្មី);\nconsole.log('សិស្សទាំងអស់: ' + សិស្សទាំងអស់);\n\n// Array methods - ការបំលែង\nlet ពាក្យ = ['JavaScript', 'គឺ', 'ភាសា', 'កម្មវិធី'];\nlet ប្រយោគ = ពាក្យ.join(' ');\nconsole.log('ប្រយោគ: ' + ប្រយោគ);\n\n// Array methods - ការរៀបចំ\nlet លេខមិនរៀប = [3, 1, 4, 1, 5, 9, 2, 6];\nលេខមិនរៀប.sort((a, b) => a - b); // រៀបតាមលំដាប់ឡើង\nconsole.log('លេខបានរៀប: ' + លេខមិនរៀប);\n\n// Array methods - forEach, map, filter\nlet ពិន្ទុ = [85, 92, 78, 96, 88];\n\n// forEach - ធ្វើអ្វីមួយជាមួយធាតុនីមួយៗ\nពិន្ទុ.forEach((ពិន្ទុ, index) => {\n    console.log(`សិស្ស ${index + 1}: ${ពិន្ទុ} ពិន្ទុ`);\n});\n\n// map - បង្កើត array ថ្មីដោយបំលែងធាតុ\nlet ពិន្ទុភាគរយ = ពិន្ទុ.map(ពិន្ទុ => ពិន្ទុ + '%');\nconsole.log('ពិន្ទុភាគរយ: ' + ពិន្ទុភាគរយ);\n\n// filter - ត្រងធាតុតាមលក្ខខណ្ឌ\nlet ពិន្ទុល្អ = ពិន្ទុ.filter(ពិន្ទុ => ពិន្ទុ >= 90);\nconsole.log('ពិន្ទុល្អ (>=90): ' + ពិន្ទុល្អ);\n\n// reduce - បង្រួបធាតុទាំងអស់ជាតម្លៃតែមួយ\nlet ពិន្ទុសរុប = ពិន្ទុ.reduce((សរុប, ពិន្ទុ) => សរុប + ពិន្ទុ, 0);\nlet ពិន្ទុមធ្យម = ពិន្ទុសរុប / ពិន្ទុ.length;\nconsole.log('ពិន្ទុមធ្យម: ' + ពិន្ទុមធ្យម.toFixed(2));",
    "tip": "ប្រើ array methods ដូចជា map, filter, reduce ជំនួស for loops ដើម្បីកូដកាន់តែស្អាត"
  },
  {
    "id": 63,
    "category": "JavaScript",
    "path": "/javascript/objects",
    "title": "មេរៀនទី៨: វត្ថុ JavaScript (JavaScript Objects)",
    "explanation": "វត្ថុគឺជារចនាសម្ព័ន្ធទិន្នន័យដែលរក្សាទុកទិន្នន័យជា key-value pairs។ វត្ថុអនុញ្ញាតឱ្យរៀបចំទិន្នន័យពាក់ព័ន្ធគ្នាជាមួយគ្នា និងបង្កើត methods។",
    "code": "// បង្កើតវត្ថុ\nlet មនុស្ស = {\n    ឈ្មោះ: 'សុខា',\n    អាយុ: 25,\n    ទីក្រុង: 'ភ្នំពេញ',\n    មុខរបរ: 'អ្នកអភិវឌ្ឍន៍',\n    \n    // Methods\n    សួរសុខទុក្ខ: function() {\n        return 'សួស្តី! ខ្ញុំឈ្មោះ ' + this.ឈ្មោះ;\n    },\n    \n    បង្ហាញព័ត៌មាន: function() {\n        return `ឈ្មោះ: ${this.ឈ្មោះ}, អាយុ: ${this.អាយុ}, ទីក្រុង: ${this.ទីក្រុង}`;\n    }\n};\n\n// ការចូលដំណើរការ properties\nconsole.log('ឈ្មោះ: ' + មនុស្ស.ឈ្មោះ);\nconsole.log('អាយុ: ' + មនុស្ស['អាយុ']);\n\n// ការហៅ methods\nconsole.log(មនុស្ស.សួរសុខទុក្ខ());\nconsole.log(មនុស្ស.បង្ហាញព័ត៌មាន());\n\n// បន្ថែម properties ថ្មី\nមនុស្ស.ទូរស័ព្ទ = '012-345-678';\nមនុស្ស['អ៊ីមែល'] = 'sokha@example.com';\n\n// លុប properties\ndelete មនុស្ស.ទីក្រុង;\n\n// ពិនិត្យមើល properties\nconsole.log('មាន \"ឈ្មោះ\"? ' + ('ឈ្មោះ' in មនុស្ស));\nconsole.log('មាន \"ទីក្រុង\"? ' + ('ទីក្រុង' in មនុស្ស));\n\n// Object methods\nlet រថយន្ត = {\n    ម៉ាក: 'Toyota',\n    ម៉ូដែល: 'Camry',\n    ឆ្នាំ: 2023,\n    ពណ៌: 'ស',\n    \n    ចាប់ផ្តើម: function() {\n        return 'រថយន្ត ' + this.ម៉ាក + ' កំពុងចាប់ផ្តើម...';\n    },\n    \n    បញ្ឈប់: function() {\n        return 'រថយន្តបានបញ្ឈប់';\n    }\n};\n\nconsole.log(រថយន្ត.ចាប់ផ្តើម());\n\n// Object.keys(), Object.values(), Object.entries()\nconsole.log('Keys: ' + Object.keys(រថយន្ត));\nconsole.log('Values: ' + Object.values(រថយន្ត));\n\nObject.entries(រថយន្ត).forEach(([key, value]) => {\n    if (typeof value !== 'function') {\n        console.log(key + ': ' + value);\n    }\n});\n\n// Object destructuring\nlet {ឈ្មោះ, អាយុ, មុខរបរ} = មនុស្ស;\nconsole.log(`${ឈ្មោះ} អាយុ ${អាយុ} ឆ្នាំ ធ្វើការជា ${មុខរបរ}`);\n\n// Nested objects\nlet សិស្ស = {\n    ឈ្មោះ: 'ដារា',\n    អាយុ: 20,\n    អាសយដ្ឋាន: {\n        ផ្លូវ: 'ផ្លូវ២៧១',\n        សង្កាត់: 'ទួលទំពូង',\n        ខណ្ឌ: 'ចំការមន',\n        ទីក្រុង: 'ភ្នំពេញ'\n    },\n    ពិន្ទុ: {\n        គណិតវិទ្យា: 85,\n        រូបវិទ្យា: 92,\n        គីមីវិទ្យា: 78\n    }\n};\n\nconsole.log('ទីក្រុង: ' + សិស្ស.អាសយដ្ឋាន.ទីក្រុង);\nconsole.log('ពិន្ទុគណិតវិទ្យា: ' + សិស្ស.ពិន្ទុ.គណិតវិទ្យា);\n\n// Object.assign() - ចម្លងវត្ថុ\nlet សិស្សថ្មី = Object.assign({}, សិស្ស);\nសិស្សថ្មី.ឈ្មោះ = 'វិចិត្រ';\nconsole.log('សិស្សដើម: ' + សិស្ស.ឈ្មោះ);\nconsole.log('សិស្សថ្មី: ' + សិស្សថ្មី.ឈ្មោះ);",
    "tip": "ប្រើ dot notation (obj.property) សម្រាប់ property names ធម្មតា និង bracket notation (obj['property']) សម្រាប់ dynamic property names"
  },
  {
    "id": 64,
    "category": "JavaScript",
    "path": "/javascript/dom-manipulation",
    "title": "មេរៀនទី៩: ការគ្រប់គ្រង DOM (DOM Manipulation)",
    "explanation": "DOM (Document Object Model) គឺជាការតំណាងនៃទំព័រ HTML ក្នុងទម្រង់វត្ថុ។ JavaScript អាចប្រើ DOM ដើម្បីផ្លាស់ប្តូរមាតិកា រចនាសម្ព័ន្ធ និងរូបរាងនៃទំព័រ។",
    "code": "// ការជ្រើសរើសធាតុ\n// តាម ID\nlet ចំណងជើង = document.getElementById('title');\n\n// តាម class\nlet ប៊ូតុង = document.getElementsByClassName('button');\n\n// តាម tag name\nlet កថាខណ្ឌ = document.getElementsByTagName('p');\n\n// តាម CSS selector\nlet ធាតុដំបូង = document.querySelector('.my-class');\nlet ធាតុទាំងអស់ = document.querySelectorAll('.item');\n\n// ការផ្លាស់ប្តូរមាតិកា\nif (ចំណងជើង) {\n    ចំណងជើង.innerHTML = 'ចំណងជើងថ្មី';\n    ចំណងជើង.textContent = 'អត្ថបទសុទ្ធ';\n}\n\n// ការផ្លាស់ប្តូរ attributes\nlet រូបភាព = document.querySelector('img');\nif (រូបភាព) {\n    រូបភាព.src = 'new-image.jpg';\n    រូបភាព.alt = 'រូបភាពថ្មី';\n    រូបភាព.setAttribute('title', 'ចំណងជើងរូបភាព');\n}\n\n// ការផ្លាស់ប្តូរ CSS styles\nlet ប្រអប់ = document.querySelector('.box');\nif (ប្រអប់) {\n    ប្រអប់.style.backgroundColor = 'blue';\n    ប្រអប់.style.color = 'white';\n    ប្រអប់.style.padding = '20px';\n    ប្រអប់.style.borderRadius = '10px';\n}\n\n// ការគ្រប់គ្រង CSS classes\nlet ធាតុ = document.querySelector('.my-element');\nif (ធាតុ) {\n    ធាតុ.classList.add('new-class');\n    ធាតុ.classList.remove('old-class');\n    ធាតុ.classList.toggle('active');\n    \n    if (ធាតុ.classList.contains('active')) {\n        console.log('ធាតុមាន class active');\n    }\n}\n\n// ការបង្កើតធាតុថ្មី\nlet កថាខណ្ឌថ្មី = document.createElement('p');\nកថាខណ្ឌថ្មី.textContent = 'នេះគឺជាកថាខណ្ឌថ្មី';\nកថាខណ្ឌថ្មី.className = 'new-paragraph';\n\n// ការបន្ថែមធាតុទៅ DOM\nlet container = document.querySelector('.container');\nif (container) {\n    container.appendChild(កថាខណ្ឌថ្មី);\n}\n\n// ការបន្ថែមធាតុនៅទីតាំងជាក់លាក់\nlet បញ្ជី = document.querySelector('ul');\nlet ធាតុបញ្ជីថ្មី = document.createElement('li');\nធាតុបញ្ជីថ្មី.textContent = 'ធាតុថ្មី';\n\nif (បញ្ជី && បញ្ជី.children.length > 0) {\n    បញ្ជី.insertBefore(ធាតុបញ្ជីថ្មី, បញ្ជី.children[1]);\n}\n\n// ការលុបធាតុ\nlet ធាតុត្រូវលុប = document.querySelector('.to-delete');\nif (ធាតុត្រូវលុប) {\n    ធាតុត្រូវលុប.remove();\n}\n\n// Event listeners\nlet ប៊ូតុងចុច = document.querySelector('#click-button');\nif (ប៊ូតុងចុច) {\n    ប៊ូតុងចុច.addEventListener('click', function() {\n        alert('ប៊ូតុងត្រូវបានចុច!');\n    });\n}\n\n// ការគ្រប់គ្រង form\nlet ទម្រង់ = document.querySelector('#my-form');\nif (ទម្រង់) {\n    ទម្រង់.addEventListener('submit', function(event) {\n        event.preventDefault(); // ការពារការ submit ធម្មតា\n        \n        let ឈ្មោះ = document.querySelector('#name').value;\n        let អ៊ីមែល = document.querySelector('#email').value;\n        \n        if (ឈ្មោះ && អ៊ីមែល) {\n            console.log('ឈ្មោះ: ' + ឈ្មោះ);\n            console.log('អ៊ីមែល: ' + អ៊ីមែល);\n        } else {\n            alert('សូមបំពេញព័ត៌មានទាំងអស់');\n        }\n    });\n}\n\n// ការបង្កើតធាតុស្មុគស្មាញ\nfunction បង្កើតកាត(ចំណងជើង, មាតិកា) {\n    let កាត = document.createElement('div');\n    កាត.className = 'card';\n    \n    let ចំណងជើងកាត = document.createElement('h3');\n    ចំណងជើងកាត.textContent = ចំណងជើង;\n    \n    let មាតិកាកាត = document.createElement('p');\n    មាតិកាកាត.textContent = មាតិកា;\n    \n    កាត.appendChild(ចំណងជើងកាត);\n    កាត.appendChild(មាតិកាកាត);\n    \n    return កាត;\n}\n\n// ប្រើមុខងារបង្កើតកាត\nlet កាតថ្មី = បង្កើតកាត('ចំណងជើងកាត', 'នេះគឺជាមាតិកានៃកាត');\nif (container) {\n    container.appendChild(កាតថ្មី);\n}",
    "tip": "ប្រើ querySelector() និង querySelectorAll() ដើម្បីជ្រើសរើសធាតុដោយប្រើ CSS selectors"
  },
  {
    "id": 65,
    "category": "JavaScript",
    "path": "/javascript/events",
    "title": "មេរៀនទី១០: ព្រឹត្តិការណ៍ JavaScript (JavaScript Events)",
    "explanation": "ព្រឹត្តិការណ៍គឺជាសកម្មភាពដែលកើតឡើងនៅក្នុងទំព័រ ដូចជាការចុចប៊ូតុង ការវាយបញ្ចូលអត្ថបទ ការផ្ទុកទំព័រ។ JavaScript អាចស្តាប់និងឆ្លើយតបទៅនឹងព្រឹត្តិការណ៍ទាំងនេះ។",
    "code": "// Mouse Events\nlet ប៊ូតុង = document.querySelector('#my-button');\n\nif (ប៊ូតុង) {\n    // Click event\n    ប៊ូតុង.addEventListener('click', function(event) {\n        console.log('ប៊ូតុងត្រូវបានចុច!');\n        console.log('ទីតាំងចុច: X=' + event.clientX + ', Y=' + event.clientY);\n    });\n    \n    // Mouse hover events\n    ប៊ូតុង.addEventListener('mouseenter', function() {\n        ប៊ូតុង.style.backgroundColor = 'lightblue';\n    });\n    \n    ប៊ូតុង.addEventListener('mouseleave', function() {\n        ប៊ូតុង.style.backgroundColor = '';\n    });\n    \n    // Double click\n    ប៊ូតុង.addEventListener('dblclick', function() {\n        alert('ចុចពីរដង!');\n    });\n}\n\n// Keyboard Events\nlet ប្រអប់អត្ថបទ = document.querySelector('#text-input');\n\nif (ប្រអប់អត្ថបទ) {\n    // Key press events\n    ប្រអប់អត្ថបទ.addEventListener('keydown', function(event) {\n        console.log('ចុចគ្រាប់ចុច: ' + event.key);\n        \n        // ពិនិត្យគ្រាប់ចុចពិសេស\n        if (event.key === 'Enter') {\n            console.log('ចុច Enter!');\n        }\n        \n        if (event.ctrlKey && event.key === 's') {\n            event.preventDefault();\n            console.log('Ctrl+S ត្រូវបានចុច!');\n        }\n    });\n    \n    // Input event (ពេលមាតិកាផ្លាស់ប្តូរ)\n    ប្រអប់អត្ថបទ.addEventListener('input', function(event) {\n        let ចំនួនតួអក្សរ = event.target.value.length;\n        console.log('ចំនួនតួអក្សរ: ' + ចំនួនតួអក្សរ);\n    });\n    \n    // Focus events\n    ប្រអប់អត្ថបទ.addEventListener('focus', function() {\n        this.style.borderColor = 'blue';\n    });\n    \n    ប្រអប់អត្ថបទ.addEventListener('blur', function() {\n        this.style.borderColor = '';\n    });\n}\n\n// Form Events\nlet ទម្រង់ = document.querySelector('#contact-form');\n\nif (ទម្រង់) {\n    ទម្រង់.addEventListener('submit', function(event) {\n        event.preventDefault(); // ការពារការ submit ធម្មតា\n        \n        let formData = new FormData(ទម្រង់);\n        console.log('ទិន្នន័យទម្រង់:');\n        \n        for (let [key, value] of formData.entries()) {\n            console.log(key + ': ' + value);\n        }\n    });\n    \n    // Change event សម្រាប់ select\n    let ជម្រើស = ទម្រង់.querySelector('select');\n    if (ជម្រើស) {\n        ជម្រើស.addEventListener('change', function() {\n            console.log('បានជ្រើសរើស: ' + this.value);\n        });\n    }\n}\n\n// Window Events\n// Page load\nwindow.addEventListener('load', function() {\n    console.log('ទំព័របានផ្ទុកពេញលេញ');\n});\n\n// DOM content loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('DOM បានផ្ទុករួចរាល់');\n});\n\n// Window resize\nwindow.addEventListener('resize', function() {\n    console.log('ទំហំបង្អួច: ' + window.innerWidth + 'x' + window.innerHeight);\n});\n\n// Scroll event\nwindow.addEventListener('scroll', function() {\n    let scrollTop = window.pageYOffset;\n    console.log('ទីតាំង scroll: ' + scrollTop);\n});\n\n// Custom Events\nfunction បង្កើតព្រឹត្តិការណ៍ផ្ទាល់ខ្លួន() {\n    let ព្រឹត្តិការណ៍ផ្ទាល់ខ្លួន = new CustomEvent('myCustomEvent', {\n        detail: {\n            សារ: 'នេះគឺជាព្រឹត្តិការណ៍ផ្ទាល់ខ្លួន',\n            ពេលវេលា: new Date()\n        }\n    });\n    \n    document.dispatchEvent(ព្រឹត្តិការណ៍ផ្ទាល់ខ្លួន);\n}\n\n// ស្តាប់ព្រឹត្តិការណ៍ផ្ទាល់ខ្លួន\ndocument.addEventListener('myCustomEvent', function(event) {\n    console.log('ព្រឹត្តិការណ៍ផ្ទាល់ខ្លួន:', event.detail);\n});\n\n// Event delegation\nlet បញ្ជី = document.querySelector('#dynamic-list');\n\nif (បញ្ជី) {\n    បញ្ជី.addEventListener('click', function(event) {\n        if (event.target.tagName === 'LI') {\n            console.log('ចុចលើធាតុបញ្ជី: ' + event.target.textContent);\n        }\n    });\n}\n\n// ការលុប event listener\nfunction ចុចតែម្តង() {\n    console.log('ចុចតែម្តងប៉ុណ្ណោះ');\n    // លុប event listener បន្ទាប់ពីចុចម្តង\n    this.removeEventListener('click', ចុចតែម្តង);\n}\n\nlet ប៊ូតុងម្តង = document.querySelector('#once-button');\nif (ប៊ូតុងម្តង) {\n    ប៊ូតុងម្តង.addEventListener('click', ចុចតែម្តង);\n}",
    "tip": "ប្រើ event.preventDefault() ដើម្បីការពារអាកប្បកិរិយាធម្មតានៃធាតុ"
  },
  {
    "id": 66,
    "category": "JavaScript",
    "path": "/javascript/async-programming",
    "title": "មេរៀនទី១១: Asynchronous Programming",
    "explanation": "Asynchronous Programming អនុញ្ញាតឱ្យកម្មវិធីធ្វើការច្រើនយ៉ាងក្នុងពេលដំណាលគ្នា។ JavaScript ប្រើ Callbacks, Promises, និង Async/Await ដើម្បីគ្រប់គ្រងកូដ asynchronous។",
    "code": "// Callbacks\nfunction ទាញយកទិន្នន័យ(callback) {\n    console.log('កំពុងទាញយកទិន្នន័យ...');\n    \n    setTimeout(() => {\n        let ទិន្នន័យ = { ឈ្មោះ: 'សុខា', អាយុ: 25 };\n        callback(ទិន្នន័យ);\n    }, 2000);\n}\n\n// ការប្រើ callback\nទាញយកទិន្នន័យ(function(ទិន្នន័យ) {\n    console.log('បានទទួលទិន្នន័យ:', ទិន្នន័យ);\n});\n\n// Promises\nfunction ទាញយកទិន្នន័យជាមួយ Promise() {\n    return new Promise((resolve, reject) => {\n        console.log('កំពុងទាញយកទិន្នន័យជាមួយ Promise...');\n        \n        setTimeout(() => {\n            let ជោគជ័យ = Math.random() > 0.3; // 70% ឱកាសជោគជ័យ\n            \n            if (ជោគជ័យ) {\n                let ទិន្នន័យ = { ឈ្មោះ: 'ដារា', អាយុ: 30 };\n                resolve(ទិន្នន័យ);\n            } else {\n                reject(new Error('មិនអាចទាញយកទិន្នន័យបានទេ'));\n            }\n        }, 1500);\n    });\n}\n\n// ការប្រើ Promise ជាមួយ .then() និង .catch()\nទាញយកទិន្នន័យជាមួយ Promise()\n    .then(ទិន្នន័យ => {\n        console.log('Promise ជោគជ័យ:', ទិន្នន័យ);\n        return ទិន្នន័យ.ឈ្មោះ;\n    })\n    .then(ឈ្មោះ => {\n        console.log('ឈ្មោះ:', ឈ្មោះ);\n    })\n    .catch(កំហុស => {\n        console.error('Promise មានកំហុស:', កំហុស.message);\n    })\n    .finally(() => {\n        console.log('Promise បានបញ្ចប់');\n    });\n\n// Async/Await\nasync function ទាញយកទិន្នន័យជាមួយ AsyncAwait() {\n    try {\n        console.log('ចាប់ផ្តើម async function...');\n        \n        let ទិន្នន័យ = await ទាញយកទិន្នន័យជាមួយ Promise();\n        console.log('Async/Await ជោគជ័យ:', ទិន្នន័យ);\n        \n        return ទិន្នន័យ;\n    } catch (កំហុស) {\n        console.error('Async/Await មានកំហុស:', កំហុស.message);\n        throw កំហុស;\n    }\n}\n\n// ការហៅ async function\nទាញយកទិន្នន័យជាមួយ AsyncAwait();\n\n// Promise.all() - រង់ចាំ promises ទាំងអស់\nasync function ទាញយកទិន្នន័យច្រើន() {\n    let promise1 = new Promise(resolve => setTimeout(() => resolve('ទិន្នន័យ 1'), 1000));\n    let promise2 = new Promise(resolve => setTimeout(() => resolve('ទិន្នន័យ 2'), 1500));\n    let promise3 = new Promise(resolve => setTimeout(() => resolve('ទិន្នន័យ 3'), 800));\n    \n    try {\n        console.log('កំពុងទាញយកទិន្នន័យច្រើន...');\n        let លទ្ធផល = await Promise.all([promise1, promise2, promise3]);\n        console.log('ទិន្នន័យទាំងអស់:', លទ្ធផល);\n    } catch (កំហុស) {\n        console.error('មានកំហុសក្នុងការទាញយកទិន្នន័យ:', កំហុស);\n    }\n}\n\nទាញយកទិន្នន័យច្រើន();\n\n// Promise.race() - យក promise ដែលបញ្ចប់មុនគេ\nasync function ប្រណាំងទាញយកទិន្នន័យ() {\n    let promise1 = new Promise(resolve => setTimeout(() => resolve('លឿន'), 1000));\n    let promise2 = new Promise(resolve => setTimeout(() => resolve('យឺត'), 2000));\n    \n    try {\n        let លទ្ធផល = await Promise.race([promise1, promise2]);\n        console.log('Promise ដែលបញ្ចប់មុនគេ:', លទ្ធផល);\n    } catch (កំហុស) {\n        console.error('កំហុសក្នុងការប្រណាំង:', កំហុស);\n    }\n}\n\nប្រណាំងទាញយកទិន្នន័យ();\n\n// Fetch API - ឧទាហរណ៍ការទាញយកទិន្នន័យពី API\nasync function ទាញយកទិន្នន័យពី API() {\n    try {\n        console.log('កំពុងទាញយកទិន្នន័យពី API...');\n        \n        // ឧទាហរណ៍ URL (នេះអាចមិនដំណើរការក្នុង demo)\n        let response = await fetch('https://jsonplaceholder.typicode.com/users/1');\n        \n        if (!response.ok) {\n            throw new Error('HTTP error! status: ' + response.status);\n        }\n        \n        let ទិន្នន័យ = await response.json();\n        console.log('ទិន្នន័យពី API:', ទិន្នន័យ);\n        \n        return ទិន្នន័យ;\n    } catch (កំហុស) {\n        console.error('មិនអាចទាញយកទិន្នន័យពី API:', កំហុស.message);\n    }\n}\n\n// ការប្រើ setTimeout និង setInterval\nfunction ការពន្យារពេល() {\n    console.log('នឹងបង្ហាញសារនេះបន្ទាប់ពី 3 វិនាទី');\n    \n    setTimeout(() => {\n        console.log('3 វិនាទីបានកន្លងផុតហើយ!');\n    }, 3000);\n}\n\nការពន្យារពេល();\n\n// Interval\nlet ចំនួនរាប់ = 0;\nlet interval = setInterval(() => {\n    ចំនួនរាប់++;\n    console.log('រាប់: ' + ចំនួនរាប់);\n    \n    if (ចំនួនរាប់ >= 5) {\n        clearInterval(interval);\n        console.log('បញ្ឈប់ការរាប់');\n    }\n}, 1000);",
    "tip": "ប្រើ async/await ជំនួស .then() chains ដើម្បីធ្វើឱ្យកូដងាយអាន"
  },
  {
    "id": 67,
    "category": "JavaScript",
    "path": "/javascript/error-handling",
    "title": "មេរៀនទី១២: ការគ្រប់គ្រងកំហុស (Error Handling)",
    "explanation": "ការគ្រប់គ្រងកំហុសជួយធ្វើឱ្យកម្មវិធីមានស្ថេរភាព។ JavaScript ប្រើ try-catch-finally blocks, throw statements, និង Error objects ដើម្បីគ្រប់គ្រងកំហុស។",
    "code": "// Try-Catch មូលដ្ឋាន\nfunction ចែកលេខ(a, b) {\n    try {\n        if (b === 0) {\n            throw new Error('មិនអាចចែកដោយសូន្យបានទេ');\n        }\n        \n        let លទ្ធផល = a / b;\n        console.log(`${a} ÷ ${b} = ${លទ្ធផល}`);\n        return លទ្ធផល;\n    } catch (កំហុស) {\n        console.error('កំហុសក្នុងការចែក:', កំហុស.message);\n        return null;\n    } finally {\n        console.log('ការចែកបានបញ្ចប់');\n    }\n}\n\n// ការប្រើមុខងារ\nចែកលេខ(10, 2);  // ធម្មតា\nចែកលេខ(10, 0);  // កំហុស\n\n// ប្រភេទកំហុសផ្សេងៗ\nfunction បង្ហាញប្រភេទកំហុស() {\n    try {\n        // SyntaxError (នេះនឹងកើតឡើងពេល parse)\n        // eval('let x = ;');\n        \n        // ReferenceError\n        console.log(អថេរមិនមាន);\n        \n    } catch (កំហុស) {\n        console.log('ប្រភេទកំហុស:', កំហុស.name);\n        console.log('សារកំហុស:', កំហុស.message);\n        console.log('Stack trace:', កំហុស.stack);\n    }\n}\n\nបង្ហាញប្រភេទកំហុស();\n\n// Custom Error Classes\nclass កំហុសផ្ទាល់ខ្លួន extends Error {\n    constructor(សារ, កូដកំហុស) {\n        super(សារ);\n        this.name = 'កំហុសផ្ទាល់ខ្លួន';\n        this.code = កូដកំហុស;\n    }\n}\n\nfunction ពិនិត្យអាយុ(អាយុ) {\n    try {\n        if (typeof អាយុ !== 'number') {\n            throw new កំហុសផ្ទាល់ខ្លួន('អាយុត្រូវតែជាលេខ', 'INVALID_TYPE');\n        }\n        \n        if (អាយុ < 0) {\n            throw new កំហុសផ្ទាល់ខ្លួន('អាយុមិនអាចតិចជាងសូន្យ', 'NEGATIVE_AGE');\n        }\n        \n        if (អាយុ > 150) {\n            throw new កំហុសផ្ទាល់ខ្លួន('អាយុហួសពីដែនកំណត់', 'AGE_TOO_HIGH');\n        }\n        \n        console.log('អាយុត្រឹមត្រូវ:', អាយុ);\n        return true;\n        \n    } catch (កំហុស) {\n        if (កំហុស instanceof កំហុសផ្ទាល់ខ្លួន) {\n            console.error(`កំហុសផ្ទាល់ខ្លួន [${កំហុស.code}]:`, កំហុស.message);\n        } else {\n            console.error('កំហុសមិនស្គាល់:', កំហុស.message);\n        }\n        return false;\n    }\n}\n\n// ការសាកល្បង\nពិនិត្យអាយុ(25);      // ត្រឹមត្រូវ\nពិនិត្យអាយុ('២៥');    // កំហុសប្រភេទ\nពិនិត្យអាយុ(-5);      // កំហុសអាយុអវិជ្ជមាន\nពិនិត្យអាយុ(200);     // កំហុសអាយុខ្ពស់ពេក\n\n// Error Handling ជាមួយ Async/Await\nasync function ទាញយកទិន្នន័យអាស៊ីន(url) {\n    try {\n        console.log('កំពុងទាញយកទិន្នន័យពី:', url);\n        \n        // ក្លែងធ្វើការទាញយកទិន្នន័យ\n        let ជោគជ័យ = Math.random() > 0.3;\n        \n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        if (!ជោគជ័យ) {\n            throw new Error('ការតភ្ជាប់បរាជ័យ');\n        }\n        \n        let ទិន្នន័យ = { id: 1, ឈ្មោះ: 'ទិន្នន័យសាកល្បង' };\n        console.log('ទាញយកទិន្នន័យបានជោគជ័យ:', ទិន្នន័យ);\n        return ទិន្នន័យ;\n        \n    } catch (កំហុស) {\n        console.error('កំហុសក្នុងការទាញយកទិន្នន័យ:', កំហុស.message);\n        \n        // ការព្យាយាមម្តងទៀត\n        console.log('កំពុងព្យាយាមម្តងទៀត...');\n        throw កំហុស; // បន្តបញ្ជូនកំហុសទៅកាន់ caller\n    } finally {\n        console.log('ការទាញយកទិន្នន័យបានបញ្ចប់');\n    }\n}\n\n// ការប្រើមុខងារ async ជាមួយ error handling\nasync function ដំណើរការទិន្នន័យ() {\n    try {\n        let ទិន្នន័យ = await ទាញយកទិន្នន័យអាស៊ីន('https://api.example.com/data');\n        console.log('ដំណើរការទិន្នន័យ:', ទិន្នន័យ);\n    } catch (កំហុស) {\n        console.error('មិនអាចដំណើរការទិន្នន័យ:', កំហុស.message);\n    }\n}\n\nដំណើរការទិន្នន័យ();\n\n// Global Error Handling\nwindow.addEventListener('error', function(event) {\n    console.error('កំហុសជាសកល:', {\n        សារ: event.message,\n        ឯកសារ: event.filename,\n        បន្ទាត់: event.lineno,\n        ជួរឈរ: event.colno,\n        កំហុស: event.error\n    });\n});\n\n// Unhandled Promise Rejection\nwindow.addEventListener('unhandledrejection', function(event) {\n    console.error('Promise rejection មិនបានគ្រប់គ្រង:', event.reason);\n    event.preventDefault(); // ការពារការបង្ហាញកំហុសនៅ console\n});\n\n// Validation Helper Function\nfunction ពិនិត្យទិន្នន័យ(ទិន្នន័យ, schema) {\n    let កំហុស = [];\n    \n    for (let field in schema) {\n        let rule = schema[field];\n        let value = ទិន្នន័យ[field];\n        \n        if (rule.required && (value === undefined || value === null || value === '')) {\n            កំហុស.push(`${field} ចាំបាច់ត្រូវមាន`);\n        }\n        \n        if (value && rule.type && typeof value !== rule.type) {\n            កំហុស.push(`${field} ត្រូវតែជា ${rule.type}`);\n        }\n        \n        if (value && rule.minLength && value.length < rule.minLength) {\n            កំហុស.push(`${field} ត្រូវមានយ៉ាងតិច ${rule.minLength} តួអក្សរ`);\n        }\n    }\n    \n    if (កំហុស.length > 0) {\n        throw new Error('ទិន្នន័យមិនត្រឹមត្រូវ: ' + កំហុស.join(', '));\n    }\n    \n    return true;\n}\n\n// ការប្រើ validation\ntry {\n    let អ្នកប្រើ = { ឈ្មោះ: '', អាយុ: '២៥' };\n    let schema = {\n        ឈ្មោះ: { required: true, type: 'string', minLength: 2 },\n        អាយុ: { required: true, type: 'number' }\n    };\n    \n    ពិនិត្យទិន្នន័យ(អ្នកប្រើ, schema);\n    console.log('ទិន្នន័យត្រឹមត្រូវ');\n} catch (កំហុស) {\n    console.error('កំហុសក្នុងការពិនិត្យ:', កំហុស.message);\n}",
    "tip": "ប្រើ try-catch blocks ជុំវិញកូដដែលអាចមានកំហុស និងបង្កើត custom error classes សម្រាប់កំហុសជាក់លាក់"
  },
  {
    "id": 68,
    "category": "JavaScript",
    "path": "/javascript/modules",
    "title": "មេរៀនទី១៣: ម៉ូឌុល JavaScript (JavaScript Modules)",
    "explanation": "ម៉ូឌុលអនុញ្ញាតឱ្យបំបែកកូដជាឯកសារតូចៗ ដែលងាយស្រួលថែទាំ និងប្រើប្រាស់ម្តងហើយម្តងទៀត។ JavaScript ES6 បានណែនាំ import/export syntax សម្រាប់ការគ្រប់គ្រងម៉ូឌុល។",
    "code": "// ឯកសារ: math.js\n// Export functions\nexport function បូក(a, b) {\n    return a + b;\n}\n\nexport function ដក(a, b) {\n    return a - b;\n}\n\nexport function គុណ(a, b) {\n    return a * b;\n}\n\nexport function ចែក(a, b) {\n    if (b === 0) {\n        throw new Error('មិនអាចចែកដោយសូន្យ');\n    }\n    return a / b;\n}\n\n// Export constants\nexport const PI = 3.14159;\nexport const E = 2.71828;\n\n// Default export\nexport default function ការ៉េ(x) {\n    return x * x;\n}\n\n// ឯកសារ: utils.js\n// Export object\nexport const StringUtils = {\n    capitalize: function(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    },\n    \n    reverse: function(str) {\n        return str.split('').reverse().join('');\n    },\n    \n    truncate: function(str, length) {\n        return str.length > length ? str.slice(0, length) + '...' : str;\n    }\n};\n\n// Export class\nexport class Person {\n    constructor(ឈ្មោះ, អាយុ) {\n        this.ឈ្មោះ = ឈ្មោះ;\n        this.អាយុ = អាយុ;\n    }\n    \n    សួរសុខទុក្ខ() {\n        return `សួស្តី! ខ្ញុំឈ្មោះ ${this.ឈ្មោះ} អាយុ ${this.អាយុ} ឆ្នាំ`;\n    }\n    \n    បង្ហាញព័ត៌មាន() {\n        return {\n            ឈ្មោះ: this.ឈ្មោះ,\n            អាយុ: this.អាយុ\n        };\n    }\n}\n\n// ឯកសារ: main.js\n// Import specific functions\nimport { បូក, ដក, គុណ, PI } from './math.js';\n\n// Import default export\nimport ការ៉េ from './math.js';\n\n// Import with alias\nimport { ចែក as ចែកលេខ } from './math.js';\n\n// Import all exports\nimport * as MathModule from './math.js';\n\n// Import from utils\nimport { StringUtils, Person } from './utils.js';\n\n// ការប្រើម៉ូឌុល\nconsole.log('ការគណនា:');\nconsole.log('៥ + ៣ =', បូក(5, 3));\nconsole.log('៥ - ៣ =', ដក(5, 3));\nconsole.log('៥ × ៣ =', គុណ(5, 3));\nconsole.log('៥ ÷ ៣ =', ចែកលេខ(5, 3));\nconsole.log('៥² =', ការ៉េ(5));\nconsole.log('PI =', PI);\n\n// ការប្រើ namespace import\nconsole.log('\\nការប្រើ namespace:');\nconsole.log('MathModule.បូក(10, 20) =', MathModule.បូក(10, 20));\nconsole.log('MathModule.E =', MathModule.E);\n\n// ការប្រើ StringUtils\nconsole.log('\\nString utilities:');\nlet អត្ថបទ = 'javascript';\nconsole.log('ដើម:', អត្ថបទ);\nconsole.log('Capitalize:', StringUtils.capitalize(អត្ថបទ));\nconsole.log('Reverse:', StringUtils.reverse(អត្ថបទ));\nconsole.log('Truncate:', StringUtils.truncate(អត្ថបទ, 4));\n\n// ការប្រើ Class\nconsole.log('\\nការប្រើ Person class:');\nlet មនុស្ស = new Person('សុខា', 25);\nconsole.log(មនុស្ស.សួរសុខទុក្ខ());\nconsole.log('ព័ត៌មាន:', មនុស្ស.បង្ហាញព័ត៌មាន());\n\n// Dynamic imports\nasync function ផ្ទុកម៉ូឌុលដោយលក្ខខណ្ឌ(condition) {\n    if (condition) {\n        try {\n            // Dynamic import\n            const module = await import('./math.js');\n            console.log('\\nDynamic import:');\n            console.log('២ + ២ =', module.បូក(2, 2));\n            console.log('៣² =', module.default(3));\n        } catch (កំហុស) {\n            console.error('មិនអាចផ្ទុកម៉ូឌុល:', កំហុស);\n        }\n    }\n}\n\nផ្ទុកម៉ូឌុលដោយលក្ខខណ្ឌ(true);\n\n// Re-exports (ក្នុងឯកសារ index.js)\n// export { បូក, ដក } from './math.js';\n// export { StringUtils } from './utils.js';\n// export { default as ការ៉េ } from './math.js';\n\n// Module pattern (មុន ES6)\nconst MyModule = (function() {\n    // Private variables\n    let ចំនួនរាប់ = 0;\n    let ទិន្នន័យ = [];\n    \n    // Private functions\n    function ពិនិត្យទិន្នន័យ(item) {\n        return item !== null && item !== undefined;\n    }\n    \n    // Public API\n    return {\n        បន្ថែម: function(item) {\n            if (ពិនិត្យទិន្នន័យ(item)) {\n                ទិន្នន័យ.push(item);\n                ចំនួនរាប់++;\n                return true;\n            }\n            return false;\n        },\n        \n        លុប: function(index) {\n            if (index >= 0 && index < ទិន្នន័យ.length) {\n                ទិន្នន័យ.splice(index, 1);\n                ចំនួនរាប់--;\n                return true;\n            }\n            return false;\n        },\n        \n        ទទួលយក: function() {\n            return [...ទិន្នន័យ]; // Return copy\n        },\n        \n        ចំនួន: function() {\n            return ចំនួនរាប់;\n        }\n    };\n})();\n\n// ការប្រើ Module pattern\nconsole.log('\\nModule pattern:');\nMyModule.បន្ថែម('ធាតុ ១');\nMyModule.បន្ថែម('ធាតុ ២');\nconsole.log('ទិន្នន័យ:', MyModule.ទទួលយក());\nconsole.log('ចំនួន:', MyModule.ចំនួន());\n\n// CommonJS style (Node.js)\n// module.exports = {\n//     បូក: function(a, b) { return a + b; },\n//     ដក: function(a, b) { return a - b; }\n// };\n\n// const { បូក, ដក } = require('./math');\n\n// AMD style (RequireJS)\n// define(['dependency1', 'dependency2'], function(dep1, dep2) {\n//     return {\n//         myFunction: function() {\n//             // ...\n//         }\n//     };\n// });",
    "tip": "ប្រើ ES6 modules (import/export) សម្រាប់កម្មវិធីទំនើប និង dynamic imports សម្រាប់ការផ្ទុកម៉ូឌុលតាមលក្ខខណ្ឌ"
  },
  {
    "id": 69,
    "category": "JavaScript",
    "path": "/javascript/classes",
    "title": "មេរៀនទី១៤: ថ្នាក់ JavaScript (JavaScript Classes)",
    "explanation": "ថ្នាក់ (Classes) គឺជាវិធីសាស្រ្តទំនើបសម្រាប់បង្កើតវត្ថុនិង inheritance ក្នុង JavaScript។ ថ្នាក់ផ្តល់នូវ syntax ស្អាតជាងសម្រាប់ការបង្កើត constructor functions និង prototypes។",
    "code": "// ថ្នាក់មូលដ្ឋាន\nclass មនុស្ស {\n    // Constructor\n    constructor(ឈ្មោះ, អាយុ, ទីក្រុង) {\n        this.ឈ្មោះ = ឈ្មោះ;\n        this.អាយុ = អាយុ;\n        this.ទីក្រុង = ទីក្រុង;\n    }\n    \n    // Methods\n    សួរសុខទុក្ខ() {\n        return `សួស្តី! ខ្ញុំឈ្មោះ ${this.ឈ្មោះ}`;\n    }\n    \n    បង្ហាញព័ត៌មាន() {\n        return `ឈ្មោះ: ${this.ឈ្មោះ}, អាយុ: ${this.អាយុ}, ទីក្រុង: ${this.ទីក្រុង}`;\n    }\n    \n    មានអាយុគ្រប់() {\n        return this.អាយុ >= 18;\n    }\n    \n    // Getter\n    get ព័ត៌មានពេញលេញ() {\n        return `${this.ឈ្មោះ} (${this.អាយុ} ឆ្នាំ) - ${this.ទីក្រុង}`;\n    }\n    \n    // Setter\n    set កំណត់អាយុ(អាយុថ្មី) {\n        if (អាយុថ្មី > 0 && អាយុថ្មី < 150) {\n            this.អាយុ = អាយុថ្មី;\n        } else {\n            console.error('អាយុមិនត្រឹមត្រូវ');\n        }\n    }\n    \n    // Static method\n    static ប្រៀបធៀបអាយុ(មនុស្ស១, មនុស្ស២) {\n        return មនុស្ស១.អាយុ - មនុស្ស២.អាយុ;\n    }\n    \n    // Static property\n    static ប្រភេទ = 'Homo sapiens';\n}\n\n// ការបង្កើតវត្ថុ\nlet សុខា = new មនុស្ស('សុខា', 25, 'ភ្នំពេញ');\nlet ដារា = new មនុស្ស('ដារា', 30, 'សៀមរាប');\n\nconsole.log(សុខា.សួរសុខទុក្ខ());\nconsole.log(សុខា.បង្ហាញព័ត៌មាន());\nconsole.log('គ្រប់អាយុ?', សុខា.មានអាយុគ្រប់());\n\n// ការប្រើ getter\nconsole.log('ព័ត៌មានពេញលេញ:', សុខា.ព័ត៌មានពេញលេញ);\n\n// ការប្រើ setter\nសុខា.កំណត់អាយុ = 26;\nconsole.log('អាយុថ្មី:', សុខា.អាយុ);\n\n// Static methods និង properties\nconsole.log('ប្រៀបធៀបអាយុ:', មនុស្ស.ប្រៀបធៀបអាយុ(សុខា, ដារា));\nconsole.log('ប្រភេទមនុស្ស:', មនុស្ស.ប្រភេទ);\n\n// Inheritance (ការទទួលមរតក)\nclass សិស្ស extends មនុស្ស {\n    constructor(ឈ្មោះ, អាយុ, ទីក្រុង, សាលា, ថ្នាក់) {\n        super(ឈ្មោះ, អាយុ, ទីក្រុង); // ហៅ parent constructor\n        this.សាលា = សាលា;\n        this.ថ្នាក់ = ថ្នាក់;\n        this.ពិន្ទុ = [];\n    }\n    \n    // Override parent method\n    បង្ហាញព័ត៌មាន() {\n        let ព័ត៌មានមូលដ្ឋាន = super.បង្ហាញព័ត៌មាន();\n        return `${ព័ត៌មានមូលដ្ឋាន}, សាលា: ${this.សាលា}, ថ្នាក់: ${this.ថ្នាក់}`;\n    }\n    \n    បន្ថែមពិន្ទុ(មុខវិជ្ជា, ពិន្ទុ) {\n        this.ពិន្ទុ.push({ មុខវិជ្ជា, ពិន្ទុ });\n    }\n    \n    គណនាមធ្យម() {\n        if (this.ពិន្ទុ.length === 0) return 0;\n        \n        let សរុប = this.ពិន្ទុ.reduce((sum, item) => sum + item.ពិន្ទុ, 0);\n        return សរុប / this.ពិន្ទុ.length;\n    }\n    \n    បង្ហាញពិន្ទុ() {\n        return this.ពិន្ទុ.map(item => `${item.មុខវិជ្ជា}: ${item.ពិន្ទុ}`);\n    }\n}\n\n// ការប្រើថ្នាក់កូន\nlet វិចិត្រ = new សិស្ស('វិចិត្រ', 20, 'បាត់ដំបង', 'វិទ្យាល័យហ៊ុនសែន', 'ថ្នាក់ទី១២');\n\nconsole.log('\\nព័ត៌មានសិស្ស:');\nconsole.log(វិចិត្រ.បង្ហាញព័ត៌មាន());\n\nវិចិត្រ.បន្ថែមពិន្ទុ('គណិតវិទ្យា', 85);\nវិចិត្រ.បន្ថែមពិន្ទុ('រូបវិទ្យា', 92);\nវិចិត្រ.បន្ថែមពិន្ទុ('គីមីវិទ្យា', 78);\n\nconsole.log('ពិន្ទុ:', វិចិត្រ.បង្ហាញពិន្ទុ());\nconsole.log('ពិន្ទុមធ្យម:', វិចិត្រ.គណនាមធ្យម().toFixed(2));\n\n// Private fields និង methods (ES2022)\nclass គណនី {\n    // Private fields\n    #លេខគណនី;\n    #សមតុល្យ;\n    #ប្រវត្តិ;\n    \n    constructor(លេខគណនី, សមតុល្យដំបូង = 0) {\n        this.#លេខគណនី = លេខគណនី;\n        this.#សមតុល្យ = សមតុល្យដំបូង;\n        this.#ប្រវត្តិ = [];\n    }\n    \n    // Private method\n    #បន្ថែមប្រវត្តិ(ប្រភេទ, ចំនួន) {\n        this.#ប្រវត្តិ.push({\n            ប្រភេទ,\n            ចំនួន,\n            កាលបរិច្ឆេទ: new Date(),\n            សមតុល្យ: this.#សមតុល្យ\n        });\n    }\n    \n    ដាក់ប្រាក់(ចំនួន) {\n        if (ចំនួន > 0) {\n            this.#សមតុល្យ += ចំនួន;\n            this.#បន្ថែមប្រវត្តិ('ដាក់ប្រាក់', ចំនួន);\n            return true;\n        }\n        return false;\n    }\n    \n    ដកប្រាក់(ចំនួន) {\n        if (ចំនួន > 0 && ចំនួន <= this.#សមតុល្យ) {\n            this.#សមតុល្យ -= ចំនួន;\n            this.#បន្ថែមប្រវត្តិ('ដកប្រាក់', ចំនួន);\n            return true;\n        }\n        return false;\n    }\n    \n    get សមតុល្យ() {\n        return this.#សមតុល្យ;\n    }\n    \n    get លេខគណនី() {\n        return this.#លេខគណនី;\n    }\n    \n    បង្ហាញប្រវត្តិ() {\n        return [...this.#ប្រវត្តិ]; // Return copy\n    }\n}\n\n// ការប្រើ private fields\nlet គណនីខ្ញុំ = new គណនី('001-234-567', 1000);\n\nconsole.log('\\nគណនីធនាគារ:');\nconsole.log('លេខគណនី:', គណនីខ្ញុំ.លេខគណនី);\nconsole.log('សមតុល្យដំបូង:', គណនីខ្ញុំ.សមតុល្យ);\n\nគណនីខ្ញុំ.ដាក់ប្រាក់(500);\nគណនីខ្ញុំ.ដកប្រាក់(200);\n\nconsole.log('សមតុល្យបន្ទាប់ពីប្រតិបត្តិការ:', គណនីខ្ញុំ.សមតុល្យ);\nconsole.log('ប្រវត្តិ:', គណនីខ្ញុំ.បង្ហាញប្រវត្តិ());\n\n// ការពិនិត្យ instanceof\nconsole.log('\\nការពិនិត្យប្រភេទ:');\nconsole.log('សុខា instanceof មនុស្ស:', សុខា instanceof មនុស្ស);\nconsole.log('វិចិត្រ instanceof សិស្ស:', វិចិត្រ instanceof សិស្ស);\nconsole.log('វិចិត្រ instanceof មនុស្ស:', វិចិត្រ instanceof មនុស្ស);",
    "tip": "ប្រើ classes សម្រាប់ការបង្កើតវត្ថុស្មុគស្មាញ និង private fields (#) ដើម្បីលាក់ implementation details"
  },
  {
    "id": 70,
    "category": "JavaScript",
    "path": "/javascript/destructuring",
    "title": "មេរៀនទី១៥: Destructuring JavaScript",
    "explanation": "Destructuring គឺជាវិធីសាស្រ្តដើម្បីទាញយកតម្លៃពី arrays ឬ objects ទៅកាន់អថេរដាច់ដោយឡែក។ វាធ្វើឱ្យកូដកាន់តែស្អាតនិងងាយអាន។",
    "code": "// Array Destructuring\nlet ផ្លែឈើ = ['ប៉ោម', 'ចេក', 'ស្វាយ', 'ក្រូចថ្លុង'];\n\n// មូលដ្ឋាន\nlet [ផ្លែទីមួយ, ផ្លែទីពីរ] = ផ្លែឈើ;\nconsole.log('ផ្លែទីមួយ:', ផ្លែទីមួយ);\nconsole.log('ផ្លែទីពីរ:', ផ្លែទីពីរ);\n\n// រំលងធាតុ\nlet [, , ផ្លែទីបី] = ផ្លែឈើ;\nconsole.log('ផ្លែទីបី:', ផ្លែទីបី);\n\n// Rest operator\nlet [ផ្លែដំបូង, ...ផ្លែនៅសល់] = ផ្លែឈើ;\nconsole.log('ផ្លែដំបូង:', ផ្លែដំបូង);\nconsole.log('ផ្លែនៅសល់:', ផ្លែនៅសល់);\n\n// Default values\nlet [a, b, c, d, e = 'ទំពាំងបាយជូរ'] = ផ្លែឈើ;\nconsole.log('ផ្លែទី៥ (default):', e);\n\n// ការប្តូរតម្លៃ\nlet x = 10, y = 20;\nconsole.log('មុនប្តូរ: x =', x, ', y =', y);\n[x, y] = [y, x];\nconsole.log('បន្ទាប់ពីប្តូរ: x =', x, ', y =', y);\n\n// Object Destructuring\nlet មនុស្ស = {\n    ឈ្មោះ: 'សុខា',\n    អាយុ: 25,\n    ទីក្រុង: 'ភ្នំពេញ',\n    មុខរបរ: 'អ្នកអភិវឌ្ឍន៍',\n    ទំនាក់ទំនង: {\n        អ៊ីមែល: 'sokha@example.com',\n        ទូរស័ព្ទ: '012-345-678'\n    }\n};\n\n// មូលដ្ឋាន\nlet { ឈ្មោះ, អាយុ } = មនុស្ស;\nconsole.log('\\nឈ្មោះ:', ឈ្មោះ);\nconsole.log('អាយុ:', អាយុ);\n\n// ប្តូរឈ្មោះអថេរ\nlet { ឈ្មោះ: ឈ្មោះមនុស្ស, ទីក្រុង: ទីលំនៅ } = មនុស្ស;\nconsole.log('ឈ្មោះមនុស្ស:', ឈ្មោះមនុស្ស);\nconsole.log('ទីលំនៅ:', ទីលំនៅ);\n\n// Default values\nlet { មុខរបរ, ប្រាក់ខែ = 'មិនបានបញ្ជាក់' } = មនុស្ស;\nconsole.log('មុខរបរ:', មុខរបរ);\nconsole.log('ប្រាក់ខែ:', ប្រាក់ខែ);\n\n// Nested destructuring\nlet { ទំនាក់ទំនង: { អ៊ីមែល, ទូរស័ព្ទ } } = មនុស្ស;\nconsole.log('អ៊ីមែល:', អ៊ីមែល);\nconsole.log('ទូរស័ព្ទ:', ទូរស័ព្ទ);\n\n// Rest operator ជាមួយ objects\nlet { ឈ្មោះ: _, ...ព័ត៌មានផ្សេង } = មនុស្ស;\nconsole.log('ព័ត៌មានផ្សេង:', ព័ត៌មានផ្សេង);\n\n// Function parameters destructuring\nfunction បង្ហាញព័ត៌មានមនុស្ស({ ឈ្មោះ, អាយុ, ទីក្រុង = 'មិនបានបញ្ជាក់' }) {\n    return `${ឈ្មោះ} អាយុ ${អាយុ} ឆ្នាំ រស់នៅ ${ទីក្រុង}`;\n}\n\nlet ដារា = { ឈ្មោះ: 'ដារា', អាយុ: 30 };\nconsole.log('\\n' + បង្ហាញព័ត៌មានមនុស្ស(ដារា));\n\n// Array of objects destructuring\nlet សិស្ស = [\n    { ឈ្មោះ: 'វិចិត្រ', ពិន្ទុ: 85 },\n    { ឈ្មោះ: 'សុភា', ពិន្ទុ: 92 },\n    { ឈ្មោះ: 'មករា', ពិន្ទុ: 78 }\n];\n\n// Destructuring ក្នុង loop\nconsole.log('\\nពិន្ទុសិស្ស:');\nfor (let { ឈ្មោះ, ពិន្ទុ } of សិស្ស) {\n    console.log(`${ឈ្មោះ}: ${ពិន្ទុ} ពិន្ទុ`);\n}\n\n// Mixed destructuring\nlet ទិន្នន័យ = {\n    ចំណងជើង: 'ព័ត៌មានសំខាន់',\n    ធាតុ: ['ធាតុ១', 'ធាតុ២', 'ធាតុ៣'],\n    ស្ថិតិ: {\n        ចំនួនមើល: 1500,\n        ចំនួនចូលចិត្ត: 89\n    }\n};\n\nlet {\n    ចំណងជើង,\n    ធាតុ: [ធាតុដំបូង, ...ធាតុនៅសល់],\n    ស្ថិតិ: { ចំនួនមើល }\n} = ទិន្នន័យ;\n\nconsole.log('\\nទិន្នន័យស្មុគស្មាញ:');\nconsole.log('ចំណងជើង:', ចំណងជើង);\nconsole.log('ធាតុដំបូង:', ធាតុដំបូង);\nconsole.log('ធាតុនៅសល់:', ធាតុនៅសល់);\nconsole.log('ចំនួនមើល:', ចំនួនមើល);\n\n// Destructuring ក្នុង function return\nfunction ទទួលព័ត៌មានអ្នកប្រើ() {\n    return {\n        អ្នកប្រើ: {\n            ឈ្មោះ: 'កុម្ភៈ',\n            អាយុ: 28\n        },\n        ការកំណត់: {\n            ភាសា: 'ខ្មែរ',\n            ធីម: 'ងងឹត'\n        },\n        សិទ្ធិ: ['អាន', 'សរសេរ', 'លុប']\n    };\n}\n\nlet {\n    អ្នកប្រើ: { ឈ្មោះ: ឈ្មោះអ្នកប្រើ },\n    ការកំណត់: { ភាសា },\n    សិទ្ធិ\n} = ទទួលព័ត៌មានអ្នកប្រើ();\n\nconsole.log('\\nព័ត៌មានអ្នកប្រើ:');\nconsole.log('ឈ្មោះអ្នកប្រើ:', ឈ្មោះអ្នកប្រើ);\nconsole.log('ភាសា:', ភាសា);\nconsole.log('សិទ្ធិ:', សិទ្ធិ);\n\n// Destructuring ជាមួយ computed property names\nlet key = 'ពណ៌';\nlet រថយន្ត = {\n    ម៉ាក: 'Toyota',\n    ម៉ូដែល: 'Camry',\n    ពណ៌: 'ស'\n};\n\nlet { [key]: ពណ៌រថយន្ត } = រថយន្ត;\nconsole.log('\\nពណ៌រថយន្ត:', ពណ៌រថយន្ត);\n\n// Practical example: API response handling\nfunction ដំណើរការចម្លើយ API(response) {\n    let {\n        data: {\n            user: { name, email },\n            posts = [],\n            meta: { total, page = 1 } = {}\n        } = {},\n        status = 'unknown',\n        message = 'No message'\n    } = response || {};\n    \n    return {\n        អ្នកប្រើ: { name, email },\n        ចំនួនប្រកាស: posts.length,\n        ទំព័រ: page,\n        សរុប: total,\n        ស្ថានភាព: status,\n        សារ: message\n    };\n}\n\n// ឧទាហរណ៍ការប្រើ\nlet apiResponse = {\n    data: {\n        user: { name: 'ពិសាខ', email: 'pisach@example.com' },\n        posts: [1, 2, 3],\n        meta: { total: 100, page: 2 }\n    },\n    status: 'success',\n    message: 'Data retrieved successfully'\n};\n\nlet លទ្ធផល = ដំណើរការចម្លើយ API(apiResponse);\nconsole.log('\\nលទ្ធផល API:', លទ្ធផល);",
    "tip": "ប្រើ destructuring ដើម្បីធ្វើឱ្យកូដកាន់តែស្អាត និងងាយអាន ជាពិសេសពេលធ្វើការជាមួយ objects និង arrays ស្មុគស្មាញ"
  },
  {
    "id": 71,
    "category": "JavaScript",
    "path": "/javascript/spread-rest",
    "title": "មេរៀនទី១៦: Spread និង Rest Operators",
    "explanation": "Spread (...) operator អនុញ្ញាតឱ្យពង្រីក arrays ឬ objects ចូលទៅក្នុងធាតុដាច់ដោយឡែក។ Rest operator ប្រើសញ្ញាដូចគ្នាប៉ុន្តែដើម្បីប្រមូលធាតុច្រើនទៅជាមួយ។",
    "code": "// Spread Operator ជាមួយ Arrays\nlet លេខ១ = [1, 2, 3];\nlet លេខ២ = [4, 5, 6];\n\n// ការផ្សំ arrays\nlet លេខទាំងអស់ = [...លេខ១, ...លេខ២];\nconsole.log('លេខទាំងអស់:', លេខទាំងអស់);\n\n// បន្ថែមធាតុថ្មី\nlet លេខថ្មី = [0, ...លេខ១, 3.5, ...លេខ២, 7];\nconsole.log('លេខថ្មី:', លេខថ្មី);\n\n// ចម្លង array\nlet ចម្លងលេខ១ = [...លេខ១];\nចម្លងលេខ១.push(4);\nconsole.log('លេខដើម:', លេខ១);\nconsole.log('ចម្លង:', ចម្លងលេខ១);\n\n// រកតម្លៃអតិបរមា/អប្បបរមា\nlet ពិន្ទុ = [85, 92, 78, 96, 88];\nlet ពិន្ទុខ្ពស់បំផុត = Math.max(...ពិន្ទុ);\nlet ពិន្ទុទាបបំផុត = Math.min(...ពិន្ទុ);\nconsole.log('\\nពិន្ទុខ្ពស់បំផុត:', ពិន្ទុខ្ពស់បំផុត);\nconsole.log('ពិន្ទុទាបបំផុត:', ពិន្ទុទាបបំផុត);\n\n// បំលែង string ទៅ array\nlet ឈ្មោះ = 'សុខា';\nlet អក្សរ = [...ឈ្មោះ];\nconsole.log('អក្សរ:', អក្សរ);\n\n// Spread Operator ជាមួយ Objects\nlet មនុស្សមូលដ្ឋាន = {\n    ឈ្មោះ: 'ដារា',\n    អាយុ: 25\n};\n\nlet ព័ត៌មានបន្ថែម = {\n    ទីក្រុង: 'ភ្នំពេញ',\n    មុខរបរ: 'គ្រូបង្រៀន'\n};\n\n// ការផ្សំ objects\nlet មនុស្សពេញលេញ = {\n    ...មនុស្សមូលដ្ឋាន,\n    ...ព័ត៌មានបន្ថែម,\n    ស្ថានភាព: 'នៅលីវ'\n};\n\nconsole.log('\\nមនុស្សពេញលេញ:', មនុស្សពេញលេញ);\n\n// Override properties\nlet មនុស្សកែប្រែ = {\n    ...មនុស្សមូលដ្ឋាន,\n    អាយុ: 30, // Override\n    ទីក្រុង: 'សៀមរាប'\n};\n\nconsole.log('មនុស្សកែប្រែ:', មនុស្សកែប្រែ);\n\n// ចម្លង object (shallow copy)\nlet ចម្លងមនុស្ស = { ...មនុស្សពេញលេញ };\nចម្លងមនុស្ស.ឈ្មោះ = 'វិចិត្រ';\nconsole.log('មនុស្សដើម:', មនុស្សពេញលេញ.ឈ្មោះ);\nconsole.log('ចម្លង:', ចម្លងមនុស្ស.ឈ្មោះ);\n\n// Rest Operator ក្នុង Function Parameters\nfunction បូកទាំងអស់(...លេខ) {\n    return លេខ.reduce((សរុប, លេខ) => សរុប + លេខ, 0);\n}\n\nconsole.log('\\nបូក 1,2,3:', បូកទាំងអស់(1, 2, 3));\nconsole.log('បូក 1,2,3,4,5:', បូកទាំងអស់(1, 2, 3, 4, 5));\n\n// Rest ជាមួយ parameters ផ្សេងទៀត\nfunction បង្កើតសារ(ឈ្មោះ, ...ពាក្យ) {\n    return `សួស្តី ${ឈ្មោះ}! ${ពាក្យ.join(' ')}`;\n}\n\nconsole.log(បង្កើតសារ('សុខា', 'តើ', 'អ្នក', 'សុខសប្បាយ', 'ទេ?'));\n\n// Rest ក្នុង Array Destructuring\nlet ផ្លែឈើ = ['ប៉ោម', 'ចេក', 'ស្វាយ', 'ក្រូចថ្លុង', 'ទំពាំងបាយជូរ'];\nlet [ផ្លែដំបូង, ផ្លែទីពីរ, ...ផ្លែនៅសល់] = ផ្លែឈើ;\n\nconsole.log('\\nផ្លែដំបូង:', ផ្លែដំបូង);\nconsole.log('ផ្លែទីពីរ:', ផ្លែទីពីរ);\nconsole.log('ផ្លែនៅសល់:', ផ្លែនៅសល់);\n\n// Rest ក្នុង Object Destructuring\nlet សិស្ស = {\n    ឈ្មោះ: 'មករា',\n    អាយុ: 20,\n    ថ្នាក់: 'ទី១២',\n    សាលា: 'វិទ្យាល័យហ៊ុនសែន',\n    ពិន្ទុគណិត: 85,\n    ពិន្ទុរូបវិទ្យា: 92\n};\n\nlet { ឈ្មោះ, អាយុ, ...ព័ត៌មានផ្សេង } = សិស្ស;\nconsole.log('\\nឈ្មោះ:', ឈ្មោះ);\nconsole.log('អាយុ:', អាយុ);\nconsole.log('ព័ត៌មានផ្សេង:', ព័ត៌មានផ្សេង);\n\n// ការប្រើ Spread ក្នុង Function Calls\nfunction គុណបីលេខ(a, b, c) {\n    return a * b * c;\n}\n\nlet លេខសម្រាប់គុណ = [2, 3, 4];\nlet លទ្ធផលគុណ = គុណបីលេខ(...លេខសម្រាប់គុណ);\nconsole.log('\\nលទ្ធផលគុណ:', លទ្ធផលគុណ);\n\n// Practical Examples\n\n// 1. ការលុបធាតុពី array\nfunction លុបធាតុ(array, index) {\n    return [\n        ...array.slice(0, index),\n        ...array.slice(index + 1)\n    ];\n}\n\nlet បញ្ជីដើម = ['a', 'b', 'c', 'd', 'e'];\nlet បញ្ជីថ្មី = លុបធាតុ(បញ្ជីដើម, 2);\nconsole.log('\\nបញ្ជីដើម:', បញ្ជីដើម);\nconsole.log('បញ្ជីថ្មី (លុប index 2):', បញ្ជីថ្មី);\n\n// 2. ការបន្ថែមធាតុនៅទីតាំងជាក់លាក់\nfunction បន្ថែមធាតុ(array, index, ...items) {\n    return [\n        ...array.slice(0, index),\n        ...items,\n        ...array.slice(index)\n    ];\n}\n\nlet បញ្ជីបន្ថែម = បន្ថែមធាតុ(['a', 'b', 'd', 'e'], 2, 'c', 'c2');\nconsole.log('បញ្ជីបន្ទាប់ពីបន្ថែម:', បញ្ជីបន្ថែម);\n\n// 3. ការផ្សំ objects ជាមួយលក្ខខណ្ឌ\nfunction បង្កើតការកំណត់(defaultSettings, userSettings) {\n    return {\n        ...defaultSettings,\n        ...userSettings,\n        // Override ជាមួយតម្លៃគណនា\n        lastUpdated: new Date().toISOString()\n    };\n}\n\nlet ការកំណត់លំនាំដើម = {\n    ភាសា: 'ខ្មែរ',\n    ធីម: 'ស',\n    ការជូនដំណឹង: true\n};\n\nlet ការកំណត់អ្នកប្រើ = {\n    ធីម: 'ងងឹត',\n    ទំហំអក្សរ: 'ធំ'\n};\n\nlet ការកំណត់ចុងក្រោយ = បង្កើតការកំណត់(ការកំណត់លំនាំដើម, ការកំណត់អ្នកប្រើ);\nconsole.log('\\nការកំណត់ចុងក្រោយ:', ការកំណត់ចុងក្រោយ);\n\n// 4. ការបង្កើត utility functions\nconst ArrayUtils = {\n    unique: (arr) => [...new Set(arr)],\n    flatten: (arr) => arr.reduce((flat, item) => \n        Array.isArray(item) ? [...flat, ...ArrayUtils.flatten(item)] : [...flat, item], []),\n    shuffle: (arr) => {\n        let shuffled = [...arr];\n        for (let i = shuffled.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n        }\n        return shuffled;\n    }\n};\n\nlet លេខមានស្ទួន = [1, 2, 2, 3, 3, 3, 4, 5];\nlet លេខគ្មានស្ទួន = ArrayUtils.unique(លេខមានស្ទួន);\nconsole.log('\\nលេខគ្មានស្ទួន:', លេខគ្មានស្ទួន);\n\nlet arrayស្មុគស្មាញ = [1, [2, 3], [4, [5, 6]]];\nlet arrayរាប = ArrayUtils.flatten(arrayស្មុគស្មាញ);\nconsole.log('Array រាប:', arrayរាប);\n\nlet arrayច្របល់ = ArrayUtils.shuffle([1, 2, 3, 4, 5]);\nconsole.log('Array ច្របល់:', arrayច្របល់);",
    "tip": "ប្រើ spread operator ដើម្បីចម្លង arrays/objects និង rest operator ដើម្បីប្រមូលធាតុច្រើនក្នុង functions"
  },
  {
    "id": 72,
    "category": "JavaScript",
    "path": "/javascript/template-literals",
    "title": "មេរៀនទី១៧: Template Literals JavaScript",
    "explanation": "Template Literals អនុញ្ញាតឱ្យបង្កើត strings ដែលមានអថេរ និង expressions ដោយប្រើ backticks (`) និង ${} syntax។ វាធ្វើឱ្យការបង្កើត strings ស្មុគស្មាញកាន់តែងាយស្រួល។",
    "code": "// Template Literals មូលដ្ឋាន\nlet ឈ្មោះ = 'សុខា';\nlet អាយុ = 25;\n\n// ការប្រើ template literals\nlet សារស្វាគមន៍ = `សួស្តី! ខ្ញុំឈ្មោះ ${ឈ្មោះ} អាយុ ${អាយុ} ឆ្នាំ`;\nconsole.log(សារស្វាគមន៍);\n\n// ប្រៀបធៀបជាមួយ string concatenation\nlet សារធម្មតា = 'សួស្តី! ខ្ញុំឈ្មោះ ' + ឈ្មោះ + ' អាយុ ' + អាយុ + ' ឆ្នាំ';\nconsole.log('ធម្មតា:', សារធម្មតា);\n\n// Multi-line strings\nlet អត្ថបទច្រើនបន្ទាត់ = `នេះគឺជាអត្ថបទ\nដែលមានច្រើនបន្ទាត់\nដោយមិនចាំបាច់ប្រើ \\\\n`;\n\nconsole.log('\\nអត្ថបទច្រើនបន្ទាត់:');\nconsole.log(អត្ថបទច្រើនបន្ទាត់);\n\n// Expressions ក្នុង template literals\nlet a = 10;\nlet b = 5;\nlet ការគណនា = `${a} + ${b} = ${a + b}\n${a} - ${b} = ${a - b}\n${a} × ${b} = ${a * b}\n${a} ÷ ${b} = ${a / b}`;\n\nconsole.log('\\nការគណនា:');\nconsole.log(ការគណនា);\n\n// Function calls ក្នុង template literals\nfunction ទទួលសារស្វាគមន៍(ឈ្មោះ) {\n    let ម៉ោង = new Date().getHours();\n    if (ម៉ោង < 12) return 'ពេលព្រឹក';\n    if (ម៉ោង < 18) return 'ពេលរសៀល';\n    return 'ពេលល្ងាច';\n}\n\nlet សារតាមពេល = `សួស្តី${ទទួលសារស្វាគមន៍()} ${ឈ្មោះ}!`;\nconsole.log('\\n' + សារតាមពេល);\n\n// Conditional expressions\nlet ពិន្ទុ = 85;\nlet លទ្ធផលប្រលង = `អ្នកទទួលបាន ${ពិន្ទុ} ពិន្ទុ - ${ពិន្ទុ >= 60 ? 'ជាប់' : 'ធ្លាក់'}`;\nconsole.log(លទ្ធផលប្រលង);\n\n// Object properties\nlet មនុស្ស = {\n    ឈ្មោះ: 'ដារា',\n    អាយុ: 30,\n    ទីក្រុង: 'សៀមរាប'\n};\n\nlet ព័ត៌មានមនុស្ស = `ព័ត៌មាន:\n- ឈ្មោះ: ${មនុស្ស.ឈ្មោះ}\n- អាយុ: ${មនុស្ស.អាយុ} ឆ្នាំ\n- ទីក្រុង: ${មនុស្ស.ទីក្រុង}`;\nconsole.log('\\n' + ព័ត៌មានមនុស្ស);\n\n// HTML template\nfunction បង្កើតកាត(ចំណងជើង, មាតិកា, រូបភាព) {\n    return `\n        <div class=\"card\">\n            <img src=\"${រូបភាព}\" alt=\"${ចំណងជើង}\" class=\"card-image\">\n            <div class=\"card-content\">\n                <h3 class=\"card-title\">${ចំណងជើង}</h3>\n                <p class=\"card-description\">${មាតិកា}</p>\n                <button class=\"card-button\">អានបន្ថែម</button>\n            </div>\n        </div>\n    `;\n}\n\nlet htmlកាត = បង្កើតកាត(\n    'ចំណងជើងកាត',\n    'នេះគឺជាការពិពណ៌នាកាត',\n    'image.jpg'\n);\n\nconsole.log('\\nHTML Card:');\nconsole.log(htmlកាត);\n\n// CSS template\nfunction បង្កើត CSS(selector, properties) {\n    let cssRules = Object.entries(properties)\n        .map(([property, value]) => `    ${property}: ${value};`)\n        .join('\\n');\n    \n    return `${selector} {\n${cssRules}\n}`;\n}\n\nlet cssStyles = បង្កើត CSS('.button', {\n    'background-color': '#007bff',\n    'color': 'white',\n    'padding': '10px 20px',\n    'border': 'none',\n    'border-radius': '5px',\n    'cursor': 'pointer'\n});\n\nconsole.log('\\nCSS Styles:');\nconsole.log(cssStyles);\n\n// Tagged Template Literals\nfunction highlight(strings, ...values) {\n    return strings.reduce((result, string, i) => {\n        let value = values[i] ? `<mark>${values[i]}</mark>` : '';\n        return result + string + value;\n    }, '');\n}\n\nlet ពាក្យគន្លឹះ = 'JavaScript';\nlet ប្រយោគបន្លិច = highlight`រៀន ${ពាក្យគន្លឹះ} គឺជាការសម្រេចចិត្តល្អ!`;\nconsole.log('\\nប្រយោគបន្លិច:', ប្រយោគបន្លិច);\n\n// Currency formatting\nfunction currency(strings, ...values) {\n    return strings.reduce((result, string, i) => {\n        let value = values[i];\n        if (typeof value === 'number') {\n            value = new Intl.NumberFormat('km-KH', {\n                style: 'currency',\n                currency: 'USD'\n            }).format(value);\n        }\n        return result + string + (value || '');\n    }, '');\n}\n\nlet តម្លៃ = 1250.75;\nlet សារតម្លៃ = currency`តម្លៃសរុប: ${តម្លៃ}`;\nconsole.log('\\n' + សារតម្លៃ);\n\n// SQL query builder\nfunction sql(strings, ...values) {\n    let query = strings.reduce((result, string, i) => {\n        let value = values[i];\n        if (typeof value === 'string') {\n            value = `'${value.replace(/'/g, \"''\")}'`; // Escape quotes\n        }\n        return result + string + (value || '');\n    }, '');\n    \n    return query.trim();\n}\n\nlet អ្នកប្រើ = 'john_doe';\nlet អ៊ីមែល = 'john@example.com';\nlet sqlQuery = sql`\n    SELECT * FROM users \n    WHERE username = ${អ្នកប្រើ} \n    AND email = ${អ៊ីមែល}\n`;\n\nconsole.log('\\nSQL Query:');\nconsole.log(sqlQuery);\n\n// Practical example: Email template\nfunction បង្កើតអ៊ីមែល(ទទួល) {\n    let { ឈ្មោះ, អ៊ីមែល, ប្រធានបទ, សារ } = ទទួល;\n    let កាលបរិច្ឆេទ = new Date().toLocaleDateString('km-KH');\n    \n    return `\nTo: ${អ៊ីមែល}\nSubject: ${ប្រធានបទ}\nDate: ${កាលបរិច្ឆេទ}\n\n---\n\nជម្រាបសួរ ${ឈ្មោះ},\n\n${សារ}\n\nសូមអរគុណ,\nក្រុមការងារ\n\n---\nអ៊ីមែលនេះត្រូវបានបង្កើតដោយស្វ័យប្រវត្តិ\n    `.trim();\n}\n\nlet ទិន្នន័យអ៊ីមែល = {\n    ឈ្មោះ: 'វិចិត្រ',\n    អ៊ីមែល: 'vichit@example.com',\n    ប្រធានបទ: 'ការបញ្ជាក់គណនី',\n    សារ: 'សូមចុចលើតំណភ្ជាប់ខាងក្រោមដើម្បីបញ្ជាក់គណនីរបស់អ្នក។'\n};\n\nlet អ៊ីមែលបង្កើត = បង្កើតអ៊ីមែល(ទិន្នន័យអ៊ីមែល);\nconsole.log('\\nអ៊ីមែលបង្កើត:');\nconsole.log(អ៊ីមែលបង្កើត);\n\n// Debug template\nfunction debug(strings, ...values) {\n    console.log('Debug Info:');\n    strings.forEach((string, i) => {\n        console.log(`String ${i}:`, JSON.stringify(string));\n        if (values[i] !== undefined) {\n            console.log(`Value ${i}:`, values[i], `(${typeof values[i]})`);\n        }\n    });\n    \n    return strings.reduce((result, string, i) => {\n        return result + string + (values[i] || '');\n    }, '');\n}\n\nlet debugResult = debug`Hello ${ឈ្មោះ}, you are ${អាយុ} years old!`;\nconsole.log('\\nDebug Result:', debugResult);",
    "tip": "ប្រើ template literals ដើម្បីបង្កើត strings ស្មុគស្មាញ និង tagged templates សម្រាប់ការដំណើរការពិសេស"
  },
  {
    "id": 73,
    "category": "JavaScript",
    "path": "/javascript/array-methods",
    "title": "មេរៀនទី១៨: Array Methods JavaScript",
    "explanation": "JavaScript Array Methods គឺជាមុខងារដ៏មានអានុភាពសម្រាប់ការដំណើរការទិន្នន័យ។ Methods ទាំងនេះអនុញ្ញាតឱ្យត្រង ផ្លាស់ប្តូរ រកមើល និងគ្រប់គ្រង arrays បានយ៉ាងមានប្រសិទ្ធភាព។",
    "code": "// ទិន្នន័យសម្រាប់ការសាកល្បង\nlet សិស្ស = [\n    { ឈ្មោះ: 'សុខា', អាយុ: 20, ពិន្ទុ: 85, ថ្នាក់: 'A' },\n    { ឈ្មោះ: 'ដារា', អាយុ: 19, ពិន្ទុ: 92, ថ្នាក់: 'A' },\n    { ឈ្មោះ: 'វិចិត្រ', អាយុ: 21, ពិន្ទុ: 78, ថ្នាក់: 'B' },\n    { ឈ្មោះ: 'សុភា', អាយុ: 20, ពិន្ទុ: 96, ថ្នាក់: 'A' },\n    { ឈ្មោះ: 'មករា', អាយុ: 22, ពិន្ទុ: 73, ថ្នាក់: 'B' }\n];\n\nlet លេខ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// forEach - ធ្វើអ្វីមួយជាមួយធាតុនីមួយៗ\nconsole.log('forEach - បង្ហាញឈ្មោះសិស្ស:');\nសិស្ស.forEach((សិស្ស, index) => {\n    console.log(`${index + 1}. ${សិស្ស.ឈ្មោះ}`);\n});\n\n// map - បង្កើត array ថ្មីដោយបំលែងធាតុ\nlet ឈ្មោះសិស្ស = សិស្ស.map(សិស្ស => សិស្ស.ឈ្មោះ);\nconsole.log('\\nmap - ឈ្មោះសិស្ស:', ឈ្មោះសិស្ស);\n\nlet ពិន្ទុភាគរយ = សិស្ស.map(សិស្ស => ({\n    ឈ្មោះ: សិស្ស.ឈ្មោះ,\n    ពិន្ទុភាគរយ: `${សិស្ស.ពិន្ទុ}%`\n}));\nconsole.log('ពិន្ទុភាគរយ:', ពិន្ទុភាគរយ);\n\n// filter - ត្រងធាតុតាមលក្ខខណ្ឌ\nlet សិស្សល្អ = សិស្ស.filter(សិស្ស => សិស្ស.ពិន្ទុ >= 90);\nconsole.log('\\nfilter - សិស្សល្អ (>=90):');\nសិស្សល្អ.forEach(សិស្ស => console.log(`${សិស្ស.ឈ្មោះ}: ${សិស្ស.ពិន្ទុ}`));\n\nlet លេខគូ = លេខ.filter(លេខ => លេខ % 2 === 0);\nconsole.log('លេខគូ:', លេខគូ);\n\n// find - រកធាតុដំបូងដែលត្រូវលក្ខខណ្ឌ\nlet សិស្សពិន្ទុខ្ពស់ = សិស្ស.find(សិស្ស => សិស្ស.ពិន្ទុ > 95);\nconsole.log('\\nfind - សិស្សពិន្ទុខ្ពស់:', សិស្សពិន្ទុខ្ពស់);\n\n// findIndex - រក index នៃធាតុដំបូងដែលត្រូវលក្ខខណ្ឌ\nlet indexសិស្សវិចិត្រ = សិស្ស.findIndex(សិស្ស => សិស្ស.ឈ្មោះ === 'វិចិត្រ');\nconsole.log('findIndex - វិចិត្រនៅ index:', indexសិស្សវិចិត្រ);\n\n// some - ពិនិត្យថាតើមានធាតុណាមួយត្រូវលក្ខខណ្ឌ\nlet មានសិស្សល្អ = សិស្ស.some(សិស្ស => សិស្ស.ពិន្ទុ >= 90);\nconsole.log('\\nsome - មានសិស្សល្អ:', មានសិស្សល្អ);\n\n// every - ពិនិត្យថាតើធាតុទាំងអស់ត្រូវលក្ខខណ្ឌ\nlet សិស្សទាំងអស់ជាប់ = សិស្ស.every(សិស្ស => សិស្ស.ពិន្ទុ >= 60);\nconsole.log('every - សិស្សទាំងអស់ជាប់:', សិស្សទាំងអស់ជាប់);\n\n// reduce - បង្រួបធាតុទាំងអស់ជាតម្លៃតែមួយ\nlet ពិន្ទុសរុប = សិស្ស.reduce((សរុប, សិស្ស) => សរុប + សិស្ស.ពិន្ទុ, 0);\nlet ពិន្ទុមធ្យម = ពិន្ទុសរុប / សិស្ស.length;\nconsole.log('\\nreduce - ពិន្ទុមធ្យម:', ពិន្ទុមធ្យម.toFixed(2));\n\n// ការរាប់តាមថ្នាក់\nlet ចំនួនតាមថ្នាក់ = សិស្ស.reduce((រាប់, សិស្ស) => {\n    រាប់[សិស្ស.ថ្នាក់] = (រាប់[សិស្ស.ថ្នាក់] || 0) + 1;\n    return រាប់;\n}, {});\nconsole.log('ចំនួនសិស្សតាមថ្នាក់:', ចំនួនតាមថ្នាក់);\n\n// sort - រៀបចំ array\nlet សិស្សរៀបតាមពិន្ទុ = [...សិស្ស].sort((a, b) => b.ពិន្ទុ - a.ពិន្ទុ);\nconsole.log('\\nsort - សិស្សរៀបតាមពិន្ទុ (ខ្ពស់ទៅទាប):');\nសិស្សរៀបតាមពិន្ទុ.forEach((សិស្ស, index) => {\n    console.log(`${index + 1}. ${សិស្ស.ឈ្មោះ}: ${សិស្ស.ពិន្ទុ}`);\n});\n\n// រៀបតាមឈ្មោះ\nlet សិស្សរៀបតាមឈ្មោះ = [...សិស្ស].sort((a, b) => a.ឈ្មោះ.localeCompare(b.ឈ្មោះ));\nconsole.log('\\nរៀបតាមឈ្មោះ:', សិស្សរៀបតាមឈ្មោះ.map(s => s.ឈ្មោះ));\n\n// includes - ពិនិត្យថាតើមានធាតុ\nlet ផ្លែឈើ = ['ប៉ោម', 'ចេក', 'ស្វាយ'];\nconsole.log('\\nincludes - មានចេក:', ផ្លែឈើ.includes('ចេក'));\nconsole.log('includes - មានទំពាំងបាយជូរ:', ផ្លែឈើ.includes('ទំពាំងបាយជូរ'));\n\n// indexOf និង lastIndexOf\nlet លេខស្ទួន = [1, 2, 3, 2, 4, 2, 5];\nconsole.log('\\nindexOf - លេខ 2 ដំបូង:', លេខស្ទួន.indexOf(2));\nconsole.log('lastIndexOf - លេខ 2 ចុងក្រោយ:', លេខស្ទួន.lastIndexOf(2));\n\n// slice - កាត់យកផ្នែក\nlet ផ្នែកសិស្ស = សិស្ស.slice(1, 3);\nconsole.log('\\nslice - សិស្ស index 1-2:', ផ្នែកសិស្ស.map(s => s.ឈ្មោះ));\n\n// concat - ភ្ជាប់ arrays\nlet សិស្សថ្មី = [{ ឈ្មោះ: 'កុម្ភៈ', អាយុ: 19, ពិន្ទុ: 88, ថ្នាក់: 'A' }];\nlet សិស្សទាំងអស់ = សិស្ស.concat(សិស្សថ្មី);\nconsole.log('\\nconcat - ចំនួនសិស្សទាំងអស់:', សិស្សទាំងអស់.length);\n\n// join - បំលែងទៅ string\nlet ឈ្មោះភ្ជាប់ = ឈ្មោះសិស្ស.join(', ');\nconsole.log('\\njoin - ឈ្មោះភ្ជាប់:', ឈ្មោះភ្ជាប់);\n\n// reverse - បញ្ច្រាស់លំដាប់\nlet លេខបញ្ច្រាស់ = [...លេខ].reverse();\nconsole.log('\\nreverse - លេខបញ្ច្រាស់:', លេខបញ្ច្រាស់);\n\n// Advanced Array Methods\n\n// flatMap - map + flatten\nlet ពាក្យ = ['Hello World', 'JavaScript Array'];\nlet អក្សរទាំងអស់ = ពាក្យ.flatMap(ពាក្យ => ពាក្យ.split(' '));\nconsole.log('\\nflatMap - ពាក្យដាច់ដោយឡែក:', អក្សរទាំងអស់);\n\n// Array.from - បង្កើត array ពីអ្វីផ្សេង\nlet លេខ១ដល់៥ = Array.from({ length: 5 }, (_, i) => i + 1);\nconsole.log('\\nArray.from - លេខ 1-5:', លេខ១ដល់៥);\n\n// Array.of - បង្កើត array ពីធាតុ\nlet arrayថ្មី = Array.of(1, 2, 3, 'test', true);\nconsole.log('Array.of:', arrayថ្មី);\n\n// Method Chaining - ការភ្ជាប់ methods\nlet លទ្ធផលស្មុគស្មាញ = សិស្ស\n    .filter(សិស្ស => សិស្ស.អាយុ >= 20)  // សិស្សអាយុ >= 20\n    .map(សិស្ស => ({                    // បំលែងទៅ object ថ្មី\n        ឈ្មោះ: សិស្ស.ឈ្មោះ,\n        ពិន្ទុកែប្រែ: សិស្ស.ពិន្ទុ + 5\n    }))\n    .sort((a, b) => b.ពិន្ទុកែប្រែ - a.ពិន្ទុកែប្រែ)  // រៀបតាមពិន្ទុ\n    .slice(0, 3);                      // យកតែ 3 នាក់ដំបូង\n\nconsole.log('\\nMethod chaining - Top 3 សិស្សអាយុ >= 20:');\nលទ្ធផលស្មុគស្មាញ.forEach((សិស្ស, index) => {\n    console.log(`${index + 1}. ${សិស្ស.ឈ្មោះ}: ${សិស្ស.ពិន្ទុកែប្រែ}`);\n});\n\n// Practical Examples\n\n// 1. ការគ្រប់គ្រងបញ្ជីទិញ\nlet បញ្ជីទិញ = [\n    { ឈ្មោះ: 'ទូរស័ព្ទ', តម្លៃ: 500, ចំនួន: 1 },\n    { ឈ្មោះ: 'កុំព្យូទ័រ', តម្លៃ: 1200, ចំនួន: 1 },\n    { ឈ្មោះ: 'កាស', តម្លៃ: 50, ចំនួន: 2 }\n];\n\nlet តម្លៃសរុប = បញ្ជីទិញ.reduce((សរុប, ទំនិញ) => {\n    return សរុប + (ទំនិញ.តម្លៃ * ទំនិញ.ចំនួន);\n}, 0);\n\nconsole.log('\\nបញ្ជីទិញ - តម្លៃសរុប: $' + តម្លៃសរុប);\n\n// 2. ការវិភាគទិន្នន័យ\nlet ស្ថិតិសិស្ស = {\n    ចំនួនសរុប: សិស្ស.length,\n    ពិន្ទុខ្ពស់បំផុត: Math.max(...សិស្ស.map(s => s.ពិន្ទុ)),\n    ពិន្ទុទាបបំផុត: Math.min(...សិស្ស.map(s => s.ពិន្ទុ)),\n    ពិន្ទុមធ្យម: (សិស្ស.reduce((sum, s) => sum + s.ពិន្ទុ, 0) / សិស្ស.length).toFixed(2),\n    ចំនួនជាប់: សិស្ស.filter(s => s.ពិន្ទុ >= 60).length\n};\n\nconsole.log('\\nស្ថិតិសិស្ស:', ស្ថិតិសិស្ស);\n\n// 3. ការបង្កើត utility functions\nconst ArrayHelper = {\n    groupBy: (array, key) => {\n        return array.reduce((groups, item) => {\n            const group = item[key];\n            groups[group] = groups[group] || [];\n            groups[group].push(item);\n            return groups;\n        }, {});\n    },\n    \n    unique: (array, key) => {\n        if (key) {\n            return array.filter((item, index, self) => \n                index === self.findIndex(t => t[key] === item[key])\n            );\n        }\n        return [...new Set(array)];\n    },\n    \n    chunk: (array, size) => {\n        return Array.from({ length: Math.ceil(array.length / size) }, (_, i) =>\n            array.slice(i * size, i * size + size)\n        );\n    }\n};\n\n// ការប្រើ utility functions\nlet សិស្សតាមថ្នាក់ = ArrayHelper.groupBy(សិស្ស, 'ថ្នាក់');\nconsole.log('\\nសិស្សតាមថ្នាក់:', សិស្សតាមថ្នាក់);\n\nlet លេខគ្មានស្ទួន = ArrayHelper.unique([1, 2, 2, 3, 3, 4, 5]);\nconsole.log('លេខគ្មានស្ទួន:', លេខគ្មានស្ទួន);\n\nlet ក្រុមលេខ = ArrayHelper.chunk([1, 2, 3, 4, 5, 6, 7, 8], 3);\nconsole.log('ក្រុមលេខ:', ក្រុមលេខ);",
    "tip": "ប្រើ method chaining ដើម្បីធ្វើការដំណើរការទិន្នន័យស្មុគស្មាញ និងចងចាំថា methods ខ្លះផ្លាស់ប្តូរ array ដើម ខ្លះបង្កើត array ថ្មី"
  },
  {
    "id": 74,
    "category": "JavaScript",
    "path": "/javascript/json",
    "title": "មេរៀនទី១៩: JSON JavaScript",
    "explanation": "JSON (JavaScript Object Notation) គឺជាទម្រង់ទិន្នន័យដែលងាយអាន និងសរសេរ។ វាត្រូវបានប្រើយ៉ាងទូលំទូលាយសម្រាប់ការផ្លាស់ប្តូរទិន្នន័យរវាង server និង client។",
    "code": "// JSON មូលដ្ឋាន\n// JSON គឺជា string ដែលមានទម្រង់ជាក់លាក់\nlet jsonString = '{\n    \"ឈ្មោះ\": \"សុខា\",\n    \"អាយុ\": 25,\n    \"ទីក្រុង\": \"ភ្នំពេញ\",\n    \"មានការងារ\": true,\n    \"ចំណាប់អារម្មណ៍\": [\"អាន\", \"កីឡា\", \"ភ្នាល់\"],\n    \"អាសយដ្ឋាន\": {\n        \"ផ្លូវ\": \"ផ្លូវ២៧១\",\n        \"សង្កាត់\": \"ទួលទំពូង\"\n    }\n}';\n\nconsole.log('JSON String:');\nconsole.log(jsonString);\n\n// JSON.parse() - បំលែង JSON string ទៅ JavaScript object\ntry {\n    let មនុស្ស = JSON.parse(jsonString);\n    console.log('\\nបន្ទាប់ពី parse:');\n    console.log('ឈ្មោះ:', មនុស្ស.ឈ្មោះ);\n    console.log('អាយុ:', មនុស្ស.អាយុ);\n    console.log('ចំណាប់អារម្មណ៍:', មនុស្ស.ចំណាប់អារម្មណ៍);\n    console.log('ផ្លូវ:', មនុស្ស.អាសយដ្ឋាន.ផ្លូវ);\n} catch (កំហុស) {\n    console.error('កំហុសក្នុងការ parse JSON:', កំហុស.message);\n}\n\n// JSON.stringify() - បំលែង JavaScript object ទៅ JSON string\nlet សិស្ស = {\n    ឈ្មោះ: 'ដារា',\n    អាយុ: 20,\n    ថ្នាក់: 'ទី១២',\n    ពិន្ទុ: {\n        គណិតវិទ្យា: 85,\n        រូបវិទ្យា: 92,\n        គីមីវិទ្យា: 78\n    },\n    សកម្មភាព: ['ក្លឹបវិទ្យាសាស្ត្រ', 'ក្រុមតន្ត្រី'],\n    កាលបរិច្ឆេទចុះឈ្មោះ: new Date('2024-01-15')\n};\n\nlet សិស្សJSON = JSON.stringify(សិស្ស);\nconsole.log('\\nសិស្ស JSON:');\nconsole.log(សិស្សJSON);\n\n// JSON.stringify() ជាមួយ parameters\n// Parameter 2: replacer function ឬ array\n// Parameter 3: space សម្រាប់ formatting\n\n// ជាមួយ replacer function\nlet jsonជាមួយ Replacer = JSON.stringify(សិស្ស, function(key, value) {\n    if (key === 'អាយុ') {\n        return undefined; // លាក់ property នេះ\n    }\n    if (typeof value === 'string') {\n        return value.toUpperCase(); // ធ្វើឱ្យ string ជាអក្សរធំ\n    }\n    return value;\n});\n\nconsole.log('\\nJSON ជាមួយ replacer:');\nconsole.log(jsonជាមួយ Replacer);\n\n// ជាមួយ array replacer (យកតែ properties ដែលបញ្ជាក់)\nlet jsonជាមួយ ArrayReplacer = JSON.stringify(សិស្ស, ['ឈ្មោះ', 'ថ្នាក់', 'ពិន្ទុ']);\nconsole.log('\\nJSON ជាមួយ array replacer:');\nconsole.log(jsonជាមួយ ArrayReplacer);\n\n// ជាមួយ space parameter (pretty printing)\nlet jsonស្អាត = JSON.stringify(សិស្ស, null, 2);\nconsole.log('\\nJSON ស្អាត:');\nconsole.log(jsonស្អាត);\n\n// toJSON() method - custom serialization\nclass មនុស្សពិសេស {\n    constructor(ឈ្មោះ, អាយុ, ពាក្យសម្ងាត់) {\n        this.ឈ្មោះ = ឈ្មោះ;\n        this.អាយុ = អាយុ;\n        this.ពាក្យសម្ងាត់ = ពាក្យសម្ងាត់; // sensitive data\n    }\n    \n    // Custom JSON serialization\n    toJSON() {\n        return {\n            ឈ្មោះ: this.ឈ្មោះ,\n            អាយុ: this.អាយុ,\n            // មិនរួមបញ្ចូលពាក្យសម្ងាត់\n            serializedAt: new Date().toISOString()\n        };\n    }\n}\n\nlet មនុស្សថ្មី = new មនុស្សពិសេស('វិចិត្រ', 28, 'secret123');\nlet jsonមនុស្សថ្មី = JSON.stringify(មនុស្សថ្មី);\nconsole.log('\\nJSON ជាមួយ toJSON():');\nconsole.log(jsonមនុស្សថ្មី);\n\n// ការគ្រប់គ្រងកំហុស JSON\nfunction parseJSONSafely(jsonString) {\n    try {\n        return {\n            success: true,\n            data: JSON.parse(jsonString)\n        };\n    } catch (កំហុស) {\n        return {\n            success: false,\n            error: កំហុស.message\n        };\n    }\n}\n\n// JSON ត្រឹមត្រូវ\nlet លទ្ធផលត្រឹមត្រូវ = parseJSONSafely('{\"ឈ្មោះ\": \"តេស្ត\"}');\nconsole.log('\\nJSON ត្រឹមត្រូវ:', លទ្ធផលត្រឹមត្រូវ);\n\n// JSON មិនត្រឹមត្រូវ\nlet លទ្ធផលមិនត្រឹមត្រូវ = parseJSONSafely('{ឈ្មោះ: \"តេស្ត\"}'); // missing quotes\nconsole.log('JSON មិនត្រឹមត្រូវ:', លទ្ធផលមិនត្រឹមត្រូវ);\n\n// Deep Clone ដោយប្រើ JSON\nfunction deepClone(obj) {\n    try {\n        return JSON.parse(JSON.stringify(obj));\n    } catch (កំហុស) {\n        console.error('មិនអាច clone:', កំហុស.message);\n        return null;\n    }\n}\n\nlet វត្ថុដើម = {\n    ឈ្មោះ: 'សុភា',\n    ព័ត៌មាន: {\n        អាយុ: 22,\n        ទីក្រុង: 'បាត់ដំបង'\n    },\n    ចំណាប់អារម្មណ៍: ['អាន', 'ដើរលេង']\n};\n\nlet វត្ថុចម្លង = deepClone(វត្ថុដើម);\nវត្ថុចម្លង.ឈ្មោះ = 'កុម្ភៈ';\nវត្ថុចម្លង.ព័ត៌មាន.អាយុ = 23;\n\nconsole.log('\\nDeep Clone:');\nconsole.log('វត្ថុដើម:', វត្ថុដើម);\nconsole.log('វត្ថុចម្លង:', វត្ថុចម្លង);\n\n// JSON ជាមួយ Local Storage\nfunction រក្សាទុកក្នុង LocalStorage(key, data) {\n    try {\n        localStorage.setItem(key, JSON.stringify(data));\n        return true;\n    } catch (កំហុស) {\n        console.error('មិនអាចរក្សាទុក:', កំហុស.message);\n        return false;\n    }\n}\n\nfunction ទាញយកពី LocalStorage(key) {\n    try {\n        let data = localStorage.getItem(key);\n        return data ? JSON.parse(data) : null;\n    } catch (កំហុស) {\n        console.error('មិនអាចទាញយក:', កំហុស.message);\n        return null;\n    }\n}\n\n// ការប្រើ Local Storage\nlet ការកំណត់អ្នកប្រើ = {\n    ភាសា: 'ខ្មែរ',\n    ធីម: 'ងងឹត',\n    ការជូនដំណឹង: true\n};\n\nរក្សាទុកក្នុង LocalStorage('userSettings', ការកំណត់អ្នកប្រើ);\nlet ការកំណត់ដែលបានរក្សាទុក = ទាញយកពី LocalStorage('userSettings');\nconsole.log('\\nការកំណត់ពី Local Storage:', ការកំណត់ដែលបានរក្សាទុក);\n\n// JSON Schema Validation (សាមញ្ញ)\nfunction validateUser(userData) {\n    let errors = [];\n    \n    if (!userData.ឈ្មោះ || typeof userData.ឈ្មោះ !== 'string') {\n        errors.push('ឈ្មោះត្រូវតែជា string');\n    }\n    \n    if (!userData.អាយុ || typeof userData.អាយុ !== 'number' || userData.អាយុ < 0) {\n        errors.push('អាយុត្រូវតែជាលេខវិជ្ជមាន');\n    }\n    \n    if (userData.អ៊ីមែល && !userData.អ៊ីមែល.includes('@')) {\n        errors.push('អ៊ីមែលមិនត្រឹមត្រូវ');\n    }\n    \n    return {\n        valid: errors.length === 0,\n        errors: errors\n    };\n}\n\n// ការសាកល្បង validation\nlet អ្នកប្រើត្រឹមត្រូវ = { ឈ្មោះ: 'ពិសាខ', អាយុ: 25, អ៊ីមែល: 'pisach@example.com' };\nlet អ្នកប្រើមិនត្រឹមត្រូវ = { ឈ្មោះ: '', អាយុ: -5, អ៊ីមែល: 'invalid-email' };\n\nconsole.log('\\nValidation ត្រឹមត្រូវ:', validateUser(អ្នកប្រើត្រឹមត្រូវ));\nconsole.log('Validation មិនត្រឹមត្រូវ:', validateUser(អ្នកប្រើមិនត្រឹមត្រូវ));\n\n// API Response Handler\nclass APIHandler {\n    static async fetchData(url) {\n        try {\n            // ក្លែងធ្វើ API call\n            let mockResponse = {\n                status: 200,\n                data: {\n                    users: [\n                        { id: 1, ឈ្មោះ: 'អ្នកប្រើ១', active: true },\n                        { id: 2, ឈ្មោះ: 'អ្នកប្រើ២', active: false }\n                    ],\n                    meta: {\n                        total: 2,\n                        page: 1\n                    }\n                }\n            };\n            \n            // បំលែងទៅ JSON string ហើយ parse ត្រលប់\n            let jsonString = JSON.stringify(mockResponse);\n            return JSON.parse(jsonString);\n            \n        } catch (កំហុស) {\n            throw new Error('API Error: ' + កំហុស.message);\n        }\n    }\n    \n    static processResponse(response) {\n        if (response.status === 200) {\n            return {\n                success: true,\n                users: response.data.users,\n                totalUsers: response.data.meta.total\n            };\n        } else {\n            return {\n                success: false,\n                error: 'API request failed'\n            };\n        }\n    }\n}\n\n// ការប្រើ API Handler\nAPIHandler.fetchData('/api/users')\n    .then(response => {\n        let result = APIHandler.processResponse(response);\n        console.log('\\nAPI Response:', result);\n    })\n    .catch(កំហុស => {\n        console.error('API Error:', កំហុស.message);\n    });\n\n// JSON Utilities\nconst JSONUtils = {\n    // ប្រៀបធៀប JSON objects\n    isEqual: (obj1, obj2) => {\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\n    },\n    \n    // រកភាពខុសគ្នា\n    diff: (obj1, obj2) => {\n        let diff = {};\n        for (let key in obj1) {\n            if (obj1[key] !== obj2[key]) {\n                diff[key] = { old: obj1[key], new: obj2[key] };\n            }\n        }\n        return diff;\n    },\n    \n    // Flatten nested object\n    flatten: (obj, prefix = '') => {\n        let flattened = {};\n        for (let key in obj) {\n            let newKey = prefix ? `${prefix}.${key}` : key;\n            if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {\n                Object.assign(flattened, JSONUtils.flatten(obj[key], newKey));\n            } else {\n                flattened[newKey] = obj[key];\n            }\n        }\n        return flattened;\n    }\n};\n\n// ការប្រើ JSON Utilities\nlet obj1 = { ឈ្មោះ: 'តេស្ត', អាយុ: 25 };\nlet obj2 = { ឈ្មោះ: 'តេស្ត', អាយុ: 26 };\n\nconsole.log('\\nJSON Utils:');\nconsole.log('Objects ស្មើគ្នា:', JSONUtils.isEqual(obj1, obj2));\nconsole.log('ភាពខុសគ្នា:', JSONUtils.diff(obj1, obj2));\n\nlet nestedObj = {\n    អ្នកប្រើ: {\n        ឈ្មោះ: 'តេស្ត',\n        ព័ត៌មាន: {\n            អាយុ: 25,\n            ទីក្រុង: 'ភ្នំពេញ'\n        }\n    }\n};\n\nconsole.log('Flattened object:', JSONUtils.flatten(nestedObj));",
    "tip": "ប្រើ JSON.parse() និង JSON.stringify() ដើម្បីបំលែងរវាង JSON និង JavaScript objects ហើយចងចាំថា JSON មិនគាំទ្រ functions, undefined, ឬ comments"
  },
  {
    "id": 75,
    "category": "JavaScript",
    "path": "/javascript/regular-expressions",
    "title": "មេរៀនទី២០: Regular Expressions JavaScript",
    "explanation": "Regular Expressions (RegEx) គឺជាឧបករណ៍មានអានុភាពសម្រាប់ការស្វែងរក ត្រួតពិនិត្យ និងជំនួសអត្ថបទ។ វាប្រើ pattern ពិសេសដើម្បីរកអត្ថបទដែលត្រូវលក្ខខណ្ឌ។",
    "code": "// បង្កើត Regular Expressions\n// វិធីទី១: RegExp constructor\nlet regex1 = new RegExp('hello', 'i'); // 'i' = case insensitive\n\n// វិធីទី២: Literal notation (ប្រើញឹកញាប់)\nlet regex2 = /hello/i;\n\nconsole.log('RegExp ពីរវិធី:');\nconsole.log('regex1:', regex1);\nconsole.log('regex2:', regex2);\n\n// Flags (ទង់)\n// i = case insensitive\n// g = global (រកទាំងអស់)\n// m = multiline\n// s = dotall\n// u = unicode\n// y = sticky\n\n// Basic Pattern Matching\nlet អត្ថបទ = 'សួស្តី JavaScript! JavaScript គឺល្អណាស់។';\n\n// test() - ពិនិត្យថាតើមាន pattern\nlet មាន JS = /JavaScript/;\nconsole.log('\\nមាន \"JavaScript\":', មាន JS.test(អត្ថបទ));\n\n// match() - រក matches\nlet matches = អត្ថបទ.match(/JavaScript/g);\nconsole.log('រកឃើញ \"JavaScript\":', matches);\n\n// search() - រក index នៃ match ដំបូង\nlet index = អត្ថបទ.search(/JavaScript/);\nconsole.log('Index ដំបូង:', index);\n\n// replace() - ជំនួសអត្ថបទ\nlet អត្ថបទថ្មី = អត្ថបទ.replace(/JavaScript/g, 'JS');\nconsole.log('បន្ទាប់ពីជំនួស:', អត្ថបទថ្មី);\n\n// Character Classes\nconsole.log('\\n=== Character Classes ===');\n\nlet អត្ថបទសាកល្បង = 'abc123XYZ!@#';\n\n// \\d = digits (0-9)\nlet លេខ = អត្ថបទសាកល្បង.match(/\\d/g);\nconsole.log('លេខ:', លេខ);\n\n// \\w = word characters (a-z, A-Z, 0-9, _)\nlet តួអក្សរពាក្យ = អត្ថបទសាកល្បង.match(/\\w/g);\nconsole.log('តួអក្សរពាក្យ:', តួអក្សរពាក្យ);\n\n// \\s = whitespace\nlet អត្ថបទមានដកឃ្លា = 'hello world test';\nlet ដកឃ្លា = អត្ថបទមានដកឃ្លា.match(/\\s/g);\nconsole.log('ដកឃ្លា:', ដកឃ្លា);\n\n// [abc] = character set\nlet vowels = 'hello world'.match(/[aeiou]/g);\nconsole.log('Vowels:', vowels);\n\n// [a-z] = range\nlet អក្សរតូច = 'Hello World 123'.match(/[a-z]/g);\nconsole.log('អក្សរតូច:', អក្សរតូច);\n\n// [^abc] = negated set\nlet មិនមែន Vowels = 'hello'.match(/[^aeiou]/g);\nconsole.log('មិនមែន vowels:', មិនមែន Vowels);\n\n// Quantifiers\nconsole.log('\\n=== Quantifiers ===');\n\n// * = 0 or more\nlet zeroOrMore = 'aaa bb cccc'.match(/a*/g);\nconsole.log('a* (0 ឬច្រើន):', zeroOrMore);\n\n// + = 1 or more\nlet oneOrMore = 'aaa bb cccc'.match(/a+/g);\nconsole.log('a+ (1 ឬច្រើន):', oneOrMore);\n\n// ? = 0 or 1\nlet zeroOrOne = 'color colour'.match(/colou?r/g);\nconsole.log('colou?r:', zeroOrOne);\n\n// {n} = exactly n\nlet exactlyThree = 'aa aaa aaaa'.match(/a{3}/g);\nconsole.log('a{3} (ត្រឹម 3):', exactlyThree);\n\n// {n,m} = between n and m\nlet betweenTwoFour = 'a aa aaa aaaa aaaaa'.match(/a{2,4}/g);\nconsole.log('a{2,4} (2-4):', betweenTwoFour);\n\n// Anchors\nconsole.log('\\n=== Anchors ===');\n\nlet បន្ទាត់ = ['hello world', 'world hello', 'hello', 'world'];\n\n// ^ = start of string\nlet ចាប់ផ្តើមដោយ Hello = បន្ទាត់.filter(line => /^hello/.test(line));\nconsole.log('ចាប់ផ្តើមដោយ \"hello\":', ចាប់ផ្តើមដោយ Hello);\n\n// $ = end of string\nlet បញ្ចប់ដោយ World = បន្ទាត់.filter(line => /world$/.test(line));\nconsole.log('បញ្ចប់ដោយ \"world\":', បញ្ចប់ដោយ World);\n\n// \\b = word boundary\nlet ពាក្យពេញលេញ = 'hello helloworld worldhello'.match(/\\bhello\\b/g);\nconsole.log('ពាក្យ \"hello\" ពេញលេញ:', ពាក្យពេញលេញ);\n\n// Groups and Capturing\nconsole.log('\\n=== Groups ===');\n\n// () = capturing group\nlet កាលបរិច្ឆេទ = '2024-01-15';\nlet dateMatch = កាលបរិច្ឆេទ.match(/(\\d{4})-(\\d{2})-(\\d{2})/);\nif (dateMatch) {\n    console.log('កាលបរិច្ឆេទពេញលេញ:', dateMatch[0]);\n    console.log('ឆ្នាំ:', dateMatch[1]);\n    console.log('ខែ:', dateMatch[2]);\n    console.log('ថ្ងៃ:', dateMatch[3]);\n}\n\n// (?:) = non-capturing group\nlet nonCapturing = 'hello world'.match(/(?:hello|hi) (world)/);\nconsole.log('Non-capturing group:', nonCapturing);\n\n// Named groups (?<name>)\nlet namedGroups = កាលបរិច្ឆេទ.match(/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/);\nif (namedGroups) {\n    console.log('Named groups:', namedGroups.groups);\n}\n\n// Practical Examples\nconsole.log('\\n=== ឧទាហរណ៍ជាក់ស្តែង ===');\n\n// 1. Email Validation\nfunction ពិនិត្យអ៊ីមែល(email) {\n    let emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);\n}\n\nlet អ៊ីមែលសាកល្បង = ['test@example.com', 'invalid.email', 'user@domain.co.uk'];\nអ៊ីមែលសាកល្បង.forEach(email => {\n    console.log(`${email}: ${ពិនិត្យអ៊ីមែល(email) ? 'ត្រឹមត្រូវ' : 'មិនត្រឹមត្រូវ'}`);\n});\n\n// 2. Phone Number Formatting\nfunction ធ្វើទ្រង់ទ្រាយទូរស័ព្ទ(phone) {\n    // Remove all non-digits\n    let digits = phone.replace(/\\D/g, '');\n    \n    // Format as XXX-XXX-XXXX\n    let match = digits.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n    if (match) {\n        return `${match[1]}-${match[2]}-${match[3]}`;\n    }\n    return phone; // Return original if doesn't match\n}\n\nlet លេខទូរស័ព្ទ = ['1234567890', '(123) 456-7890', '123.456.7890'];\nលេខទូរស័ព្ទ.forEach(phone => {\n    console.log(`${phone} → ${ធ្វើទ្រង់ទ្រាយទូរស័ព្ទ(phone)}`);\n});\n\n// 3. Password Strength\nfunction ពិនិត្យពាក្យសម្ងាត់(password) {\n    let criteria = {\n        length: password.length >= 8,\n        lowercase: /[a-z]/.test(password),\n        uppercase: /[A-Z]/.test(password),\n        number: /\\d/.test(password),\n        special: /[!@#$%^&*(),.?\":{}|<>]/.test(password)\n    };\n    \n    let score = Object.values(criteria).filter(Boolean).length;\n    let strength = ['ខ្សោយណាស់', 'ខ្សោយ', 'មធ្យម', 'ល្អ', 'ខ្លាំង'][score];\n    \n    return { criteria, score, strength };\n}\n\nlet ពាក្យសម្ងាត់សាកល្បង = ['123', 'password', 'Password1', 'P@ssw0rd!'];\nពាក្យសម្ងាត់សាកល្បង.forEach(pwd => {\n    let result = ពិនិត្យពាក្យសម្ងាត់(pwd);\n    console.log(`\"${pwd}\": ${result.strength} (${result.score}/5)`);\n});\n\n// 4. Extract URLs from text\nfunction ទាញយក URLs(text) {\n    let urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/g;\n    return text.match(urlRegex) || [];\n}\n\nlet អត្ថបទមាន URLs = 'Visit https://www.example.com and http://test.org for more info.';\nlet urls = ទាញយក URLs(អត្ថបទមាន URLs);\nconsole.log('\\nURLs រកឃើញ:', urls);\n\n// 5. Clean and format text\nfunction សម្អាតអត្ថបទ(text) {\n    return text\n        .replace(/\\s+/g, ' ')           // Replace multiple spaces with single space\n        .replace(/^\\s+|\\s+$/g, '')      // Trim start and end\n        .replace(/[^\\w\\s]/g, '')        // Remove special characters\n        .toLowerCase();                  // Convert to lowercase\n}\n\nlet អត្ថបទរញ៉េរញ៉ៃ = '  Hello!!!   World???   How are you???  ';\nlet អត្ថបទស្អាត = សម្អាតអត្ថបទ(អត្ថបទរញ៉េរញ៉ៃ);\nconsole.log('\\nមុនសម្អាត:', JSON.stringify(អត្ថបទរញ៉េរញ៉ៃ));\nconsole.log('បន្ទាប់ពីសម្អាត:', JSON.stringify(អត្ថបទស្អាត));\n\n// 6. Highlight search terms\nfunction បន្លិចពាក្យ(text, searchTerm) {\n    let regex = new RegExp(`(${searchTerm})`, 'gi');\n    return text.replace(regex, '<mark>$1</mark>');\n}\n\nlet អត្ថបទដើម = 'JavaScript is great. I love JavaScript programming.';\nlet អត្ថបទបន្លិច = បន្លិចពាក្យ(អត្ថបទដើម, 'JavaScript');\nconsole.log('\\nអត្ថបទបន្លិច:', អត្ថបទបន្លិច);\n\n// 7. Parse CSV data\nfunction parseCSV(csvText) {\n    let lines = csvText.split('\\n');\n    let result = [];\n    \n    // Simple CSV regex (doesn't handle all edge cases)\n    let csvRegex = /,(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n    \n    lines.forEach(line => {\n        if (line.trim()) {\n            let fields = line.split(csvRegex).map(field => \n                field.replace(/^\"|\"$/g, '').trim()\n            );\n            result.push(fields);\n        }\n    });\n    \n    return result;\n}\n\nlet csvData = `ឈ្មោះ,អាយុ,ទីក្រុង\n\"សុខា\",25,\"ភ្នំពេញ\"\n\"ដារា\",30,\"សៀមរាប\"`;\n\nlet parsedCSV = parseCSV(csvData);\nconsole.log('\\nCSV parsed:', parsedCSV);\n\n// RegExp Utility Class\nclass RegExpUtils {\n    static patterns = {\n        email: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n        phone: /^\\+?[1-9]\\d{1,14}$/,\n        url: /^https?:\\/\\/.+/,\n        ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n        creditCard: /^\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}$/,\n        hexColor: /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/\n    };\n    \n    static validate(type, value) {\n        return this.patterns[type] ? this.patterns[type].test(value) : false;\n    }\n    \n    static extract(type, text) {\n        let pattern = this.patterns[type];\n        if (!pattern) return [];\n        \n        let globalPattern = new RegExp(pattern.source, 'g');\n        return text.match(globalPattern) || [];\n    }\n}\n\n// ការប្រើ RegExp Utility\nconsole.log('\\n=== RegExp Utilities ===');\nconsole.log('Email valid:', RegExpUtils.validate('email', 'test@example.com'));\nconsole.log('URL valid:', RegExpUtils.validate('url', 'https://example.com'));\nconsole.log('Hex color valid:', RegExpUtils.validate('hexColor', '#FF5733'));\n\nlet mixedText = 'Contact us at info@company.com or visit https://company.com. Call +1-555-123-4567.';\nconsole.log('Emails found:', RegExpUtils.extract('email', mixedText));\nconsole.log('URLs found:', RegExpUtils.extract('url', mixedText));",
    "tip": "ប្រើ RegExp ដើម្បីធ្វើ pattern matching ស្មុគស្មាញ ប៉ុន្តែកុំប្រើច្រើនពេកដោយសារវាអាចធ្វើឱ្យកូដពិបាកយល់"
  },
  {
    "id": 76,
    "category": "JavaScript",
    "path": "/javascript/local-storage",
    "title": "មេរៀនទី២១: Local Storage JavaScript",
    "explanation": "Local Storage អនុញ្ញាតឱ្យរក្សាទុកទិន្នន័យនៅក្នុងកម្មវិធីរុករករបស់អ្នកប្រើ។ ទិន្នន័យនេះនឹងមានជានិច្ចរហូតដល់អ្នកប្រើលុបវា។ វាមានប្រយោជន៍សម្រាប់រក្សាការកំណត់ និងទិន្នន័យអ្នកប្រើ។",
    "code": "// Local Storage មូលដ្ឋាន\nconsole.log('=== Local Storage មូលដ្ឋាន ===');\n\n// រក្សាទុកទិន្នន័យ\nlocalStorage.setItem('ឈ្មោះអ្នកប្រើ', 'សុខា');\nlocalStorage.setItem('អាយុ', '25');\nlocalStorage.setItem('ភាសា', 'ខ្មែរ');\n\n// ទាញយកទិន្នន័យ\nlet ឈ្មោះ = localStorage.getItem('ឈ្មោះអ្នកប្រើ');\nlet អាយុ = localStorage.getItem('អាយុ');\nlet ភាសា = localStorage.getItem('ភាសា');\n\nconsole.log('ឈ្មោះ:', ឈ្មោះ);\nconsole.log('អាយុ:', អាយុ);\nconsole.log('ភាសា:', ភាសា);\n\n// ពិនិត្យថាតើ key មាន\nif (localStorage.getItem('ឈ្មោះអ្នកប្រើ')) {\n    console.log('មានឈ្មោះអ្នកប្រើក្នុង localStorage');\n}\n\n// លុប item តែមួយ\nlocalStorage.removeItem('អាយុ');\nconsole.log('បន្ទាប់ពីលុបអាយុ:', localStorage.getItem('អាយុ')); // null\n\n// រក្សាទុក Objects និង Arrays\nconsole.log('\\n=== រក្សាទុក Objects/Arrays ===');\n\nlet អ្នកប្រើ = {\n    ឈ្មោះ: 'ដារា',\n    អាយុ: 30,\n    ទីក្រុង: 'សៀមរាប',\n    ចំណាប់អារម្មណ៍: ['អាន', 'កីឡា', 'ភ្នាល់'],\n    ការកំណត់: {\n        ធីម: 'ងងឹត',\n        ការជូនដំណឹង: true\n    }\n};\n\n// រក្សាទុក object (ត្រូវបំលែងទៅ JSON)\nlocalStorage.setItem('ព័ត៌មានអ្នកប្រើ', JSON.stringify(អ្នកប្រើ));\n\n// ទាញយក object (ត្រូវ parse JSON)\nlet អ្នកប្រើដែលបានរក្សាទុក = JSON.parse(localStorage.getItem('ព័ត៌មានអ្នកប្រើ'));\nconsole.log('អ្នកប្រើដែលបានរក្សាទុក:', អ្នកប្រើដែលបានរក្សាទុក);\n\n// Local Storage Helper Class\nclass LocalStorageHelper {\n    // រក្សាទុកដោយស្វ័យប្រវត្តិបំលែងទៅ JSON\n    static set(key, value) {\n        try {\n            localStorage.setItem(key, JSON.stringify(value));\n            return true;\n        } catch (error) {\n            console.error('មិនអាចរក្សាទុក:', error.message);\n            return false;\n        }\n    }\n    \n    // ទាញយកដោយស្វ័យប្រវត្តិ parse JSON\n    static get(key, defaultValue = null) {\n        try {\n            let item = localStorage.getItem(key);\n            return item ? JSON.parse(item) : defaultValue;\n        } catch (error) {\n            console.error('មិនអាចទាញយក:', error.message);\n            return defaultValue;\n        }\n    }\n    \n    // លុប item\n    static remove(key) {\n        localStorage.removeItem(key);\n    }\n    \n    // លុបទាំងអស់\n    static clear() {\n        localStorage.clear();\n    }\n    \n    // ទទួល keys ទាំងអស់\n    static getAllKeys() {\n        return Object.keys(localStorage);\n    }\n    \n    // ទទួលទំហំ localStorage\n    static getSize() {\n        let total = 0;\n        for (let key in localStorage) {\n            if (localStorage.hasOwnProperty(key)) {\n                total += localStorage[key].length + key.length;\n            }\n        }\n        return total;\n    }\n    \n    // ពិនិត្យថាតើមាន key\n    static exists(key) {\n        return localStorage.getItem(key) !== null;\n    }\n}\n\n// ការប្រើ Helper Class\nconsole.log('\\n=== ការប្រើ Helper Class ===');\n\n// រក្សាទុកទិន្នន័យផ្សេងៗ\nLocalStorageHelper.set('ការកំណត់', {\n    ភាសា: 'ខ្មែរ',\n    ធីម: 'ស',\n    ទំហំអក្សរ: 'មធ្យម'\n});\n\nLocalStorageHelper.set('បញ្ជីការងារ', [\n    { id: 1, ចំណងជើង: 'រៀន JavaScript', បានបញ្ចប់: false },\n    { id: 2, ចំណងជើង: 'ធ្វើលំហាត់', បានបញ្ចប់: true },\n    { id: 3, ចំណងជើង: 'អានសៀវភៅ', បានបញ្ចប់: false }\n]);\n\n// ទាញយកទិន្នន័យ\nlet ការកំណត់ = LocalStorageHelper.get('ការកំណត់');\nlet បញ្ជីការងារ = LocalStorageHelper.get('បញ្ជីការងារ', []);\n\nconsole.log('ការកំណត់:', ការកំណត់);\nconsole.log('បញ្ជីការងារ:', បញ្ជីការងារ);\nconsole.log('ទំហំ localStorage:', LocalStorageHelper.getSize(), 'bytes');\nconsole.log('Keys ទាំងអស់:', LocalStorageHelper.getAllKeys());\n\n// Settings Manager\nclass SettingsManager {\n    constructor() {\n        this.key = 'appSettings';\n        this.defaultSettings = {\n            ភាសា: 'ខ្មែរ',\n            ធីម: 'ស',\n            ទំហំអក្សរ: 'មធ្យម',\n            ការជូនដំណឹង: true,\n            សំឡេងបើកបិទ: true,\n            ការរក្សាទុកស្វ័យប្រវត្តិ: false\n        };\n    }\n    \n    // ទទួលការកំណត់ទាំងអស់\n    getSettings() {\n        return LocalStorageHelper.get(this.key, this.defaultSettings);\n    }\n    \n    // កំណត់ការកំណត់តែមួយ\n    setSetting(key, value) {\n        let settings = this.getSettings();\n        settings[key] = value;\n        LocalStorageHelper.set(this.key, settings);\n    }\n    \n    // ទទួលការកំណត់តែមួយ\n    getSetting(key) {\n        let settings = this.getSettings();\n        return settings[key];\n    }\n    \n    // កំណត់ការកំណត់ច្រើន\n    updateSettings(newSettings) {\n        let currentSettings = this.getSettings();\n        let updatedSettings = { ...currentSettings, ...newSettings };\n        LocalStorageHelper.set(this.key, updatedSettings);\n    }\n    \n    // Reset ទៅ default\n    resetSettings() {\n        LocalStorageHelper.set(this.key, this.defaultSettings);\n    }\n    \n    // Export settings\n    exportSettings() {\n        return JSON.stringify(this.getSettings(), null, 2);\n    }\n    \n    // Import settings\n    importSettings(jsonString) {\n        try {\n            let importedSettings = JSON.parse(jsonString);\n            this.updateSettings(importedSettings);\n            return true;\n        } catch (error) {\n            console.error('មិនអាច import settings:', error.message);\n            return false;\n        }\n    }\n}\n\n// ការប្រើ Settings Manager\nconsole.log('\\n=== Settings Manager ===');\n\nlet settingsManager = new SettingsManager();\n\n// ទទួលការកំណត់បច្ចុប្បន្ន\nconsole.log('ការកំណត់បច្ចុប្បន្ន:', settingsManager.getSettings());\n\n// ផ្លាស់ប្តូរការកំណត់\nsettingsManager.setSetting('ធីម', 'ងងឹត');\nsettingsManager.setSetting('ទំហំអក្សរ', 'ធំ');\n\n// ផ្លាស់ប្តូរការកំណត់ច្រើន\nsettingsManager.updateSettings({\n    ការជូនដំណឹង: false,\n    សំឡេងបើកបិទ: false\n});\n\nconsole.log('ការកំណត់បន្ទាប់ពីផ្លាស់ប្តូរ:', settingsManager.getSettings());\n\n// Shopping Cart Manager\nclass ShoppingCartManager {\n    constructor() {\n        this.key = 'shoppingCart';\n    }\n    \n    // ទទួលរទេះទិញ\n    getCart() {\n        return LocalStorageHelper.get(this.key, []);\n    }\n    \n    // បន្ថែមទំនិញ\n    addItem(item) {\n        let cart = this.getCart();\n        let existingItem = cart.find(cartItem => cartItem.id === item.id);\n        \n        if (existingItem) {\n            existingItem.ចំនួន += item.ចំនួន || 1;\n        } else {\n            cart.push({ ...item, ចំនួន: item.ចំនួន || 1 });\n        }\n        \n        LocalStorageHelper.set(this.key, cart);\n    }\n    \n    // លុបទំនិញ\n    removeItem(itemId) {\n        let cart = this.getCart();\n        cart = cart.filter(item => item.id !== itemId);\n        LocalStorageHelper.set(this.key, cart);\n    }\n    \n    // ផ្លាស់ប្តូរចំនួន\n    updateQuantity(itemId, quantity) {\n        let cart = this.getCart();\n        let item = cart.find(cartItem => cartItem.id === itemId);\n        \n        if (item) {\n            if (quantity <= 0) {\n                this.removeItem(itemId);\n            } else {\n                item.ចំនួន = quantity;\n                LocalStorageHelper.set(this.key, cart);\n            }\n        }\n    }\n    \n    // សម្អាតរទេះ\n    clearCart() {\n        LocalStorageHelper.remove(this.key);\n    }\n    \n    // គណនាតម្លៃសរុប\n    getTotal() {\n        let cart = this.getCart();\n        return cart.reduce((total, item) => total + (item.តម្លៃ * item.ចំនួន), 0);\n    }\n    \n    // ទទួលចំនួនទំនិញ\n    getItemCount() {\n        let cart = this.getCart();\n        return cart.reduce((count, item) => count + item.ចំនួន, 0);\n    }\n}\n\n// ការប្រើ Shopping Cart\nconsole.log('\\n=== Shopping Cart ===');\n\nlet cart = new ShoppingCartManager();\n\n// បន្ថែមទំនិញ\ncart.addItem({ id: 1, ឈ្មោះ: 'ទូរស័ព្ទ', តម្លៃ: 500, ចំនួន: 1 });\ncart.addItem({ id: 2, ឈ្មោះ: 'កុំព្យូទ័រ', តម្លៃ: 1200, ចំនួន: 1 });\ncart.addItem({ id: 1, ឈ្មោះ: 'ទូរស័ព្ទ', តម្លៃ: 500, ចំនួន: 1 }); // បន្ថែមចំនួន\n\nconsole.log('រទេះទិញ:', cart.getCart());\nconsole.log('តម្លៃសរុប: $' + cart.getTotal());\nconsole.log('ចំនួនទំនិញ:', cart.getItemCount());\n\n// Data Persistence Manager\nclass DataPersistenceManager {\n    constructor(appName) {\n        this.prefix = appName + '_';\n    }\n    \n    // រក្សាទុកជាមួយ expiration\n    setWithExpiry(key, value, ttl) {\n        let now = new Date();\n        let item = {\n            value: value,\n            expiry: now.getTime() + ttl\n        };\n        LocalStorageHelper.set(this.prefix + key, item);\n    }\n    \n    // ទាញយកជាមួយការពិនិត្យ expiration\n    getWithExpiry(key) {\n        let item = LocalStorageHelper.get(this.prefix + key);\n        \n        if (!item) {\n            return null;\n        }\n        \n        let now = new Date();\n        if (now.getTime() > item.expiry) {\n            LocalStorageHelper.remove(this.prefix + key);\n            return null;\n        }\n        \n        return item.value;\n    }\n    \n    // រក្សាទុកជាមួយ version\n    setVersioned(key, value, version = 1) {\n        let versionedData = {\n            version: version,\n            data: value,\n            timestamp: new Date().toISOString()\n        };\n        LocalStorageHelper.set(this.prefix + key, versionedData);\n    }\n    \n    // ទាញយកជាមួយការពិនិត្យ version\n    getVersioned(key, expectedVersion) {\n        let item = LocalStorageHelper.get(this.prefix + key);\n        \n        if (!item || item.version !== expectedVersion) {\n            return null;\n        }\n        \n        return item.data;\n    }\n    \n    // Backup data\n    backup() {\n        let backup = {};\n        let keys = LocalStorageHelper.getAllKeys();\n        \n        keys.forEach(key => {\n            if (key.startsWith(this.prefix)) {\n                backup[key] = LocalStorageHelper.get(key);\n            }\n        });\n        \n        return JSON.stringify(backup);\n    }\n    \n    // Restore data\n    restore(backupString) {\n        try {\n            let backup = JSON.parse(backupString);\n            \n            Object.keys(backup).forEach(key => {\n                LocalStorageHelper.set(key, backup[key]);\n            });\n            \n            return true;\n        } catch (error) {\n            console.error('មិនអាច restore:', error.message);\n            return false;\n        }\n    }\n}\n\n// ការប្រើ Data Persistence Manager\nconsole.log('\\n=== Data Persistence Manager ===');\n\nlet dataManager = new DataPersistenceManager('MyApp');\n\n// រក្សាទុកជាមួយ expiration (5 វិនាទី)\ndataManager.setWithExpiry('tempData', { message: 'នេះនឹងផុតកំណត់' }, 5000);\n\n// រក្សាទុកជាមួយ version\ndataManager.setVersioned('userData', { ឈ្មោះ: 'តេស្ត', អាយុ: 25 }, 1);\n\n// ទាញយកទិន្នន័យ\nconsole.log('Temp data:', dataManager.getWithExpiry('tempData'));\nconsole.log('User data v1:', dataManager.getVersioned('userData', 1));\nconsole.log('User data v2:', dataManager.getVersioned('userData', 2)); // null\n\n// Storage Event Listener\nwindow.addEventListener('storage', function(e) {\n    console.log('Storage changed:', {\n        key: e.key,\n        oldValue: e.oldValue,\n        newValue: e.newValue,\n        url: e.url\n    });\n});\n\n// Storage Quota Management\nfunction checkStorageQuota() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n        navigator.storage.estimate().then(estimate => {\n            console.log('\\n=== Storage Quota ===');\n            console.log('Used:', (estimate.usage / 1024 / 1024).toFixed(2), 'MB');\n            console.log('Available:', (estimate.quota / 1024 / 1024).toFixed(2), 'MB');\n            console.log('Usage percentage:', ((estimate.usage / estimate.quota) * 100).toFixed(2) + '%');\n        });\n    }\n}\n\ncheckStorageQuota();\n\n// Cleanup old data\nfunction cleanupOldData() {\n    let keys = LocalStorageHelper.getAllKeys();\n    let cleaned = 0;\n    \n    keys.forEach(key => {\n        try {\n            let data = LocalStorageHelper.get(key);\n            \n            // លុបទិន្នន័យដែលមាន expiry និងផុតកំណត់\n            if (data && data.expiry && new Date().getTime() > data.expiry) {\n                LocalStorageHelper.remove(key);\n                cleaned++;\n            }\n        } catch (error) {\n            // លុបទិន្នន័យដែល corrupt\n            LocalStorageHelper.remove(key);\n            cleaned++;\n        }\n    });\n    \n    console.log('\\nសម្អាតទិន្នន័យចាស់:', cleaned, 'items');\n}\n\ncleanupOldData();\n\nconsole.log('\\n=== ការបង្ហាញ localStorage ទាំងអស់ ===');\nconsole.log('Keys:', LocalStorageHelper.getAllKeys());\nconsole.log('Size:', LocalStorageHelper.getSize(), 'bytes');",
    "tip": "ប្រើ Local Storage សម្រាប់ទិន្នន័យដែលមិនសំខាន់ និងចងចាំថាវាមានដែនកំណត់ទំហំ (ជាធម្មតា 5-10MB)"
  },
  {
    "id": 77,
    "category": "JavaScript",
    "path": "/javascript/fetch-api",
    "title": "មេរៀនទី២២: Fetch API JavaScript",
    "explanation": "Fetch API គឺជាវិធីទំនើបសម្រាប់ធ្វើ HTTP requests ក្នុង JavaScript។ វាប្រើ Promises និងផ្តល់នូវ interface ស្អាតជាង XMLHttpRequest។ Fetch អាចប្រើសម្រាប់ទាញយកទិន្នន័យពី APIs។",
    "code": "// Fetch API មូលដ្ឋាន\nconsole.log('=== Fetch API មូលដ្ឋាន ===');\n\n// GET Request សាមញ្ញ\nasync function ទាញយកទិន្នន័យមូលដ្ឋាន() {\n    try {\n        console.log('កំពុងទាញយកទិន្នន័យ...');\n        \n        // ក្លែងធ្វើ API call ជាមួយ JSONPlaceholder\n        let response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n        \n        // ពិនិត្យ response status\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        let data = await response.json();\n        console.log('ទិន្នន័យដែលបានទទួល:', data);\n        \n        return data;\n    } catch (error) {\n        console.error('កំហុសក្នុងការទាញយក:', error.message);\n        throw error;\n    }\n}\n\n// ហៅមុខងារ\nទាញយកទិន្នន័យមូលដ្ឋាន();\n\n// POST Request\nasync function ផ្ញើទិន្នន័យ(postData) {\n    try {\n        console.log('\\nកំពុងផ្ញើទិន្នន័យ:', postData);\n        \n        let response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer your-token-here'\n            },\n            body: JSON.stringify(postData)\n        });\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        let result = await response.json();\n        console.log('លទ្ធផលពី server:', result);\n        \n        return result;\n    } catch (error) {\n        console.error('កំហុសក្នុងការផ្ញើ:', error.message);\n        throw error;\n    }\n}\n\n// ការប្រើ POST\nlet ទិន្នន័យថ្មី = {\n    title: 'ប្រកាសថ្មី',\n    body: 'នេះគឺជាមាតិកានៃប្រកាសថ្មី',\n    userId: 1\n};\n\nផ្ញើទិន្នន័យ(ទិន្នន័យថ្មី);\n\n// HTTP Methods ផ្សេងៗ\nclass APIClient {\n    constructor(baseURL) {\n        this.baseURL = baseURL;\n        this.defaultHeaders = {\n            'Content-Type': 'application/json'\n        };\n    }\n    \n    // Helper method សម្រាប់ធ្វើ request\n    async request(endpoint, options = {}) {\n        let url = this.baseURL + endpoint;\n        \n        let config = {\n            headers: { ...this.defaultHeaders, ...options.headers },\n            ...options\n        };\n        \n        try {\n            console.log(`${config.method || 'GET'} ${url}`);\n            \n            let response = await fetch(url, config);\n            \n            // ពិនិត្យ response status\n            if (!response.ok) {\n                let errorData;\n                try {\n                    errorData = await response.json();\n                } catch {\n                    errorData = { message: response.statusText };\n                }\n                throw new Error(`HTTP ${response.status}: ${errorData.message || response.statusText}`);\n            }\n            \n            // ពិនិត្យ content type\n            let contentType = response.headers.get('content-type');\n            if (contentType && contentType.includes('application/json')) {\n                return await response.json();\n            } else {\n                return await response.text();\n            }\n            \n        } catch (error) {\n            console.error('API Error:', error.message);\n            throw error;\n        }\n    }\n    \n    // GET request\n    async get(endpoint, params = {}) {\n        let url = endpoint;\n        \n        // បន្ថែម query parameters\n        if (Object.keys(params).length > 0) {\n            let searchParams = new URLSearchParams(params);\n            url += '?' + searchParams.toString();\n        }\n        \n        return this.request(url, { method: 'GET' });\n    }\n    \n    // POST request\n    async post(endpoint, data) {\n        return this.request(endpoint, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        });\n    }\n    \n    // PUT request\n    async put(endpoint, data) {\n        return this.request(endpoint, {\n            method: 'PUT',\n            body: JSON.stringify(data)\n        });\n    }\n    \n    // PATCH request\n    async patch(endpoint, data) {\n        return this.request(endpoint, {\n            method: 'PATCH',\n            body: JSON.stringify(data)\n        });\n    }\n    \n    // DELETE request\n    async delete(endpoint) {\n        return this.request(endpoint, { method: 'DELETE' });\n    }\n    \n    // កំណត់ authentication token\n    setAuthToken(token) {\n        this.defaultHeaders['Authorization'] = `Bearer ${token}`;\n    }\n    \n    // លុប authentication token\n    clearAuthToken() {\n        delete this.defaultHeaders['Authorization'];\n    }\n}\n\n// ការប្រើ API Client\nconsole.log('\\n=== API Client ===');\n\nlet api = new APIClient('https://jsonplaceholder.typicode.com');\n\n// GET ជាមួយ parameters\nasync function ទាញយកប្រកាស() {\n    try {\n        let posts = await api.get('/posts', { userId: 1, _limit: 3 });\n        console.log('ប្រកាសរបស់អ្នកប្រើ 1:', posts);\n    } catch (error) {\n        console.error('មិនអាចទាញយកប្រកាស:', error.message);\n    }\n}\n\nទាញយកប្រកាស();\n\n// PUT request\nasync function កែប្រែប្រកាស() {\n    try {\n        let updatedPost = await api.put('/posts/1', {\n            id: 1,\n            title: 'ចំណងជើងដែលបានកែប្រែ',\n            body: 'មាតិកាដែលបានកែប្រែ',\n            userId: 1\n        });\n        console.log('\\nប្រកាសដែលបានកែប្រែ:', updatedPost);\n    } catch (error) {\n        console.error('មិនអាចកែប្រែប្រកាស:', error.message);\n    }\n}\n\nកែប្រែប្រកាស();\n\n// File Upload\nasync function ផ្ទុកឯកសារ(file) {\n    try {\n        let formData = new FormData();\n        formData.append('file', file);\n        formData.append('description', 'ការពិពណ៌នាឯកសារ');\n        \n        let response = await fetch('/api/upload', {\n            method: 'POST',\n            body: formData // កុំកំណត់ Content-Type header សម្រាប់ FormData\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Upload failed: ${response.status}`);\n        }\n        \n        let result = await response.json();\n        console.log('ឯកសារបានផ្ទុកជោគជ័យ:', result);\n        \n        return result;\n    } catch (error) {\n        console.error('កំហុសក្នុងការផ្ទុកឯកសារ:', error.message);\n        throw error;\n    }\n}\n\n// Request Interceptor\nclass APIClientWithInterceptors extends APIClient {\n    constructor(baseURL) {\n        super(baseURL);\n        this.requestInterceptors = [];\n        this.responseInterceptors = [];\n    }\n    \n    // បន្ថែម request interceptor\n    addRequestInterceptor(interceptor) {\n        this.requestInterceptors.push(interceptor);\n    }\n    \n    // បន្ថែម response interceptor\n    addResponseInterceptor(interceptor) {\n        this.responseInterceptors.push(interceptor);\n    }\n    \n    async request(endpoint, options = {}) {\n        // ដំណើរការ request interceptors\n        for (let interceptor of this.requestInterceptors) {\n            options = await interceptor(options);\n        }\n        \n        try {\n            let response = await super.request(endpoint, options);\n            \n            // ដំណើរការ response interceptors\n            for (let interceptor of this.responseInterceptors) {\n                response = await interceptor(response);\n            }\n            \n            return response;\n        } catch (error) {\n            // ដំណើរការ error interceptors\n            for (let interceptor of this.responseInterceptors) {\n                if (interceptor.onError) {\n                    await interceptor.onError(error);\n                }\n            }\n            throw error;\n        }\n    }\n}\n\n// ការប្រើ Interceptors\nlet apiWithInterceptors = new APIClientWithInterceptors('https://jsonplaceholder.typicode.com');\n\n// Request interceptor សម្រាប់ logging\napiWithInterceptors.addRequestInterceptor(async (options) => {\n    console.log('Request interceptor:', options.method || 'GET');\n    \n    // បន្ថែម timestamp\n    if (!options.headers) options.headers = {};\n    options.headers['X-Request-Time'] = new Date().toISOString();\n    \n    return options;\n});\n\n// Response interceptor សម្រាប់ logging\napiWithInterceptors.addResponseInterceptor({\n    // Success handler\n    async onSuccess(response) {\n        console.log('Response interceptor: Success');\n        return response;\n    },\n    \n    // Error handler\n    async onError(error) {\n        console.log('Response interceptor: Error -', error.message);\n        \n        // អាចធ្វើ retry logic ឬ redirect ទៅ login\n        if (error.message.includes('401')) {\n            console.log('Unauthorized - redirecting to login...');\n        }\n    }\n});\n\n// Retry Logic\nclass APIClientWithRetry extends APIClient {\n    async requestWithRetry(endpoint, options = {}, maxRetries = 3) {\n        let lastError;\n        \n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n            try {\n                console.log(`Attempt ${attempt}/${maxRetries}`);\n                return await this.request(endpoint, options);\n            } catch (error) {\n                lastError = error;\n                \n                // កុំ retry សម្រាប់ client errors (4xx)\n                if (error.message.includes('HTTP 4')) {\n                    throw error;\n                }\n                \n                if (attempt < maxRetries) {\n                    let delay = Math.pow(2, attempt) * 1000; // Exponential backoff\n                    console.log(`Retrying in ${delay}ms...`);\n                    await new Promise(resolve => setTimeout(resolve, delay));\n                }\n            }\n        }\n        \n        throw lastError;\n    }\n}\n\n// Caching Layer\nclass CachedAPIClient extends APIClient {\n    constructor(baseURL, cacheTimeout = 5 * 60 * 1000) { // 5 minutes default\n        super(baseURL);\n        this.cache = new Map();\n        this.cacheTimeout = cacheTimeout;\n    }\n    \n    getCacheKey(endpoint, options) {\n        return `${options.method || 'GET'}:${endpoint}:${JSON.stringify(options.body || {})}`;\n    }\n    \n    async get(endpoint, params = {}) {\n        let cacheKey = this.getCacheKey(endpoint, { method: 'GET', body: params });\n        \n        // ពិនិត្យ cache\n        if (this.cache.has(cacheKey)) {\n            let cached = this.cache.get(cacheKey);\n            if (Date.now() - cached.timestamp < this.cacheTimeout) {\n                console.log('Cache hit:', cacheKey);\n                return cached.data;\n            } else {\n                this.cache.delete(cacheKey);\n            }\n        }\n        \n        // ទាញយកទិន្នន័យថ្មី\n        console.log('Cache miss:', cacheKey);\n        let data = await super.get(endpoint, params);\n        \n        // រក្សាទុកក្នុង cache\n        this.cache.set(cacheKey, {\n            data: data,\n            timestamp: Date.now()\n        });\n        \n        return data;\n    }\n    \n    clearCache() {\n        this.cache.clear();\n    }\n}\n\n// Real-world Example: User Management\nclass UserService {\n    constructor() {\n        this.api = new APIClient('https://jsonplaceholder.typicode.com');\n    }\n    \n    async getAllUsers() {\n        try {\n            return await this.api.get('/users');\n        } catch (error) {\n            console.error('មិនអាចទាញយកបញ្ជីអ្នកប្រើ:', error.message);\n            return [];\n        }\n    }\n    \n    async getUserById(id) {\n        try {\n            return await this.api.get(`/users/${id}`);\n        } catch (error) {\n            console.error(`មិនអាចទាញយកអ្នកប្រើ ${id}:`, error.message);\n            return null;\n        }\n    }\n    \n    async createUser(userData) {\n        try {\n            return await this.api.post('/users', userData);\n        } catch (error) {\n            console.error('មិនអាចបង្កើតអ្នកប្រើ:', error.message);\n            throw error;\n        }\n    }\n    \n    async updateUser(id, userData) {\n        try {\n            return await this.api.put(`/users/${id}`, userData);\n        } catch (error) {\n            console.error(`មិនអាចកែប្រែអ្នកប្រើ ${id}:`, error.message);\n            throw error;\n        }\n    }\n    \n    async deleteUser(id) {\n        try {\n            await this.api.delete(`/users/${id}`);\n            return true;\n        } catch (error) {\n            console.error(`មិនអាចលុបអ្នកប្រើ ${id}:`, error.message);\n            return false;\n        }\n    }\n    \n    async searchUsers(query) {\n        try {\n            let users = await this.getAllUsers();\n            return users.filter(user => \n                user.name.toLowerCase().includes(query.toLowerCase()) ||\n                user.email.toLowerCase().includes(query.toLowerCase())\n            );\n        } catch (error) {\n            console.error('មិនអាចស្វែងរកអ្នកប្រើ:', error.message);\n            return [];\n        }\n    }\n}\n\n// ការប្រើ User Service\nconsole.log('\\n=== User Service ===');\n\nlet userService = new UserService();\n\nasync function demonstrateUserService() {\n    try {\n        // ទាញយកអ្នកប្រើទាំងអស់\n        let users = await userService.getAllUsers();\n        console.log(`រកឃើញអ្នកប្រើ ${users.length} នាក់`);\n        \n        // ទាញយកអ្នកប្រើម្នាក់\n        if (users.length > 0) {\n            let firstUser = await userService.getUserById(users[0].id);\n            console.log('អ្នកប្រើដំបូង:', firstUser.name);\n        }\n        \n        // ស្វែងរកអ្នកប្រើ\n        let searchResults = await userService.searchUsers('Leanne');\n        console.log('លទ្ធផលស្វែងរក:', searchResults.map(u => u.name));\n        \n    } catch (error) {\n        console.error('កំហុសក្នុង demonstration:', error.message);\n    }\n}\n\ndemonstrateUserService();\n\n// Progress Tracking\nfunction fetchWithProgress(url, options = {}) {\n    return new Promise((resolve, reject) => {\n        let xhr = new XMLHttpRequest();\n        \n        xhr.open(options.method || 'GET', url);\n        \n        // Set headers\n        if (options.headers) {\n            Object.keys(options.headers).forEach(key => {\n                xhr.setRequestHeader(key, options.headers[key]);\n            });\n        }\n        \n        // Progress tracking\n        xhr.upload.addEventListener('progress', (e) => {\n            if (e.lengthComputable) {\n                let percentComplete = (e.loaded / e.total) * 100;\n                console.log(`Upload progress: ${percentComplete.toFixed(2)}%`);\n            }\n        });\n        \n        xhr.addEventListener('load', () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                try {\n                    let response = JSON.parse(xhr.responseText);\n                    resolve(response);\n                } catch {\n                    resolve(xhr.responseText);\n                }\n            } else {\n                reject(new Error(`HTTP ${xhr.status}: ${xhr.statusText}`));\n            }\n        });\n        \n        xhr.addEventListener('error', () => {\n            reject(new Error('Network error'));\n        });\n        \n        xhr.send(options.body);\n    });\n}\n\n// AbortController សម្រាប់ cancel requests\nasync function fetchWithCancel() {\n    let controller = new AbortController();\n    \n    // Cancel request បន្ទាប់ពី 5 វិនាទី\n    setTimeout(() => {\n        controller.abort();\n        console.log('Request cancelled');\n    }, 5000);\n    \n    try {\n        let response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n            signal: controller.signal\n        });\n        \n        let data = await response.json();\n        console.log('Data received:', data.length, 'posts');\n    } catch (error) {\n        if (error.name === 'AbortError') {\n            console.log('Request was cancelled');\n        } else {\n            console.error('Request failed:', error.message);\n        }\n    }\n}\n\n// Parallel Requests\nasync function fetchMultipleEndpoints() {\n    try {\n        console.log('\\n=== Parallel Requests ===');\n        \n        let [posts, users, comments] = await Promise.all([\n            fetch('https://jsonplaceholder.typicode.com/posts').then(r => r.json()),\n            fetch('https://jsonplaceholder.typicode.com/users').then(r => r.json()),\n            fetch('https://jsonplaceholder.typicode.com/comments').then(r => r.json())\n        ]);\n        \n        console.log(`Loaded: ${posts.length} posts, ${users.length} users, ${comments.length} comments`);\n        \n        return { posts, users, comments };\n    } catch (error) {\n        console.error('Failed to load data:', error.message);\n    }\n}\n\nfetchMultipleEndpoints();",
    "tip": "ប្រើ async/await ជាមួយ Fetch API ដើម្បីធ្វើឱ្យកូដងាយអាន និងចងចាំពិនិត្យ response.ok មុនពេល parse JSON"
  },
  {
    "id": 78,
    "category": "JavaScript",
    "path": "/javascript/date-time",
    "title": "មេរៀនទី២៣: កាលបរិច្ឆេទ និងពេលវេលា JavaScript (Date and Time)",
    "explanation": "JavaScript Date object អនុញ្ញាតឱ្យធ្វើការជាមួយកាលបរិច្ឆេទនិងពេលវេលា។ វាផ្តល់នូវមុខងារជាច្រើនសម្រាប់បង្កើត ដំណើរការ និងធ្វើទ្រង់ទ្រាយកាលបរិច្ឆេទ។",
    "code": "// បង្កើត Date objects\nconsole.log('=== បង្កើត Date Objects ===');\n\n// កាលបរិច្ឆេទបច្ចុប្បន្ន\nlet ឥឡូវនេះ = new Date();\nconsole.log('ឥឡូវនេះ:', ឥឡូវនេះ);\n\n// កាលបរិច្ឆេទជាក់លាក់\nlet កាលបរិច្ឆេទជាក់លាក់ = new Date('2024-01-15');\nconsole.log('កាលបរិច្ឆេទជាក់លាក់:', កាលបរិច្ឆេទជាក់លាក់);\n\n// កាលបរិច្ឆេទជាមួយពេលវេលា\nlet កាលបរិច្ឆេទពេលវេលា = new Date('2024-01-15 14:30:00');\nconsole.log('កាលបរិច្ឆេទពេលវេលា:', កាលបរិច្ឆេទពេលវេលា);\n\n// បង្កើតដោយប្រើ parameters (ឆ្នាំ, ខែ-1, ថ្ងៃ, ម៉ោង, នាទី, វិនាទី)\nlet កាលបរិច្ឆេទParameters = new Date(2024, 0, 15, 14, 30, 0); // ខែ 0 = មករា\nconsole.log('កាលបរិច្ឆេទ parameters:', កាលបរិច្ឆេទParameters);\n\n// បង្កើតពី timestamp\nlet timestamp = Date.now();\nlet កាលបរិច្ឆេទពី Timestamp = new Date(timestamp);\nconsole.log('កាលបរិច្ឆេទពី timestamp:', កាលបរិច្ឆេទពី Timestamp);\n\n// ទទួលផ្នែកនៃកាលបរិច្ឆេទ\nconsole.log('\\n=== ទទួលផ្នែកនៃកាលបរិច្ឆេទ ===');\n\nlet កាលបរិច្ឆេទ = new Date();\n\nconsole.log('ឆ្នាំ:', កាលបរិច្ឆេទ.getFullYear());\nconsole.log('ខែ (0-11):', កាលបរិច្ឆេទ.getMonth());\nconsole.log('ខែ (1-12):', កាលបរិច្ឆេទ.getMonth() + 1);\nconsole.log('ថ្ងៃ:', កាលបរិច្ឆេទ.getDate());\nconsole.log('ថ្ងៃក្នុងសប្តាហ៍ (0=អាទិត្យ):', កាលបរិច្ឆេទ.getDay());\nconsole.log('ម៉ោង (0-23):', កាលបរិច្ឆេទ.getHours());\nconsole.log('នាទី (0-59):', កាលបរិច្ឆេទ.getMinutes());\nconsole.log('វិនាទី (0-59):', កាលបរិច្ឆេទ.getSeconds());\nconsole.log('មីលីវិនាទី (0-999):', កាលបរិច្ឆេទ.getMilliseconds());\n\n// កំណត់ផ្នែកនៃកាលបរិច្ឆេទ\nconsole.log('\\n=== កំណត់ផ្នែកនៃកាលបរិច្ឆេទ ===');\n\nlet កាលបរិច្ឆេទកែប្រែ = new Date();\n\nកាលបរិច្ឆេទកែប្រែ.setFullYear(2025);\nកាលបរិច្ឆេទកែប្រែ.setMonth(11); // ធ្នូ (0-based)\nកាលបរិច្ឆេទកែប្រែ.setDate(25);\nកាលបរិច្ឆេទកែប្រែ.setHours(10, 30, 0, 0); // ម៉ោង, នាទី, វិនាទី, មីលីវិនាទី\n\nconsole.log('កាលបរិច្ឆេទកែប្រែ:', កាលបរិច្ឆេទកែប្រែ);\n\n// ធ្វើទ្រង់ទ្រាយកាលបរិច្ឆេទ\nconsole.log('\\n=== ធ្វើទ្រង់ទ្រាយកាលបរិច្ឆេទ ===');\n\nlet កាលបរិច្ឆេទសម្រាប់ទ្រង់ទ្រាយ = new Date();\n\n// Built-in formatting methods\nconsole.log('toString():', កាលបរិច្ឆេទសម្រាប់ទ្រង់ទ្រាយ.toString());\nconsole.log('toDateString():', កាលបរិច្ឆេទសម្រាប់ទ្រង់ទ្រាយ.toDateString());\nconsole.log('toTimeString():', កាលបរិច្ឆេទសម្រាប់ទ្រង់ទ្រាយ.toTimeString());\nconsole.log('toISOString():', កាលបរិច្ឆេទសម្រាប់ទ្រង់ទ្រាយ.toISOString());\nconsole.log('toLocaleDateString():', កាលបរិច្ឆេទសម្រាប់ទ្រង់ទ្រាយ.toLocaleDateString());\nconsole.log('toLocaleTimeString():', កាលបរិច្ឆេទសម្រាប់ទ្រង់ទ្រាយ.toLocaleTimeString());\n\n// Custom formatting function\nfunction ធ្វើទ្រង់ទ្រាយកាលបរិច្ឆេទខ្មែរ(date) {\n    let ថ្ងៃសប្តាហ៍ = ['អាទិត្យ', 'ច័ន្ទ', 'អង្គារ', 'ពុធ', 'ព្រហស្បតិ៍', 'សុក្រ', 'សៅរ៍'];\n    let ខែ = ['មករា', 'កុម្ភៈ', 'មីនា', 'មេសា', 'ឧសភា', 'មិថុនា', \n             'កក្កដា', 'សីហា', 'កញ្ញា', 'តុលា', 'វិច្ឆិកា', 'ធ្នូ'];\n    \n    let ថ្ងៃ = ថ្ងៃសប្តាហ៍[date.getDay()];\n    let ថ្ងៃទី = date.getDate();\n    let ខែឈ្មោះ = ខែ[date.getMonth()];\n    let ឆ្នាំ = date.getFullYear();\n    \n    return `ថ្ងៃ${ថ្ងៃ} ទី${ថ្ងៃទី} ខែ${ខែឈ្មោះ} ឆ្នាំ${ឆ្នាំ}`;\n}\n\nconsole.log('\\nទ្រង់ទ្រាយខ្មែរ:', ធ្វើទ្រង់ទ្រាយកាលបរិច្ឆេទខ្មែរ(កាលបរិច្ឆេទសម្រាប់ទ្រង់ទ្រាយ));\n\n// ការគណនាជាមួយកាលបរិច្ឆេទ\nconsole.log('\\n=== ការគណនាជាមួយកាលបរិច្ឆេទ ===');\n\n// បន្ថែម/ដកថ្ងៃ\nfunction បន្ថែមថ្ងៃ(date, days) {\n    let result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n}\n\nlet ថ្ងៃនេះ = new Date();\nlet ថ្ងៃស្អែក = បន្ថែមថ្ងៃ(ថ្ងៃនេះ, 1);\nlet សប្តាហ៍ក្រោយ = បន្ថែមថ្ងៃ(ថ្ងៃនេះ, 7);\nlet ខែមុន = បន្ថែមថ្ងៃ(ថ្ងៃនេះ, -30);\n\nconsole.log('ថ្ងៃនេះ:', ថ្ងៃនេះ.toDateString());\nconsole.log('ថ្ងៃស្អែក:', ថ្ងៃស្អែក.toDateString());\nconsole.log('សប្តាហ៍ក្រោយ:', សប្តាហ៍ក្រោយ.toDateString());\nconsole.log('ខែមុន:', ខែមុន.toDateString());\n\n// គណនាចម្ងាយរវាងកាលបរិច្ឆេទ\nfunction គណនាចម្ងាយថ្ងៃ(date1, date2) {\n    let timeDiff = Math.abs(date2.getTime() - date1.getTime());\n    return Math.ceil(timeDiff / (1000 * 3600 * 24));\n}\n\nlet កាលបរិច្ឆេទ១ = new Date('2024-01-01');\nlet កាលបរិច្ឆេទ២ = new Date('2024-01-15');\nlet ចម្ងាយ = គណនាចម្ងាយថ្ងៃ(កាលបរិច្ឆេទ១, កាលបរិច្ឆេទ២);\n\nconsole.log(`ចម្ងាយរវាង ${កាលបរិច្ឆេទ១.toDateString()} និង ${កាលបរិច្ឆេទ២.toDateString()}: ${ចម្ងាយ} ថ្ងៃ`);\n\n// គណនាអាយុ\nfunction គណនាអាយុ(birthDate) {\n    let today = new Date();\n    let age = today.getFullYear() - birthDate.getFullYear();\n    let monthDiff = today.getMonth() - birthDate.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n    }\n    \n    return age;\n}\n\nlet ថ្ងៃកំណើត = new Date('1995-06-15');\nlet អាយុ = គណនាអាយុ(ថ្ងៃកំណើត);\nconsole.log(`កំណើត: ${ថ្ងៃកំណើត.toDateString()}, អាយុ: ${អាយុ} ឆ្នាំ`);\n\n// Time zones\nconsole.log('\\n=== Time Zones ===');\n\nlet utcDate = new Date();\nconsole.log('UTC time:', utcDate.toUTCString());\nconsole.log('Local time:', utcDate.toString());\nconsole.log('Timezone offset (minutes):', utcDate.getTimezoneOffset());\n\n// Intl.DateTimeFormat សម្រាប់ formatting ទំនើប\nconsole.log('\\n=== Intl.DateTimeFormat ===');\n\nlet date = new Date();\n\n// ទ្រង់ទ្រាយខ្មែរ\nlet khmerFormatter = new Intl.DateTimeFormat('km-KH', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    weekday: 'long'\n});\nconsole.log('ទ្រង់ទ្រាយខ្មែរ:', khmerFormatter.format(date));\n\n// ទ្រង់ទ្រាយអង់គ្លេស\nlet englishFormatter = new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    weekday: 'long',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n});\nconsole.log('ទ្រង់ទ្រាយអង់គ្លេស:', englishFormatter.format(date));\n\n// Date Utility Class\nclass DateUtils {\n    // ពិនិត្យថាតើកាលបរិច្ឆេទត្រឹមត្រូវ\n    static isValidDate(date) {\n        return date instanceof Date && !isNaN(date);\n    }\n    \n    // ពិនិត្យថាតើជាឆ្នាំបង្គោល\n    static isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n    }\n    \n    // ទទួលចំនួនថ្ងៃក្នុងខែ\n    static getDaysInMonth(year, month) {\n        return new Date(year, month + 1, 0).getDate();\n    }\n    \n    // ទទួលថ្ងៃដំបូងនៃខែ\n    static getFirstDayOfMonth(year, month) {\n        return new Date(year, month, 1);\n    }\n    \n    // ទទួលថ្ងៃចុងក្រោយនៃខែ\n    static getLastDayOfMonth(year, month) {\n        return new Date(year, month + 1, 0);\n    }\n    \n    // ទទួលថ្ងៃដំបូងនៃសប្តាហ៍\n    static getStartOfWeek(date) {\n        let result = new Date(date);\n        let day = result.getDay();\n        let diff = result.getDate() - day;\n        return new Date(result.setDate(diff));\n    }\n    \n    // ទទួលថ្ងៃចុងក្រោយនៃសប្តាហ៍\n    static getEndOfWeek(date) {\n        let result = new Date(date);\n        let day = result.getDay();\n        let diff = result.getDate() + (6 - day);\n        return new Date(result.setDate(diff));\n    }\n    \n    // ប្រៀបធៀបកាលបរិច្ឆេទ (គ្មានពេលវេលា)\n    static isSameDay(date1, date2) {\n        return date1.getFullYear() === date2.getFullYear() &&\n               date1.getMonth() === date2.getMonth() &&\n               date1.getDate() === date2.getDate();\n    }\n    \n    // ទទួលបញ្ជីថ្ងៃក្នុងខែ\n    static getMonthDays(year, month) {\n        let days = [];\n        let daysInMonth = this.getDaysInMonth(year, month);\n        \n        for (let day = 1; day <= daysInMonth; day++) {\n            days.push(new Date(year, month, day));\n        }\n        \n        return days;\n    }\n    \n    // ធ្វើទ្រង់ទ្រាយ relative time\n    static getRelativeTime(date) {\n        let now = new Date();\n        let diffMs = now - date;\n        let diffSec = Math.floor(diffMs / 1000);\n        let diffMin = Math.floor(diffSec / 60);\n        let diffHour = Math.floor(diffMin / 60);\n        let diffDay = Math.floor(diffHour / 24);\n        \n        if (diffSec < 60) return 'ទើបតែ';\n        if (diffMin < 60) return `${diffMin} នាទីមុន`;\n        if (diffHour < 24) return `${diffHour} ម៉ោងមុន`;\n        if (diffDay < 7) return `${diffDay} ថ្ងៃមុន`;\n        if (diffDay < 30) return `${Math.floor(diffDay / 7)} សប្តាហ៍មុន`;\n        if (diffDay < 365) return `${Math.floor(diffDay / 30)} ខែមុន`;\n        return `${Math.floor(diffDay / 365)} ឆ្នាំមុន`;\n    }\n}\n\n// ការប្រើ Date Utilities\nconsole.log('\\n=== Date Utilities ===');\n\nlet testDate = new Date(2024, 1, 15); // 15 កុម្ភៈ 2024\n\nconsole.log('កាលបរិច្ឆេទត្រឹមត្រូវ:', DateUtils.isValidDate(testDate));\nconsole.log('ឆ្នាំ 2024 បង្គោល:', DateUtils.isLeapYear(2024));\nconsole.log('ថ្ងៃក្នុងខែកុម្ភៈ 2024:', DateUtils.getDaysInMonth(2024, 1));\nconsole.log('ថ្ងៃដំបូងខែកុម្ភៈ:', DateUtils.getFirstDayOfMonth(2024, 1).toDateString());\nconsole.log('ថ្ងៃចុងក្រោយខែកុម្ភៈ:', DateUtils.getLastDayOfMonth(2024, 1).toDateString());\n\nlet pastDate = new Date(Date.now() - 2 * 60 * 60 * 1000); // 2 ម៉ោងមុន\nconsole.log('Relative time:', DateUtils.getRelativeTime(pastDate));\n\n// Calendar Generator\nclass CalendarGenerator {\n    static generateMonth(year, month) {\n        let firstDay = DateUtils.getFirstDayOfMonth(year, month);\n        let lastDay = DateUtils.getLastDayOfMonth(year, month);\n        let startDate = DateUtils.getStartOfWeek(firstDay);\n        let endDate = DateUtils.getEndOfWeek(lastDay);\n        \n        let calendar = [];\n        let currentDate = new Date(startDate);\n        \n        while (currentDate <= endDate) {\n            let week = [];\n            \n            for (let i = 0; i < 7; i++) {\n                week.push({\n                    date: new Date(currentDate),\n                    isCurrentMonth: currentDate.getMonth() === month,\n                    isToday: DateUtils.isSameDay(currentDate, new Date())\n                });\n                currentDate.setDate(currentDate.getDate() + 1);\n            }\n            \n            calendar.push(week);\n        }\n        \n        return calendar;\n    }\n    \n    static printMonth(year, month) {\n        let monthNames = ['មករា', 'កុម្ភៈ', 'មីនា', 'មេសា', 'ឧសភា', 'មិថុនា',\n                         'កក្កដា', 'សីហា', 'កញ្ញា', 'តុលា', 'វិច្ឆិកា', 'ធ្នូ'];\n        let dayNames = ['អា', 'ច', 'អ', 'ព', 'ព្រ', 'សុ', 'ស'];\n        \n        console.log(`\\n${monthNames[month]} ${year}`);\n        console.log(dayNames.join('\\t'));\n        \n        let calendar = this.generateMonth(year, month);\n        \n        calendar.forEach(week => {\n            let weekStr = week.map(day => {\n                let dayStr = day.date.getDate().toString().padStart(2, ' ');\n                if (!day.isCurrentMonth) dayStr = '  ';\n                if (day.isToday) dayStr = `[${dayStr}]`;\n                return dayStr;\n            }).join('\\t');\n            console.log(weekStr);\n        });\n    }\n}\n\n// បង្ហាញប្រតិទិនខែបច្ចុប្បន្ន\nlet now = new Date();\nCalendarGenerator.printMonth(now.getFullYear(), now.getMonth());\n\n// Timer និង Countdown\nclass Timer {\n    constructor() {\n        this.startTime = null;\n        this.endTime = null;\n        this.isRunning = false;\n    }\n    \n    start() {\n        this.startTime = new Date();\n        this.isRunning = true;\n        console.log('Timer started at:', this.startTime.toLocaleTimeString());\n    }\n    \n    stop() {\n        if (this.isRunning) {\n            this.endTime = new Date();\n            this.isRunning = false;\n            console.log('Timer stopped at:', this.endTime.toLocaleTimeString());\n            return this.getElapsed();\n        }\n        return 0;\n    }\n    \n    getElapsed() {\n        if (this.startTime) {\n            let end = this.endTime || new Date();\n            return end - this.startTime;\n        }\n        return 0;\n    }\n    \n    getElapsedFormatted() {\n        let elapsed = this.getElapsed();\n        let seconds = Math.floor(elapsed / 1000);\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        \n        seconds = seconds % 60;\n        minutes = minutes % 60;\n        \n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n}\n\n// ការប្រើ Timer\nconsole.log('\\n=== Timer Example ===');\nlet timer = new Timer();\ntimer.start();\n\n// Simulate some work\nsetTimeout(() => {\n    let elapsed = timer.stop();\n    console.log('Elapsed time:', timer.getElapsedFormatted());\n    console.log('Elapsed milliseconds:', elapsed);\n}, 2000);\n\n// Countdown Timer\nfunction countdown(targetDate, callback) {\n    let interval = setInterval(() => {\n        let now = new Date();\n        let timeLeft = targetDate - now;\n        \n        if (timeLeft <= 0) {\n            clearInterval(interval);\n            callback('បានបញ្ចប់!');\n            return;\n        }\n        \n        let days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n        let hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        let minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n        let seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);\n        \n        callback(`${days}ថ្ងៃ ${hours}ម៉ោង ${minutes}នាទី ${seconds}វិនាទី`);\n    }, 1000);\n    \n    return interval;\n}\n\n// ឧទាហរណ៍ countdown\nlet futureDate = new Date(Date.now() + 10000); // 10 វិនាទីក្រោយ\nconsole.log('\\nCountdown started...');\n\nlet countdownInterval = countdown(futureDate, (timeString) => {\n    console.log('Time remaining:', timeString);\n});",
    "tip": "ប្រើ Date.now() សម្រាប់ timestamp និង Intl.DateTimeFormat សម្រាប់ formatting កាលបរិច្ឆេទតាមភាសាផ្សេងៗ"
  },
  {
    "id": 79,
    "category": "JavaScript",
    "path": "/javascript/math-object",
    "title": "មេរៀនទី២៤: Math Object JavaScript",
    "explanation": "Math Object ក្នុង JavaScript ផ្តល់នូវ properties និង methods សម្រាប់ការគណនាគណិតវិទ្យា។ វាមានមុខងារជាច្រើនដូចជា ការគណនាជាមូលដ្ឋាន ត្រីកោណមាត្រ និងការបង្កើតលេខចៃដន្យ។",
    "code": "// Math Constants\nconsole.log('=== Math Constants ===');\n\nconsole.log('Math.PI (π):', Math.PI);\nconsole.log('Math.E (e):', Math.E);\nconsole.log('Math.LN2 (ln(2)):', Math.LN2);\nconsole.log('Math.LN10 (ln(10)):', Math.LN10);\nconsole.log('Math.LOG2E (log₂(e)):', Math.LOG2E);\nconsole.log('Math.LOG10E (log₁₀(e)):', Math.LOG10E);\nconsole.log('Math.SQRT1_2 (√(1/2)):', Math.SQRT1_2);\nconsole.log('Math.SQRT2 (√2):', Math.SQRT2);\n\n// Basic Math Methods\nconsole.log('\\n=== Basic Math Methods ===');\n\n// Rounding methods\nlet លេខទសភាគ = 4.7;\nconsole.log(`លេខដើម: ${លេខទសភាគ}`);\nconsole.log('Math.round():', Math.round(លេខទសភាគ)); // 5 - បង្គត់ទៅលេខគត់ជិតបំផុត\nconsole.log('Math.floor():', Math.floor(លេខទសភាគ)); // 4 - បង្គត់ចុះ\nconsole.log('Math.ceil():', Math.ceil(លេខទសភាគ));   // 5 - បង្គត់ឡើង\nconsole.log('Math.trunc():', Math.trunc(លេខទសភាគ)); // 4 - កាត់ផ្នែកទសភាគ\n\n// Absolute value\nlet លេខអវិជ្ជមាន = -15;\nconsole.log(`\\nលេខអវិជ្ជមាន: ${លេខអវិជ្ជមាន}`);\nconsole.log('Math.abs():', Math.abs(លេខអវិជ្ជមាន)); // 15\n\n// Min and Max\nlet លេខជាច្រើន = [5, 2, 8, 1, 9, 3];\nconsole.log('\\nលេខជាច្រើន:', លេខជាច្រើន);\nconsole.log('Math.min():', Math.min(...លេខជាច្រើន)); // 1\nconsole.log('Math.max():', Math.max(...លេខជាច្រើន)); // 9\n\n// Power and Square Root\nconsole.log('\\n=== Power and Square Root ===');\n\nlet លេខមូលដ្ឋាន = 16;\nconsole.log(`លេខមូលដ្ឋាន: ${លេខមូលដ្ឋាន}`);\nconsole.log('Math.sqrt() (√16):', Math.sqrt(លេខមូលដ្ឋាន)); // 4\nconsole.log('Math.cbrt() (∛8):', Math.cbrt(8)); // 2 - ឫសគូបិក\nconsole.log('Math.pow(2, 3) (2³):', Math.pow(2, 3)); // 8\nconsole.log('2 ** 3 (ES2016):', 2 ** 3); // 8\n\n// Logarithms\nconsole.log('\\n=== Logarithms ===');\n\nconsole.log('Math.log(Math.E):', Math.log(Math.E)); // 1 - លោការីតធម្មជាតិ\nconsole.log('Math.log10(100):', Math.log10(100)); // 2 - លោការីតមូលដ្ឋាន 10\nconsole.log('Math.log2(8):', Math.log2(8)); // 3 - លោការីតមូលដ្ឋាន 2\nconsole.log('Math.log1p(0):', Math.log1p(0)); // 0 - ln(1 + x)\n\n// Exponential\nconsole.log('\\n=== Exponential ===');\n\nconsole.log('Math.exp(1):', Math.exp(1)); // e¹\nconsole.log('Math.expm1(0):', Math.expm1(0)); // e⁰ - 1 = 0\n\n// Trigonometric Functions\nconsole.log('\\n=== Trigonometric Functions ===');\n\n// បំលែងដឺក្រេទៅ radians\nfunction degreesToRadians(degrees) {\n    return degrees * (Math.PI / 180);\n}\n\n// បំលែង radians ទៅដឺក្រេ\nfunction radiansToDegrees(radians) {\n    return radians * (180 / Math.PI);\n}\n\nlet មុំ90ដឺក្រេ = 90;\nlet មុំ90Radians = degreesToRadians(មុំ90ដឺក្រេ);\n\nconsole.log(`មុំ ${មុំ90ដឺក្រេ}° = ${មុំ90Radians} radians`);\nconsole.log('sin(90°):', Math.sin(មុំ90Radians)); // 1\nconsole.log('cos(90°):', Math.cos(មុំ90Radians)); // ~0\nconsole.log('tan(45°):', Math.tan(degreesToRadians(45))); // 1\n\n// Inverse trigonometric\nconsole.log('\\nInverse trigonometric:');\nconsole.log('asin(1) in degrees:', radiansToDegrees(Math.asin(1))); // 90°\nconsole.log('acos(0) in degrees:', radiansToDegrees(Math.acos(0))); // 90°\nconsole.log('atan(1) in degrees:', radiansToDegrees(Math.atan(1))); // 45°\nconsole.log('atan2(1, 1) in degrees:', radiansToDegrees(Math.atan2(1, 1))); // 45°\n\n// Hyperbolic Functions\nconsole.log('\\n=== Hyperbolic Functions ===');\n\nconsole.log('Math.sinh(0):', Math.sinh(0)); // 0\nconsole.log('Math.cosh(0):', Math.cosh(0)); // 1\nconsole.log('Math.tanh(0):', Math.tanh(0)); // 0\nconsole.log('Math.asinh(0):', Math.asinh(0)); // 0\nconsole.log('Math.acosh(1):', Math.acosh(1)); // 0\nconsole.log('Math.atanh(0):', Math.atanh(0)); // 0\n\n// Random Numbers\nconsole.log('\\n=== Random Numbers ===');\n\n// លេខចៃដន្យមូលដ្ឋាន (0-1)\nconsole.log('Math.random():', Math.random());\n\n// លេខចៃដន្យក្នុងចន្លោះ\nfunction randomBetween(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\n// លេខគត់ចៃដន្យក្នុងចន្លោះ\nfunction randomIntBetween(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconsole.log('លេខចៃដន្យ 1-10:', randomBetween(1, 10));\nconsole.log('លេខគត់ចៃដន្យ 1-10:', randomIntBetween(1, 10));\n\n// ជ្រើសរើសធាតុចៃដន្យពី array\nfunction randomChoice(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\nlet ផ្លែឈើ = ['ប៉ោម', 'ចេក', 'ស្វាយ', 'ក្រូចថ្លុង'];\nconsole.log('ផ្លែឈើចៃដន្យ:', randomChoice(ផ្លែឈើ));\n\n// ច្របល់ array\nfunction shuffleArray(array) {\n    let shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n}\n\nlet លេខរៀប = [1, 2, 3, 4, 5];\nconsole.log('លេខដើម:', លេខរៀប);\nconsole.log('លេខច្របល់:', shuffleArray(លេខរៀប));\n\n// Math Utility Class\nclass MathUtils {\n    // ពិនិត្យលេខគូ/សេស\n    static isEven(num) {\n        return num % 2 === 0;\n    }\n    \n    static isOdd(num) {\n        return num % 2 !== 0;\n    }\n    \n    // ពិនិត្យលេខបឋម\n    static isPrime(num) {\n        if (num < 2) return false;\n        if (num === 2) return true;\n        if (num % 2 === 0) return false;\n        \n        for (let i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n    \n    // រកលេខបឋម\n    static getPrimes(max) {\n        let primes = [];\n        for (let i = 2; i <= max; i++) {\n            if (this.isPrime(i)) {\n                primes.push(i);\n            }\n        }\n        return primes;\n    }\n    \n    // ហ្វាក់តូរៀល\n    static factorial(n) {\n        if (n < 0) return undefined;\n        if (n === 0 || n === 1) return 1;\n        return n * this.factorial(n - 1);\n    }\n    \n    // ហ្វីបូណាច្ចី\n    static fibonacci(n) {\n        if (n < 0) return undefined;\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return this.fibonacci(n - 1) + this.fibonacci(n - 2);\n    }\n    \n    // បង្កើតលំដាប់ហ្វីបូណាច្ចី\n    static fibonacciSequence(count) {\n        let sequence = [];\n        for (let i = 0; i < count; i++) {\n            sequence.push(this.fibonacci(i));\n        }\n        return sequence;\n    }\n    \n    // រក GCD (Greatest Common Divisor)\n    static gcd(a, b) {\n        while (b !== 0) {\n            let temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return Math.abs(a);\n    }\n    \n    // រក LCM (Least Common Multiple)\n    static lcm(a, b) {\n        return Math.abs(a * b) / this.gcd(a, b);\n    }\n    \n    // បំលែងលេខទៅ base ផ្សេង\n    static toBase(num, base) {\n        return num.toString(base);\n    }\n    \n    // បំលែងពី base ផ្សេងទៅលេខ\n    static fromBase(str, base) {\n        return parseInt(str, base);\n    }\n    \n    // គណនាចម្ងាយរវាងចំណុចពីរ\n    static distance(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    }\n    \n    // គណនាផ្ទៃរង្វង់\n    static circleArea(radius) {\n        return Math.PI * Math.pow(radius, 2);\n    }\n    \n    // គណនាបរិមាត្ររង្វង់\n    static circleCircumference(radius) {\n        return 2 * Math.PI * radius;\n    }\n    \n    // បង្គត់ទៅទសភាគជាក់លាក់\n    static roundTo(num, decimals) {\n        return Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals);\n    }\n    \n    // ពិនិត្យថាតើលេខនៅក្នុងចន្លោះ\n    static inRange(num, min, max) {\n        return num >= min && num <= max;\n    }\n    \n    // កំណត់លេខក្នុងចន្លោះ\n    static clamp(num, min, max) {\n        return Math.min(Math.max(num, min), max);\n    }\n    \n    // បំលែងដឺក្រេទៅ radians\n    static degToRad(degrees) {\n        return degrees * (Math.PI / 180);\n    }\n    \n    // បំលែង radians ទៅដឺក្រេ\n    static radToDeg(radians) {\n        return radians * (180 / Math.PI);\n    }\n}\n\n// ការប្រើ Math Utilities\nconsole.log('\\n=== Math Utilities ===');\n\nconsole.log('7 គូ?', MathUtils.isEven(7));\nconsole.log('8 គូ?', MathUtils.isEven(8));\nconsole.log('17 បឋម?', MathUtils.isPrime(17));\nconsole.log('លេខបឋម 1-20:', MathUtils.getPrimes(20));\nconsole.log('5! =', MathUtils.factorial(5));\nconsole.log('Fibonacci(10) =', MathUtils.fibonacci(10));\nconsole.log('Fibonacci sequence (10):', MathUtils.fibonacciSequence(10));\nconsole.log('GCD(48, 18) =', MathUtils.gcd(48, 18));\nconsole.log('LCM(12, 8) =', MathUtils.lcm(12, 8));\nconsole.log('255 ក្នុង base 16:', MathUtils.toBase(255, 16));\nconsole.log('FF ពី base 16:', MathUtils.fromBase('FF', 16));\nconsole.log('ចម្ងាយ (0,0) ទៅ (3,4):', MathUtils.distance(0, 0, 3, 4));\nconsole.log('ផ្ទៃរង្វង់ r=5:', MathUtils.roundTo(MathUtils.circleArea(5), 2));\nconsole.log('3.14159 បង្គត់ 2 ទសភាគ:', MathUtils.roundTo(3.14159, 2));\nconsole.log('15 នៅក្នុង 10-20?', MathUtils.inRange(15, 10, 20));\nconsole.log('Clamp 25 ក្នុង 10-20:', MathUtils.clamp(25, 10, 20));\n\n// Statistics Functions\nclass Statistics {\n    // មធ្យមភាគ\n    static mean(numbers) {\n        return numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n    }\n    \n    // មេដ្យាន\n    static median(numbers) {\n        let sorted = [...numbers].sort((a, b) => a - b);\n        let mid = Math.floor(sorted.length / 2);\n        \n        if (sorted.length % 2 === 0) {\n            return (sorted[mid - 1] + sorted[mid]) / 2;\n        } else {\n            return sorted[mid];\n        }\n    }\n    \n    // ម៉ូដ\n    static mode(numbers) {\n        let frequency = {};\n        let maxFreq = 0;\n        let modes = [];\n        \n        // រាប់ frequency\n        numbers.forEach(num => {\n            frequency[num] = (frequency[num] || 0) + 1;\n            if (frequency[num] > maxFreq) {\n                maxFreq = frequency[num];\n            }\n        });\n        \n        // រកលេខដែលមាន frequency ខ្ពស់បំផុត\n        for (let num in frequency) {\n            if (frequency[num] === maxFreq) {\n                modes.push(Number(num));\n            }\n        }\n        \n        return modes;\n    }\n    \n    // ចន្លោះ\n    static range(numbers) {\n        return Math.max(...numbers) - Math.min(...numbers);\n    }\n    \n    // វ៉ារ្យង់\n    static variance(numbers) {\n        let mean = this.mean(numbers);\n        let squaredDiffs = numbers.map(num => Math.pow(num - mean, 2));\n        return this.mean(squaredDiffs);\n    }\n    \n    // ស្តង់ដារ deviation\n    static standardDeviation(numbers) {\n        return Math.sqrt(this.variance(numbers));\n    }\n}\n\n// ការប្រើ Statistics\nconsole.log('\\n=== Statistics ===');\n\nlet ទិន្នន័យ = [2, 4, 4, 4, 5, 5, 7, 9];\nconsole.log('ទិន្នន័យ:', ទិន្នន័យ);\nconsole.log('មធ្យមភាគ:', Statistics.mean(ទិន្នន័យ));\nconsole.log('មេដ្យាន:', Statistics.median(ទិន្នន័យ));\nconsole.log('ម៉ូដ:', Statistics.mode(ទិន្នន័យ));\nconsole.log('ចន្លោះ:', Statistics.range(ទិន្នន័យ));\nconsole.log('វ៉ារ្យង់:', MathUtils.roundTo(Statistics.variance(ទិន្នន័យ), 2));\nconsole.log('ស្តង់ដារ deviation:', MathUtils.roundTo(Statistics.standardDeviation(ទិន្នន័យ), 2));\n\n// Geometry Calculator\nclass GeometryCalculator {\n    // ត្រីកោណ\n    static triangleArea(base, height) {\n        return 0.5 * base * height;\n    }\n    \n    static trianglePerimeter(a, b, c) {\n        return a + b + c;\n    }\n    \n    // រាងការ៉េ\n    static squareArea(side) {\n        return side * side;\n    }\n    \n    static squarePerimeter(side) {\n        return 4 * side;\n    }\n    \n    // ចតុកោណកែង\n    static rectangleArea(width, height) {\n        return width * height;\n    }\n    \n    static rectanglePerimeter(width, height) {\n        return 2 * (width + height);\n    }\n    \n    // រង្វង់\n    static circleArea(radius) {\n        return Math.PI * radius * radius;\n    }\n    \n    static circleCircumference(radius) {\n        return 2 * Math.PI * radius;\n    }\n    \n    // ស្វ័យគុណ\n    static sphereVolume(radius) {\n        return (4/3) * Math.PI * Math.pow(radius, 3);\n    }\n    \n    static sphereSurfaceArea(radius) {\n        return 4 * Math.PI * Math.pow(radius, 2);\n    }\n    \n    // ស៊ីឡាំង\n    static cylinderVolume(radius, height) {\n        return Math.PI * Math.pow(radius, 2) * height;\n    }\n    \n    static cylinderSurfaceArea(radius, height) {\n        return 2 * Math.PI * radius * (radius + height);\n    }\n}\n\n// ការប្រើ Geometry Calculator\nconsole.log('\\n=== Geometry Calculator ===');\n\nconsole.log('ផ្ទៃត្រីកោណ (base=10, height=5):', GeometryCalculator.triangleArea(10, 5));\nconsole.log('ផ្ទៃរាងការ៉េ (side=4):', GeometryCalculator.squareArea(4));\nconsole.log('ផ្ទៃចតុកោណកែង (5x3):', GeometryCalculator.rectangleArea(5, 3));\nconsole.log('ផ្ទៃរង្វង់ (r=3):', MathUtils.roundTo(GeometryCalculator.circleArea(3), 2));\nconsole.log('ទំហំស្វ័យគុណ (r=2):', MathUtils.roundTo(GeometryCalculator.sphereVolume(2), 2));\nconsole.log('ទំហំស៊ីឡាំង (r=2, h=5):', MathUtils.roundTo(GeometryCalculator.cylinderVolume(2, 5), 2));",
    "tip": "ប្រើ Math.random() ជាមួយ Math.floor() ដើម្បីបង្កើតលេខគត់ចៃដន្យ និងចងចាំថា trigonometric functions ប្រើ radians មិនមែនដឺក្រេ"
  },
  {
    "id": 80,
    "category": "JavaScript",
    "path": "/javascript/browser-apis",
    "title": "មេរៀនទី២៥: Browser APIs JavaScript",
    "explanation": "Browser APIs ផ្តល់នូវមុខងារជាច្រើនសម្រាប់អន្តរកម្មជាមួយកម្មវិធីរុករក។ នេះរួមមាន Geolocation, Notification, File API, Web Storage, Canvas, និង APIs ផ្សេងទៀតដែលធ្វើឱ្យកម្មវិធីវេបមានអានុភាពខ្ពស់។",
    "code": "// Geolocation API\nconsole.log('=== Geolocation API ===');\n\nclass LocationService {\n    static async getCurrentPosition() {\n        return new Promise((resolve, reject) => {\n            if (!navigator.geolocation) {\n                reject(new Error('Geolocation មិនត្រូវបានគាំទ្រ'));\n                return;\n            }\n            \n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    resolve({\n                        latitude: position.coords.latitude,\n                        longitude: position.coords.longitude,\n                        accuracy: position.coords.accuracy,\n                        timestamp: position.timestamp\n                    });\n                },\n                (error) => {\n                    let message;\n                    switch(error.code) {\n                        case error.PERMISSION_DENIED:\n                            message = 'អ្នកប្រើបានបដិសេធការចូលដំណើរការទីតាំង';\n                            break;\n                        case error.POSITION_UNAVAILABLE:\n                            message = 'ព័ត៌មានទីតាំងមិនមាន';\n                            break;\n                        case error.TIMEOUT:\n                            message = 'ការស្នើសុំទីតាំងអស់ពេល';\n                            break;\n                        default:\n                            message = 'កំហុសមិនស្គាល់';\n                    }\n                    reject(new Error(message));\n                },\n                {\n                    enableHighAccuracy: true,\n                    timeout: 10000,\n                    maximumAge: 60000\n                }\n            );\n        });\n    }\n    \n    static watchPosition(callback, errorCallback) {\n        if (!navigator.geolocation) {\n            errorCallback(new Error('Geolocation មិនត្រូវបានគាំទ្រ'));\n            return null;\n        }\n        \n        return navigator.geolocation.watchPosition(\n            callback,\n            errorCallback,\n            {\n                enableHighAccuracy: true,\n                timeout: 5000,\n                maximumAge: 30000\n            }\n        );\n    }\n    \n    static clearWatch(watchId) {\n        if (watchId && navigator.geolocation) {\n            navigator.geolocation.clearWatch(watchId);\n        }\n    }\n}\n\n// ការប្រើ Geolocation\nLocationService.getCurrentPosition()\n    .then(position => {\n        console.log('ទីតាំងបច្ចុប្បន្ន:', position);\n        console.log(`Latitude: ${position.latitude}, Longitude: ${position.longitude}`);\n    })\n    .catch(error => {\n        console.error('កំហុសទីតាំង:', error.message);\n    });\n\n// Notification API\nconsole.log('\\n=== Notification API ===');\n\nclass NotificationService {\n    static async requestPermission() {\n        if (!('Notification' in window)) {\n            throw new Error('Notification មិនត្រូវបានគាំទ្រ');\n        }\n        \n        let permission = await Notification.requestPermission();\n        return permission === 'granted';\n    }\n    \n    static async showNotification(title, options = {}) {\n        try {\n            let hasPermission = await this.requestPermission();\n            \n            if (!hasPermission) {\n                console.log('Notification permission បានបដិសេធ');\n                return null;\n            }\n            \n            let notification = new Notification(title, {\n                body: options.body || '',\n                icon: options.icon || '',\n                badge: options.badge || '',\n                tag: options.tag || '',\n                requireInteraction: options.requireInteraction || false,\n                ...options\n            });\n            \n            // Event listeners\n            notification.onclick = options.onClick || (() => {\n                console.log('Notification clicked');\n                window.focus();\n                notification.close();\n            });\n            \n            notification.onclose = options.onClose || (() => {\n                console.log('Notification closed');\n            });\n            \n            notification.onerror = options.onError || ((error) => {\n                console.error('Notification error:', error);\n            });\n            \n            return notification;\n            \n        } catch (error) {\n            console.error('មិនអាចបង្ហាញ notification:', error.message);\n            return null;\n        }\n    }\n}\n\n// ការប្រើ Notification\nNotificationService.showNotification('សារជូនដំណឹង', {\n    body: 'នេះគឺជាសារជូនដំណឹងពីកម្មវិធីរបស់អ្នក',\n    icon: '/icon.png',\n    tag: 'demo-notification',\n    onClick: () => {\n        console.log('អ្នកបានចុចលើ notification');\n    }\n});\n\n// File API\nconsole.log('\\n=== File API ===');\n\nclass FileHandler {\n    static readFile(file, type = 'text') {\n        return new Promise((resolve, reject) => {\n            let reader = new FileReader();\n            \n            reader.onload = (e) => resolve(e.target.result);\n            reader.onerror = (e) => reject(new Error('មិនអាចអានឯកសារ'));\n            \n            switch(type) {\n                case 'text':\n                    reader.readAsText(file);\n                    break;\n                case 'dataURL':\n                    reader.readAsDataURL(file);\n                    break;\n                case 'arrayBuffer':\n                    reader.readAsArrayBuffer(file);\n                    break;\n                case 'binaryString':\n                    reader.readAsBinaryString(file);\n                    break;\n                default:\n                    reader.readAsText(file);\n            }\n        });\n    }\n    \n    static async readMultipleFiles(files, type = 'text') {\n        let results = [];\n        \n        for (let file of files) {\n            try {\n                let content = await this.readFile(file, type);\n                results.push({\n                    name: file.name,\n                    size: file.size,\n                    type: file.type,\n                    lastModified: file.lastModified,\n                    content: content\n                });\n            } catch (error) {\n                results.push({\n                    name: file.name,\n                    error: error.message\n                });\n            }\n        }\n        \n        return results;\n    }\n    \n    static validateFile(file, options = {}) {\n        let errors = [];\n        \n        // ពិនិត្យទំហំ\n        if (options.maxSize && file.size > options.maxSize) {\n            errors.push(`ឯកសារធំពេក (${(file.size / 1024 / 1024).toFixed(2)}MB)`);\n        }\n        \n        // ពិនិត្យប្រភេទ\n        if (options.allowedTypes && !options.allowedTypes.includes(file.type)) {\n            errors.push(`ប្រភេទឯកសារមិនត្រូវបានអនុញ្ញាត (${file.type})`);\n        }\n        \n        // ពិនិត្យកន្ទុយឯកសារ\n        if (options.allowedExtensions) {\n            let extension = file.name.split('.').pop().toLowerCase();\n            if (!options.allowedExtensions.includes(extension)) {\n                errors.push(`កន្ទុយឯកសារមិនត្រូវបានអនុញ្ញាត (.${extension})`);\n            }\n        }\n        \n        return {\n            valid: errors.length === 0,\n            errors: errors\n        };\n    }\n    \n    static createDownloadLink(content, filename, type = 'text/plain') {\n        let blob = new Blob([content], { type: type });\n        let url = URL.createObjectURL(blob);\n        \n        let link = document.createElement('a');\n        link.href = url;\n        link.download = filename;\n        link.style.display = 'none';\n        \n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n        // សម្អាត URL\n        setTimeout(() => URL.revokeObjectURL(url), 100);\n    }\n}\n\n// ឧទាហរណ៍ការប្រើ File API\n// (នេះនឹងដំណើរការពេលមានការជ្រើសរើសឯកសារ)\nfunction handleFileSelect(event) {\n    let files = Array.from(event.target.files);\n    \n    files.forEach(async (file) => {\n        // ពិនិត្យឯកសារ\n        let validation = FileHandler.validateFile(file, {\n            maxSize: 5 * 1024 * 1024, // 5MB\n            allowedTypes: ['text/plain', 'application/json'],\n            allowedExtensions: ['txt', 'json']\n        });\n        \n        if (!validation.valid) {\n            console.error('ឯកសារមិនត្រឹមត្រូវ:', validation.errors);\n            return;\n        }\n        \n        try {\n            let content = await FileHandler.readFile(file, 'text');\n            console.log(`មាតិកាឯកសារ ${file.name}:`, content.substring(0, 100) + '...');\n        } catch (error) {\n            console.error('កំហុសក្នុងការអានឯកសារ:', error.message);\n        }\n    });\n}\n\n// Web Storage API (បន្ថែមលើ localStorage)\nconsole.log('\\n=== Web Storage API ===');\n\nclass StorageManager {\n    // Session Storage\n    static setSession(key, value) {\n        try {\n            sessionStorage.setItem(key, JSON.stringify(value));\n            return true;\n        } catch (error) {\n            console.error('មិនអាចរក្សាទុកក្នុង session storage:', error.message);\n            return false;\n        }\n    }\n    \n    static getSession(key, defaultValue = null) {\n        try {\n            let item = sessionStorage.getItem(key);\n            return item ? JSON.parse(item) : defaultValue;\n        } catch (error) {\n            console.error('មិនអាចទាញយកពី session storage:', error.message);\n            return defaultValue;\n        }\n    }\n    \n    static removeSession(key) {\n        sessionStorage.removeItem(key);\n    }\n    \n    static clearSession() {\n        sessionStorage.clear();\n    }\n    \n    // Storage Event Listener\n    static onStorageChange(callback) {\n        window.addEventListener('storage', (e) => {\n            callback({\n                key: e.key,\n                oldValue: e.oldValue,\n                newValue: e.newValue,\n                storageArea: e.storageArea,\n                url: e.url\n            });\n        });\n    }\n    \n    // ពិនិត្យទំហំ storage\n    static getStorageSize(storage = localStorage) {\n        let total = 0;\n        for (let key in storage) {\n            if (storage.hasOwnProperty(key)) {\n                total += storage[key].length + key.length;\n            }\n        }\n        return total;\n    }\n    \n    static getStorageInfo() {\n        return {\n            localStorage: {\n                size: this.getStorageSize(localStorage),\n                itemCount: localStorage.length\n            },\n            sessionStorage: {\n                size: this.getStorageSize(sessionStorage),\n                itemCount: sessionStorage.length\n            }\n        };\n    }\n}\n\n// ការប្រើ Storage Manager\nStorageManager.setSession('userSession', {\n    userId: 123,\n    loginTime: new Date().toISOString()\n});\n\nconsole.log('Session data:', StorageManager.getSession('userSession'));\nconsole.log('Storage info:', StorageManager.getStorageInfo());\n\n// Clipboard API\nconsole.log('\\n=== Clipboard API ===');\n\nclass ClipboardManager {\n    static async writeText(text) {\n        try {\n            if (navigator.clipboard && navigator.clipboard.writeText) {\n                await navigator.clipboard.writeText(text);\n                return true;\n            } else {\n                // Fallback សម្រាប់ browser ចាស់\n                let textArea = document.createElement('textarea');\n                textArea.value = text;\n                textArea.style.position = 'fixed';\n                textArea.style.opacity = '0';\n                document.body.appendChild(textArea);\n                textArea.select();\n                document.execCommand('copy');\n                document.body.removeChild(textArea);\n                return true;\n            }\n        } catch (error) {\n            console.error('មិនអាចចម្លងអត្ថបទ:', error.message);\n            return false;\n        }\n    }\n    \n    static async readText() {\n        try {\n            if (navigator.clipboard && navigator.clipboard.readText) {\n                return await navigator.clipboard.readText();\n            } else {\n                throw new Error('Clipboard read មិនត្រូវបានគាំទ្រ');\n            }\n        } catch (error) {\n            console.error('មិនអាចអានពី clipboard:', error.message);\n            return null;\n        }\n    }\n    \n    static async writeData(data) {\n        try {\n            if (navigator.clipboard && navigator.clipboard.write) {\n                await navigator.clipboard.write(data);\n                return true;\n            } else {\n                throw new Error('Clipboard write មិនត្រូវបានគាំទ្រ');\n            }\n        } catch (error) {\n            console.error('មិនអាចសរសេរទៅ clipboard:', error.message);\n            return false;\n        }\n    }\n}\n\n// ការប្រើ Clipboard\nClipboardManager.writeText('Hello from JavaScript!')\n    .then(success => {\n        if (success) {\n            console.log('អត្ថបទត្រូវបានចម្លង');\n        }\n    });\n\n// Battery API\nconsole.log('\\n=== Battery API ===');\n\nclass BatteryManager {\n    static async getBatteryInfo() {\n        try {\n            if ('getBattery' in navigator) {\n                let battery = await navigator.getBattery();\n                \n                return {\n                    level: Math.round(battery.level * 100),\n                    charging: battery.charging,\n                    chargingTime: battery.chargingTime,\n                    dischargingTime: battery.dischargingTime\n                };\n            } else {\n                throw new Error('Battery API មិនត្រូវបានគាំទ្រ');\n            }\n        } catch (error) {\n            console.error('មិនអាចទទួលព័ត៌មានថ្ម:', error.message);\n            return null;\n        }\n    }\n    \n    static async monitorBattery(callback) {\n        try {\n            if ('getBattery' in navigator) {\n                let battery = await navigator.getBattery();\n                \n                let updateInfo = () => {\n                    callback({\n                        level: Math.round(battery.level * 100),\n                        charging: battery.charging,\n                        chargingTime: battery.chargingTime,\n                        dischargingTime: battery.dischargingTime\n                    });\n                };\n                \n                battery.addEventListener('chargingchange', updateInfo);\n                battery.addEventListener('levelchange', updateInfo);\n                battery.addEventListener('chargingtimechange', updateInfo);\n                battery.addEventListener('dischargingtimechange', updateInfo);\n                \n                // ហៅដំបូង\n                updateInfo();\n                \n                return battery;\n            } else {\n                throw new Error('Battery API មិនត្រូវបានគាំទ្រ');\n            }\n        } catch (error) {\n            console.error('មិនអាចតាមដានថ្ម:', error.message);\n            return null;\n        }\n    }\n}\n\n// ការប្រើ Battery API\nBatteryManager.getBatteryInfo()\n    .then(info => {\n        if (info) {\n            console.log('ព័ត៌មានថ្ម:', info);\n        }\n    });\n\n// Network Information API\nconsole.log('\\n=== Network Information API ===');\n\nclass NetworkManager {\n    static getNetworkInfo() {\n        if ('connection' in navigator) {\n            let connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n            \n            return {\n                effectiveType: connection.effectiveType,\n                downlink: connection.downlink,\n                rtt: connection.rtt,\n                saveData: connection.saveData\n            };\n        } else {\n            return null;\n        }\n    }\n    \n    static isOnline() {\n        return navigator.onLine;\n    }\n    \n    static onNetworkChange(callback) {\n        window.addEventListener('online', () => {\n            callback({ online: true, info: this.getNetworkInfo() });\n        });\n        \n        window.addEventListener('offline', () => {\n            callback({ online: false, info: null });\n        });\n        \n        if ('connection' in navigator) {\n            let connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n            connection.addEventListener('change', () => {\n                callback({ online: this.isOnline(), info: this.getNetworkInfo() });\n            });\n        }\n    }\n}\n\n// ការប្រើ Network API\nconsole.log('Online status:', NetworkManager.isOnline());\nlet networkInfo = NetworkManager.getNetworkInfo();\nif (networkInfo) {\n    console.log('Network info:', networkInfo);\n}\n\n// Device Orientation API\nconsole.log('\\n=== Device Orientation API ===');\n\nclass OrientationManager {\n    static requestPermission() {\n        return new Promise((resolve) => {\n            if (typeof DeviceOrientationEvent.requestPermission === 'function') {\n                DeviceOrientationEvent.requestPermission()\n                    .then(response => {\n                        resolve(response === 'granted');\n                    })\n                    .catch(() => resolve(false));\n            } else {\n                resolve(true); // Android ឬ browser ផ្សេងទៀត\n            }\n        });\n    }\n    \n    static async startTracking(callback) {\n        let hasPermission = await this.requestPermission();\n        \n        if (!hasPermission) {\n            console.error('Device orientation permission បានបដិសេធ');\n            return null;\n        }\n        \n        let handler = (event) => {\n            callback({\n                alpha: event.alpha, // Z-axis (0-360)\n                beta: event.beta,   // X-axis (-180 to 180)\n                gamma: event.gamma, // Y-axis (-90 to 90)\n                absolute: event.absolute\n            });\n        };\n        \n        window.addEventListener('deviceorientation', handler);\n        return handler;\n    }\n    \n    static stopTracking(handler) {\n        if (handler) {\n            window.removeEventListener('deviceorientation', handler);\n        }\n    }\n}\n\n// Vibration API\nconsole.log('\\n=== Vibration API ===');\n\nclass VibrationManager {\n    static vibrate(pattern) {\n        if ('vibrate' in navigator) {\n            return navigator.vibrate(pattern);\n        } else {\n            console.log('Vibration API មិនត្រូវបានគាំទ្រ');\n            return false;\n        }\n    }\n    \n    static vibrateShort() {\n        return this.vibrate(100);\n    }\n    \n    static vibrateLong() {\n        return this.vibrate(500);\n    }\n    \n    static vibratePattern(pattern) {\n        return this.vibrate(pattern);\n    }\n    \n    static stopVibration() {\n        return this.vibrate(0);\n    }\n}\n\n// ការប្រើ Vibration API\nVibrationManager.vibrateShort();\n\n// Page Visibility API\nconsole.log('\\n=== Page Visibility API ===');\n\nclass VisibilityManager {\n    static isVisible() {\n        return !document.hidden;\n    }\n    \n    static getVisibilityState() {\n        return document.visibilityState;\n    }\n    \n    static onVisibilityChange(callback) {\n        document.addEventListener('visibilitychange', () => {\n            callback({\n                visible: this.isVisible(),\n                state: this.getVisibilityState()\n            });\n        });\n    }\n}\n\n// ការប្រើ Page Visibility\nVisibilityManager.onVisibilityChange((info) => {\n    console.log('Page visibility changed:', info);\n    \n    if (info.visible) {\n        console.log('ទំព័រអាចមើលឃើញ');\n    } else {\n        console.log('ទំព័រត្រូវបានលាក់');\n    }\n});\n\n// Performance API\nconsole.log('\\n=== Performance API ===');\n\nclass PerformanceManager {\n    static getNavigationTiming() {\n        if ('performance' in window && 'timing' in performance) {\n            let timing = performance.timing;\n            \n            return {\n                pageLoadTime: timing.loadEventEnd - timing.navigationStart,\n                domReadyTime: timing.domContentLoadedEventEnd - timing.navigationStart,\n                dnsLookupTime: timing.domainLookupEnd - timing.domainLookupStart,\n                tcpConnectTime: timing.connectEnd - timing.connectStart,\n                serverResponseTime: timing.responseEnd - timing.requestStart\n            };\n        }\n        return null;\n    }\n    \n    static mark(name) {\n        if ('performance' in window && 'mark' in performance) {\n            performance.mark(name);\n        }\n    }\n    \n    static measure(name, startMark, endMark) {\n        if ('performance' in window && 'measure' in performance) {\n            performance.measure(name, startMark, endMark);\n            \n            let measures = performance.getEntriesByName(name, 'measure');\n            return measures.length > 0 ? measures[measures.length - 1].duration : null;\n        }\n        return null;\n    }\n    \n    static getMemoryInfo() {\n        if ('memory' in performance) {\n            return {\n                usedJSHeapSize: performance.memory.usedJSHeapSize,\n                totalJSHeapSize: performance.memory.totalJSHeapSize,\n                jsHeapSizeLimit: performance.memory.jsHeapSizeLimit\n            };\n        }\n        return null;\n    }\n}\n\n// ការប្រើ Performance API\nlet navigationTiming = PerformanceManager.getNavigationTiming();\nif (navigationTiming) {\n    console.log('Navigation timing:', navigationTiming);\n}\n\nlet memoryInfo = PerformanceManager.getMemoryInfo();\nif (memoryInfo) {\n    console.log('Memory info:', memoryInfo);\n}\n\n// ឧទាហរណ៍ការវាស់ performance\nPerformanceManager.mark('start-operation');\n\n// ធ្វើប្រមាណកម្មអ្វីមួយ\nfor (let i = 0; i < 1000000; i++) {\n    // Simulate work\n}\n\nPerformanceManager.mark('end-operation');\nlet duration = PerformanceManager.measure('operation-duration', 'start-operation', 'end-operation');\nif (duration) {\n    console.log('Operation took:', duration, 'milliseconds');\n}",
    "tip": "ពិនិត្យ browser support មុនពេលប្រើ APIs និងផ្តល់ fallbacks សម្រាប់ browser ដែលមិនគាំទ្រ"
  },
  {
    "id": 81,
    "category": "JavaScript",
    "path": "/javascript/web-workers",
    "title": "មេរៀនទី២៦: Web Workers JavaScript",
    "explanation": "Web Workers អនុញ្ញាតឱ្យដំណើរការ JavaScript ក្នុង background thread ដាច់ដោយឡែកពី main UI thread។ នេះជួយកុំឱ្យ UI ជាប់ពេលធ្វើការគណនាធ្ងន់ៗ។",
    "code": "// Web Workers មូលដ្ឋាន\nconsole.log('=== Web Workers ===');\n\n// ពិនិត្យ Web Worker support\nif (typeof Worker !== 'undefined') {\n    console.log('Web Workers ត្រូវបានគាំទ្រ');\n} else {\n    console.log('Web Workers មិនត្រូវបានគាំទ្រ');\n}\n\n// Worker Manager Class\nclass WorkerManager {\n    constructor() {\n        this.workers = new Map();\n    }\n    \n    // បង្កើត worker ពី function\n    createWorkerFromFunction(func, name = 'worker') {\n        // បំលែង function ទៅ string\n        let funcString = func.toString();\n        \n        // បង្កើត worker script\n        let workerScript = `\n            self.onmessage = function(e) {\n                let result = (${funcString})(e.data);\n                self.postMessage(result);\n            };\n        `;\n        \n        // បង្កើត Blob URL\n        let blob = new Blob([workerScript], { type: 'application/javascript' });\n        let workerUrl = URL.createObjectURL(blob);\n        \n        // បង្កើត Worker\n        let worker = new Worker(workerUrl);\n        \n        // រក្សាទុក worker\n        this.workers.set(name, {\n            worker: worker,\n            url: workerUrl\n        });\n        \n        return worker;\n    }\n    \n    // បង្កើត worker ពីឯកសារ\n    createWorkerFromFile(scriptPath, name = 'worker') {\n        let worker = new Worker(scriptPath);\n        \n        this.workers.set(name, {\n            worker: worker,\n            url: scriptPath\n        });\n        \n        return worker;\n    }\n    \n    // ទទួល worker\n    getWorker(name) {\n        let workerData = this.workers.get(name);\n        return workerData ? workerData.worker : null;\n    }\n    \n    // បញ្ឈប់ worker\n    terminateWorker(name) {\n        let workerData = this.workers.get(name);\n        if (workerData) {\n            workerData.worker.terminate();\n            \n            // សម្អាត Blob URL\n            if (workerData.url.startsWith('blob:')) {\n                URL.revokeObjectURL(workerData.url);\n            }\n            \n            this.workers.delete(name);\n            return true;\n        }\n        return false;\n    }\n    \n    // បញ្ឈប់ workers ទាំងអស់\n    terminateAll() {\n        for (let [name, workerData] of this.workers) {\n            workerData.worker.terminate();\n            \n            if (workerData.url.startsWith('blob:')) {\n                URL.revokeObjectURL(workerData.url);\n            }\n        }\n        this.workers.clear();\n    }\n    \n    // ទទួលចំនួន workers\n    getWorkerCount() {\n        return this.workers.size;\n    }\n}\n\n// ការប្រើ Worker Manager\nlet workerManager = new WorkerManager();\n\n// ឧទាហរណ៍ 1: ការគណនាលេខបឋម\nfunction isPrimeWorkerFunction(data) {\n    let { number } = data;\n    \n    if (number < 2) return { number, isPrime: false };\n    if (number === 2) return { number, isPrime: true };\n    if (number % 2 === 0) return { number, isPrime: false };\n    \n    for (let i = 3; i <= Math.sqrt(number); i += 2) {\n        if (number % i === 0) {\n            return { number, isPrime: false };\n        }\n    }\n    \n    return { number, isPrime: true };\n}\n\n// បង្កើត prime checker worker\nlet primeWorker = workerManager.createWorkerFromFunction(isPrimeWorkerFunction, 'primeChecker');\n\n// ការប្រើ prime worker\nprimeWorker.onmessage = function(e) {\n    let { number, isPrime } = e.data;\n    console.log(`${number} ${isPrime ? 'គឺជាលេខបឋម' : 'មិនមែនជាលេខបឋម'}`);\n};\n\nprimeWorker.onerror = function(error) {\n    console.error('Prime worker error:', error);\n};\n\n// ផ្ញើការងារទៅ worker\nprimeWorker.postMessage({ number: 982451653 });\nprimeWorker.postMessage({ number: 982451654 });\n\n// ឧទាហរណ៍ 2: ការគណនា Fibonacci\nfunction fibonacciWorkerFunction(data) {\n    let { n } = data;\n    \n    function fibonacci(num) {\n        if (num <= 1) return num;\n        return fibonacci(num - 1) + fibonacci(num - 2);\n    }\n    \n    let startTime = Date.now();\n    let result = fibonacci(n);\n    let endTime = Date.now();\n    \n    return {\n        n: n,\n        result: result,\n        duration: endTime - startTime\n    };\n}\n\n// បង្កើត fibonacci worker\nlet fibWorker = workerManager.createWorkerFromFunction(fibonacciWorkerFunction, 'fibonacci');\n\nfibWorker.onmessage = function(e) {\n    let { n, result, duration } = e.data;\n    console.log(`Fibonacci(${n}) = ${result} (${duration}ms)`);\n};\n\nfibWorker.onerror = function(error) {\n    console.error('Fibonacci worker error:', error);\n};\n\n// ផ្ញើការងារ fibonacci\nfibWorker.postMessage({ n: 35 });\n\n// ឧទាហរណ៍ 3: ការដំណើរការ Array ធំ\nfunction arrayProcessorFunction(data) {\n    let { array, operation } = data;\n    let result;\n    \n    switch (operation) {\n        case 'sum':\n            result = array.reduce((sum, num) => sum + num, 0);\n            break;\n        case 'average':\n            result = array.reduce((sum, num) => sum + num, 0) / array.length;\n            break;\n        case 'max':\n            result = Math.max(...array);\n            break;\n        case 'min':\n            result = Math.min(...array);\n            break;\n        case 'sort':\n            result = [...array].sort((a, b) => a - b);\n            break;\n        case 'filter-even':\n            result = array.filter(num => num % 2 === 0);\n            break;\n        default:\n            result = array;\n    }\n    \n    return {\n        operation: operation,\n        result: result,\n        originalLength: array.length,\n        resultLength: Array.isArray(result) ? result.length : 1\n    };\n}\n\n// បង្កើត array processor worker\nlet arrayWorker = workerManager.createWorkerFromFunction(arrayProcessorFunction, 'arrayProcessor');\n\narrayWorker.onmessage = function(e){\n    let { operation, result, originalLength, resultLength } = e.data;\n    console.log(`Array ${operation}:`, {\n        result: Array.isArray(result) && result.length > 10 ? \n                `Array of ${resultLength} items` : result,\n        originalLength,\n        resultLength\n    });\n};\n\n// បង្កើត array ធំ\nlet bigArray = Array.from({ length: 1000000 }, () => Math.floor(Math.random() * 1000));\n\n// ផ្ញើការងារផ្សេងៗទៅ worker\narrayWorker.postMessage({ array: bigArray, operation: 'sum' });\narrayWorker.postMessage({ array: bigArray, operation: 'average' });\narrayWorker.postMessage({ array: bigArray.slice(0, 100), operation: 'sort' });\n\n// Shared Worker (ប្រើបានក្នុង browser ខ្លះ)\nclass SharedWorkerManager {\n    constructor() {\n        this.sharedWorkers = new Map();\n    }\n    \n    createSharedWorker(scriptPath, name) {\n        if (typeof SharedWorker !== 'undefined') {\n            let sharedWorker = new SharedWorker(scriptPath, name);\n            this.sharedWorkers.set(name, sharedWorker);\n            return sharedWorker;\n        } else {\n            console.log('SharedWorker មិនត្រូវបានគាំទ្រ');\n            return null;\n        }\n    }\n    \n    getSharedWorker(name) {\n        return this.sharedWorkers.get(name);\n    }\n}\n\n// Worker Pool សម្រាប់ការគ្រប់គ្រងការងារច្រើន\nclass WorkerPool {\n    constructor(workerScript, poolSize = 4) {\n        this.workerScript = workerScript;\n        this.poolSize = poolSize;\n        this.workers = [];\n        this.queue = [];\n        this.activeJobs = 0;\n        \n        this.initializePool();\n    }\n    \n    initializePool() {\n        for (let i = 0; i < this.poolSize; i++) {\n            let worker = new Worker(this.workerScript);\n            worker.isAvailable = true;\n            worker.onmessage = (e) => this.handleWorkerMessage(worker, e);\n            worker.onerror = (error) => this.handleWorkerError(worker, error);\n            this.workers.push(worker);\n        }\n    }\n    \n    handleWorkerMessage(worker, e) {\n        worker.isAvailable = true;\n        this.activeJobs--;\n        \n        // ហៅ callback\n        if (worker.currentJob && worker.currentJob.callback) {\n            worker.currentJob.callback(null, e.data);\n        }\n        \n        worker.currentJob = null;\n        \n        // ដំណើរការការងារបន្ទាប់\n        this.processQueue();\n    }\n    \n    handleWorkerError(worker, error) {\n        worker.isAvailable = true;\n        this.activeJobs--;\n        \n        // ហៅ error callback\n        if (worker.currentJob && worker.currentJob.callback) {\n            worker.currentJob.callback(error, null);\n        }\n        \n        worker.currentJob = null;\n        \n        // ដំណើរការការងារបន្ទាប់\n        this.processQueue();\n    }\n    \n    execute(data, callback) {\n        let job = { data, callback };\n        \n        // រកមើល worker ដែលទំនេរ\n        let availableWorker = this.workers.find(w => w.isAvailable);\n        \n        if (availableWorker) {\n            this.assignJob(availableWorker, job);\n        } else {\n            // បន្ថែមទៅ queue\n            this.queue.push(job);\n        }\n    }\n    \n    assignJob(worker, job) {\n        worker.isAvailable = false;\n        worker.currentJob = job;\n        this.activeJobs++;\n        worker.postMessage(job.data);\n    }\n    \n    processQueue() {\n        if (this.queue.length > 0) {\n            let availableWorker = this.workers.find(w => w.isAvailable);\n            if (availableWorker) {\n                let job = this.queue.shift();\n                this.assignJob(availableWorker, job);\n            }\n        }\n    }\n    \n    getStatus() {\n        return {\n            totalWorkers: this.workers.length,\n            availableWorkers: this.workers.filter(w => w.isAvailable).length,\n            activeJobs: this.activeJobs,\n            queuedJobs: this.queue.length\n        };\n    }\n    \n    terminate() {\n        this.workers.forEach(worker => worker.terminate());\n        this.workers = [];\n        this.queue = [];\n        this.activeJobs = 0;\n    }\n}\n\n// Service Worker (សម្រាប់ PWA)\nconsole.log('\\n=== Service Worker ===');\n\nclass ServiceWorkerManager {\n    static async register(scriptPath, options = {}) {\n        if ('serviceWorker' in navigator) {\n            try {\n                let registration = await navigator.serviceWorker.register(scriptPath, options);\n                console.log('Service Worker បានចុះឈ្មោះ:', registration.scope);\n                \n                // ស្តាប់ការកែប្រែ\n                registration.addEventListener('updatefound', () => {\n                    console.log('Service Worker ថ្មីកំពុងដំឡើង...');\n                    \n                    let newWorker = registration.installing;\n                    newWorker.addEventListener('statechange', () => {\n                        console.log('Service Worker state:', newWorker.state);\n                        \n                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                            console.log('Service Worker ថ្មីបានដំឡើង');\n                        }\n                    });\n                });\n                \n                return registration;\n            } catch (error) {\n                console.error('Service Worker registration បរាជ័យ:', error);\n                throw error;\n            }\n        } else {\n            throw new Error('Service Worker មិនត្រូវបានគាំទ្រ');\n        }\n    }\n    \n    static async unregister() {\n        if ('serviceWorker' in navigator) {\n            let registrations = await navigator.serviceWorker.getRegistrations();\n            \n            for (let registration of registrations) {\n                await registration.unregister();\n                console.log('Service Worker បានលុបចុះឈ្មោះ');\n            }\n        }\n    }\n    \n    static async getRegistrations() {\n        if ('serviceWorker' in navigator) {\n            return await navigator.serviceWorker.getRegistrations();\n        }\n        return [];\n    }\n    \n    static onMessage(callback) {\n        if ('serviceWorker' in navigator) {\n            navigator.serviceWorker.addEventListener('message', callback);\n        }\n    }\n    \n    static sendMessage(message) {\n        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n            navigator.serviceWorker.controller.postMessage(message);\n        }\n    }\n}\n\n// ឧទាហរណ៍ការប្រើ Service Worker\n// ServiceWorkerManager.register('/sw.js')\n//     .then(registration => {\n//         console.log('Service Worker ready');\n//     })\n//     .catch(error => {\n//         console.error('Service Worker failed:', error);\n//     });\n\n// Worker Communication Helper\nclass WorkerCommunicator {\n    constructor(worker) {\n        this.worker = worker;\n        this.messageId = 0;\n        this.pendingMessages = new Map();\n        \n        this.worker.onmessage = (e) => this.handleMessage(e);\n        this.worker.onerror = (error) => this.handleError(error);\n    }\n    \n    handleMessage(e) {\n        let { id, result, error } = e.data;\n        \n        if (this.pendingMessages.has(id)) {\n            let { resolve, reject } = this.pendingMessages.get(id);\n            this.pendingMessages.delete(id);\n            \n            if (error) {\n                reject(new Error(error));\n            } else {\n                resolve(result);\n            }\n        }\n    }\n    \n    handleError(error) {\n        console.error('Worker error:', error);\n        \n        // Reject all pending messages\n        for (let [id, { reject }] of this.pendingMessages) {\n            reject(new Error('Worker error'));\n        }\n        this.pendingMessages.clear();\n    }\n    \n    execute(data) {\n        return new Promise((resolve, reject) => {\n            let id = ++this.messageId;\n            \n            this.pendingMessages.set(id, { resolve, reject });\n            \n            this.worker.postMessage({\n                id: id,\n                data: data\n            });\n            \n            // Timeout\n            setTimeout(() => {\n                if (this.pendingMessages.has(id)) {\n                    this.pendingMessages.delete(id);\n                    reject(new Error('Worker timeout'));\n                }\n            }, 30000); // 30 seconds timeout\n        });\n    }\n    \n    terminate() {\n        // Reject all pending messages\n        for (let [id, { reject }] of this.pendingMessages) {\n            reject(new Error('Worker terminated'));\n        }\n        this.pendingMessages.clear();\n        \n        this.worker.terminate();\n    }\n}\n\n// Background Task Scheduler\nclass BackgroundTaskScheduler {\n    constructor() {\n        this.tasks = [];\n        this.isRunning = false;\n        this.workerManager = new WorkerManager();\n    }\n    \n    addTask(taskFunction, data, priority = 0) {\n        let task = {\n            id: Date.now() + Math.random(),\n            function: taskFunction,\n            data: data,\n            priority: priority,\n            status: 'pending',\n            createdAt: new Date()\n        };\n        \n        this.tasks.push(task);\n        this.tasks.sort((a, b) => b.priority - a.priority); // Priority ខ្ពស់ដំបូង\n        \n        if (!this.isRunning) {\n            this.processTasks();\n        }\n        \n        return task.id;\n    }\n    \n    async processTasks() {\n        this.isRunning = true;\n        \n        while (this.tasks.length > 0) {\n            let task = this.tasks.shift();\n            \n            try {\n                task.status = 'running';\n                task.startedAt = new Date();\n                \n                // បង្កើត worker សម្រាប់ task\n                let worker = this.workerManager.createWorkerFromFunction(\n                    task.function, \n                    `task-${task.id}`\n                );\n                \n                let communicator = new WorkerCommunicator(worker);\n                \n                // ដំណើរការ task\n                let result = await communicator.execute(task.data);\n                \n                task.status = 'completed';\n                task.completedAt = new Date();\n                task.result = result;\n                \n                console.log(`Task ${task.id} completed:`, result);\n                \n                // សម្អាត worker\n                communicator.terminate();\n                this.workerManager.terminateWorker(`task-${task.id}`);\n                \n            } catch (error) {\n                task.status = 'failed';\n                task.error = error.message;\n                task.completedAt = new Date();\n                \n                console.error(`Task ${task.id} failed:`, error.message);\n            }\n        }\n        \n        this.isRunning = false;\n        console.log('ការងារទាំងអស់បានបញ្ចប់');\n    }\n    \n    getTaskStatus(taskId) {\n        return this.tasks.find(task => task.id === taskId);\n    }\n    \n    cancelTask(taskId) {\n        let taskIndex = this.tasks.findIndex(task => task.id === taskId);\n        if (taskIndex !== -1) {\n            this.tasks.splice(taskIndex, 1);\n            return true;\n        }\n        return false;\n    }\n    \n    getQueueStatus() {\n        return {\n            totalTasks: this.tasks.length,\n            pendingTasks: this.tasks.filter(t => t.status === 'pending').length,\n            runningTasks: this.tasks.filter(t => t.status === 'running').length,\n            isRunning: this.isRunning\n        };\n    }\n}\n\n// ការប្រើ Background Task Scheduler\nlet scheduler = new BackgroundTaskScheduler();\n\n// បន្ថែមការងារ\nlet taskId1 = scheduler.addTask(\n    function(data) {\n        let { numbers } = data;\n        return numbers.reduce((sum, num) => sum + num, 0);\n    },\n    { numbers: [1, 2, 3, 4, 5] },\n    1 // priority\n);\n\nlet taskId2 = scheduler.addTask(\n    function(data) {\n        let { text } = data;\n        return text.split('').reverse().join('');\n    },\n    { text: 'Hello World' },\n    2 // priority ខ្ពស់ជាង\n);\n\nconsole.log('\\nTasks added:', { taskId1, taskId2 });\nconsole.log('Queue status:', scheduler.getQueueStatus());\n\n// សម្អាតនៅពេលចាកចេញ\nwindow.addEventListener('beforeunload', () => {\n    workerManager.terminateAll();\n    console.log('បានសម្អាត workers ទាំងអស់');\n});",
    "tip": "ប្រើ Web Workers សម្រាប់ការគណនាធ្ងន់ៗដើម្បីកុំឱ្យ UI ជាប់ និងចងចាំបិទ workers ពេលមិនប្រើ"
  },
  {
    "id": 82,
    "category": "JavaScript",
    "path": "/javascript/performance-optimization",
    "title": "មេរៀនទី២៧: ការកែលម្អដំណើរការ JavaScript (Performance Optimization)",
    "explanation": "ការកែលម្អដំណើរការ JavaScript សំខាន់សម្រាប់បង្កើតកម្មវិធីលឿននិងមានប្រសិទ្ធភាព។ នេះរួមមានការបង្រួម DOM manipulation, ការប្រើ efficient algorithms, memory management, និងការជៀសវាង performance bottlenecks។",
    "code": "// DOM Manipulation Optimization\nconsole.log('=== DOM Manipulation Optimization ===');\n\n// មិនល្អ - DOM manipulation ច្រើនដង\nfunction inefficientDOMUpdate() {\n    let container = document.getElementById('container');\n    \n    // នេះនឹងធ្វើឱ្យ reflow/repaint រាល់ដង\n    for (let i = 0; i < 1000; i++) {\n        let div = document.createElement('div');\n        div.textContent = `Item ${i}`;\n        container.appendChild(div); // Slow!\n    }\n}\n\n// ល្អ - Batch DOM updates\nfunction efficientDOMUpdate() {\n    let container = document.getElementById('container');\n    let fragment = document.createDocumentFragment();\n    \n    // បង្កើតធាតុក្នុង memory មុន\n    for (let i = 0; i < 1000; i++) {\n        let div = document.createElement('div');\n        div.textContent = `Item ${i}`;\n        fragment.appendChild(div);\n    }\n    \n    // បន្ថែមទៅ DOM តែម្តង\n    container.appendChild(fragment); // Fast!\n}\n\n// ល្អជាង - ប្រើ innerHTML\nfunction veryEfficientDOMUpdate() {\n    let container = document.getElementById('container');\n    let html = '';\n    \n    for (let i = 0; i < 1000; i++) {\n        html += `<div>Item ${i}</div>`;\n    }\n    \n    container.innerHTML = html; // Fastest!\n}\n\n// Event Delegation\nconsole.log('\\n=== Event Delegation ===');\n\n// មិនល្អ - Event listener លើធាតុនីមួយៗ\nfunction inefficientEventHandling() {\n    let buttons = document.querySelectorAll('.button');\n    \n    buttons.forEach(button => {\n        button.addEventListener('click', function() {\n            console.log('Button clicked:', this.textContent);\n        });\n    });\n}\n\n// ល្អ - Event delegation\nfunction efficientEventHandling() {\n    let container = document.getElementById('button-container');\n    \n    // Event listener តែមួយលើ parent\n    container.addEventListener('click', function(e) {\n        if (e.target.classList.contains('button')) {\n            console.log('Button clicked:', e.target.textContent);\n        }\n    });\n}\n\n// Memory Management\nconsole.log('\\n=== Memory Management ===');\n\nclass MemoryOptimizer {\n    // Object pooling\n    static createObjectPool(createFn, resetFn, initialSize = 10) {\n        let pool = [];\n        \n        // បង្កើតវត្ថុដំបូង\n        for (let i = 0; i < initialSize; i++) {\n            pool.push(createFn());\n        }\n        \n        return {\n            acquire() {\n                return pool.length > 0 ? pool.pop() : createFn();\n            },\n            \n            release(obj) {\n                resetFn(obj);\n                pool.push(obj);\n            },\n            \n            size() {\n                return pool.length;\n            }\n        };\n    }\n    \n    // WeakMap សម្រាប់ private data\n    static createPrivateStore() {\n        return new WeakMap();\n    }\n    \n    // Memory usage monitoring\n    static getMemoryUsage() {\n        if ('memory' in performance) {\n            return {\n                used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),\n                total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),\n                limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)\n            };\n        }\n        return null;\n    }\n    \n    // Force garbage collection (Chrome DevTools only)\n    static forceGC() {\n        if (window.gc) {\n            window.gc();\n            console.log('Garbage collection forced');\n        } else {\n            console.log('GC not available (enable in Chrome DevTools)');\n        }\n    }\n}\n\n// ឧទាហរណ៍ Object Pool\nlet particlePool = MemoryOptimizer.createObjectPool(\n    () => ({ x: 0, y: 0, vx: 0, vy: 0, life: 1 }), // create\n    (obj) => { obj.x = 0; obj.y = 0; obj.vx = 0; obj.vy = 0; obj.life = 1; } // reset\n);\n\n// ការប្រើ object pool\nlet particle = particlePool.acquire();\nparticle.x = 100;\nparticle.y = 200;\n// ... ប្រើ particle\nparticlePool.release(particle); // ត្រលប់ទៅ pool\n\nconsole.log('Object pool size:', particlePool.size());\n\n// Algorithm Optimization\nconsole.log('\\n=== Algorithm Optimization ===');\n\nclass AlgorithmOptimizer {\n    // Memoization\n    static memoize(fn) {\n        let cache = new Map();\n        \n        return function(...args) {\n            let key = JSON.stringify(args);\n            \n            if (cache.has(key)) {\n                return cache.get(key);\n            }\n            \n            let result = fn.apply(this, args);\n            cache.set(key, result);\n            return result;\n        };\n    }\n    \n    // Debouncing\n    static debounce(fn, delay) {\n        let timeoutId;\n        \n        return function(...args) {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(() => fn.apply(this, args), delay);\n        };\n    }\n    \n    // Throttling\n    static throttle(fn, limit) {\n        let inThrottle;\n        \n        return function(...args) {\n            if (!inThrottle) {\n                fn.apply(this, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n    \n    // Binary search\n    static binarySearch(arr, target) {\n        let left = 0;\n        let right = arr.length - 1;\n        \n        while (left <= right) {\n            let mid = Math.floor((left + right) / 2);\n            \n            if (arr[mid] === target) {\n                return mid;\n            } else if (arr[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return -1;\n    }\n    \n    // Quick sort\n    static quickSort(arr) {\n        if (arr.length <= 1) return arr;\n        \n        let pivot = arr[Math.floor(arr.length / 2)];\n        let left = arr.filter(x => x < pivot);\n        let middle = arr.filter(x => x === pivot);\n        let right = arr.filter(x => x > pivot);\n        \n        return [\n            ...this.quickSort(left),\n            ...middle,\n            ...this.quickSort(right)\n        ];\n    }\n}\n\n// ឧទាហរណ៍ Memoization\nlet expensiveFunction = AlgorithmOptimizer.memoize(function(n) {\n    console.log(`គណនា fibonacci(${n})...`);\n    if (n <= 1) return n;\n    return expensiveFunction(n - 1) + expensiveFunction(n - 2);\n});\n\nconsole.log('Fibonacci with memoization:');\nconsole.log('fibonacci(10):', expensiveFunction(10)); // គណនា\nconsole.log('fibonacci(10):', expensiveFunction(10)); // ពី cache\n\n// ឧទាហរណ៍ Debouncing\nlet searchInput = document.getElementById('search');\nif (searchInput) {\n    let debouncedSearch = AlgorithmOptimizer.debounce(function(query) {\n        console.log('ស្វែងរក:', query);\n        // ធ្វើ API call នៅទីនេះ\n    }, 300);\n    \n    searchInput.addEventListener('input', (e) => {\n        debouncedSearch(e.target.value);\n    });\n}\n\n// Performance Monitoring\nconsole.log('\\n=== Performance Monitoring ===');\n\nclass PerformanceMonitor {\n    constructor() {\n        this.metrics = new Map();\n        this.observers = [];\n    }\n    \n    // វាស់ពេលវេលាដំណើរការ\n    time(label) {\n        this.metrics.set(label, {\n            start: performance.now(),\n            end: null,\n            duration: null\n        });\n    }\n    \n    timeEnd(label) {\n        let metric = this.metrics.get(label);\n        if (metric) {\n            metric.end = performance.now();\n            metric.duration = metric.end - metric.start;\n            console.log(`${label}: ${metric.duration.toFixed(2)}ms`);\n            return metric.duration;\n        }\n        return null;\n    }\n    \n    // វាស់ memory usage\n    measureMemory(label) {\n        let memInfo = MemoryOptimizer.getMemoryUsage();\n        if (memInfo) {\n            console.log(`${label} - Memory: ${memInfo.used}MB / ${memInfo.total}MB`);\n            return memInfo;\n        }\n        return null;\n    }\n    \n    // Performance Observer\n    observePerformance() {\n        if ('PerformanceObserver' in window) {\n            // Observe navigation timing\n            let navObserver = new PerformanceObserver((list) => {\n                for (let entry of list.getEntries()) {\n                    console.log('Navigation timing:', {\n                        name: entry.name,\n                        duration: entry.duration,\n                        startTime: entry.startTime\n                    });\n                }\n            });\n            \n            try {\n                navObserver.observe({ entryTypes: ['navigation'] });\n                this.observers.push(navObserver);\n            } catch (e) {\n                console.log('Navigation timing not supported');\n            }\n            \n            // Observe resource timing\n            let resourceObserver = new PerformanceObserver((list) => {\n                for (let entry of list.getEntries()) {\n                    if (entry.duration > 100) { // តែ resources ដែលយឺត\n                        console.log('Slow resource:', {\n                            name: entry.name,\n                            duration: entry.duration,\n                            size: entry.transferSize\n                        });\n                    }\n                }\n            });\n            \n            try {\n                resourceObserver.observe({ entryTypes: ['resource'] });\n                this.observers.push(resourceObserver);\n            } catch (e) {\n                console.log('Resource timing not supported');\n            }\n        }\n    }\n    \n    // FPS monitoring\n    monitorFPS(callback, duration = 5000) {\n        let frames = 0;\n        let startTime = performance.now();\n        let lastTime = startTime;\n        \n        function countFrame() {\n            frames++;\n            let currentTime = performance.now();\n            \n            if (currentTime - startTime >= duration) {\n                let fps = Math.round((frames * 1000) / (currentTime - startTime));\n                callback(fps);\n                return;\n            }\n            \n            requestAnimationFrame(countFrame);\n        }\n        \n        requestAnimationFrame(countFrame);\n    }\n    \n    disconnect() {\n        this.observers.forEach(observer => observer.disconnect());\n        this.observers = [];\n    }\n}\n\n// ការប្រើ Performance Monitor\nlet perfMonitor = new PerformanceMonitor();\nperfMonitor.observePerformance();\n\n// វាស់ការដំណើរការ\nperfMonitor.time('array-processing');\n\nlet largeArray = Array.from({ length: 100000 }, (_, i) => i);\nlet processedArray = largeArray\n    .filter(n => n % 2 === 0)\n    .map(n => n * 2)\n    .slice(0, 1000);\n\nperfMonitor.timeEnd('array-processing');\nperfMonitor.measureMemory('after-array-processing');\n\n// FPS monitoring\nperfMonitor.monitorFPS((fps) => {\n    console.log('Average FPS:', fps);\n});\n\n// Code Optimization Techniques\nconsole.log('\\n=== Code Optimization Techniques ===');\n\nclass OptimizationTechniques {\n    // Loop optimization\n    static optimizedLoop(array, callback) {\n        // Cache array length\n        for (let i = 0, len = array.length; i < len; i++) {\n            callback(array[i], i);\n        }\n    }\n    \n    // String concatenation optimization\n    static efficientStringConcat(strings) {\n        // ប្រើ array join ជំនួស += operator\n        return strings.join('');\n    }\n    \n    // Object property access optimization\n    static optimizePropertyAccess(obj, property) {\n        // Cache property access\n        let value = obj[property];\n        return value;\n    }\n    \n    // Function call optimization\n    static optimizeFunctionCalls() {\n        // ជៀសវាង function calls ក្នុង loops\n        let arr = [1, 2, 3, 4, 5];\n        let len = arr.length; // Cache length\n        \n        for (let i = 0; i < len; i++) {\n            // ធ្វើអ្វីមួយ\n        }\n    }\n    \n    // Type coercion optimization\n    static fastTypeCheck(value) {\n        // ប្រើ typeof ជំនួស instanceof ពេលអាចធ្វើបាន\n        return typeof value === 'string';\n    }\n    \n    // Array operations optimization\n    static optimizedArrayOps(array) {\n        // ប្រើ for loops ជំនួស array methods សម្រាប់ performance critical code\n        let sum = 0;\n        for (let i = 0, len = array.length; i < len; i++) {\n            sum += array[i];\n        }\n        return sum;\n    }\n}\n\n// Lazy Loading\nconsole.log('\\n=== Lazy Loading ===');\n\nclass LazyLoader {\n    constructor() {\n        this.loadedModules = new Map();\n        this.loadingPromises = new Map();\n    }\n    \n    async loadModule(moduleName, loader) {\n        // ពិនិត្យថាតើបានផ្ទុកហើយ\n        if (this.loadedModules.has(moduleName)) {\n            return this.loadedModules.get(moduleName);\n        }\n        \n        // ពិនិត្យថាតើកំពុងផ្ទុក\n        if (this.loadingPromises.has(moduleName)) {\n            return this.loadingPromises.get(moduleName);\n        }\n        \n        // ចាប់ផ្តើមផ្ទុក\n        let loadingPromise = loader().then(module => {\n            this.loadedModules.set(moduleName, module);\n            this.loadingPromises.delete(moduleName);\n            return module;\n        }).catch(error => {\n            this.loadingPromises.delete(moduleName);\n            throw error;\n        });\n        \n        this.loadingPromises.set(moduleName, loadingPromise);\n        return loadingPromise;\n    }\n    \n    isLoaded(moduleName) {\n        return this.loadedModules.has(moduleName);\n    }\n    \n    isLoading(moduleName) {\n        return this.loadingPromises.has(moduleName);\n    }\n    \n    unload(moduleName) {\n        this.loadedModules.delete(moduleName);\n        this.loadingPromises.delete(moduleName);\n    }\n}\n\n// ការប្រើ Lazy Loader\nlet lazyLoader = new LazyLoader();\n\n// ក្លែងធ្វើ module loader\nasync function loadHeavyModule() {\n    // Simulate loading time\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return {\n        heavyFunction: () => {\n            console.log('Heavy function executed');\n        },\n        data: Array.from({ length: 10000 }, (_, i) => i)\n    };\n}\n\n// ផ្ទុក module ពេលត្រូវការ\nlazyLoader.loadModule('heavyModule', loadHeavyModule)\n    .then(module => {\n        console.log('Heavy module loaded');\n        module.heavyFunction();\n    })\n    .catch(error => {\n        console.error('Failed to load module:', error);\n    });\n\n// Virtual Scrolling\nconsole.log('\\n=== Virtual Scrolling ===');\n\nclass VirtualScroller {\n    constructor(container, itemHeight, totalItems, renderItem) {\n        this.container = container;\n        this.itemHeight = itemHeight;\n        this.totalItems = totalItems;\n        this.renderItem = renderItem;\n        \n        this.visibleStart = 0;\n        this.visibleEnd = 0;\n        this.scrollTop = 0;\n        \n        this.init();\n    }\n    \n    init() {\n        // កំណត់ទំហំ container\n        this.containerHeight = this.container.clientHeight;\n        this.visibleCount = Math.ceil(this.containerHeight / this.itemHeight) + 1;\n        \n        // បង្កើត viewport\n        this.viewport = document.createElement('div');\n        this.viewport.style.height = `${this.totalItems * this.itemHeight}px`;\n        this.viewport.style.position = 'relative';\n        \n        this.container.appendChild(this.viewport);\n        \n        // ស្តាប់ scroll events\n        this.container.addEventListener('scroll', () => {\n            this.handleScroll();\n        });\n        \n        this.render();\n    }\n    \n    handleScroll() {\n        this.scrollTop = this.container.scrollTop;\n        this.visibleStart = Math.floor(this.scrollTop / this.itemHeight);\n        this.visibleEnd = Math.min(\n            this.visibleStart + this.visibleCount,\n            this.totalItems\n        );\n        \n        this.render();\n    }\n    \n    render() {\n        // សម្អាត viewport\n        this.viewport.innerHTML = '';\n        \n        // Render visible items\n        for (let i = this.visibleStart; i < this.visibleEnd; i++) {\n            let item = this.renderItem(i);\n            item.style.position = 'absolute';\n            item.style.top = `${i * this.itemHeight}px`;\n            item.style.height = `${this.itemHeight}px`;\n            \n            this.viewport.appendChild(item);\n        }\n    }\n    \n    scrollToIndex(index) {\n        this.container.scrollTop = index * this.itemHeight;\n    }\n    \n    updateTotalItems(newTotal) {\n        this.totalItems = newTotal;\n        this.viewport.style.height = `${this.totalItems * this.itemHeight}px`;\n        this.render();\n    }\n}\n\n// Performance Testing\nconsole.log('\\n=== Performance Testing ===');\n\nclass PerformanceTester {\n    static benchmark(name, fn, iterations = 1000) {\n        console.log(`\\nBenchmarking ${name}...`);\n        \n        let startTime = performance.now();\n        let startMemory = MemoryOptimizer.getMemoryUsage();\n        \n        for (let i = 0; i < iterations; i++) {\n            fn();\n        }\n        \n        let endTime = performance.now();\n        let endMemory = MemoryOptimizer.getMemoryUsage();\n        \n        let duration = endTime - startTime;\n        let avgTime = duration / iterations;\n        \n        console.log(`${name} Results:`);\n        console.log(`- Total time: ${duration.toFixed(2)}ms`);\n        console.log(`- Average time: ${avgTime.toFixed(4)}ms`);\n        console.log(`- Operations per second: ${Math.round(1000 / avgTime)}`);\n        \n        if (startMemory && endMemory) {\n            let memoryDiff = endMemory.used - startMemory.used;\n            console.log(`- Memory change: ${memoryDiff}MB`);\n        }\n        \n        return {\n            totalTime: duration,\n            averageTime: avgTime,\n            opsPerSecond: Math.round(1000 / avgTime)\n        };\n    }\n    \n    static compare(tests) {\n        console.log('\\n=== Performance Comparison ===');\n        \n        let results = {};\n        \n        for (let [name, fn] of Object.entries(tests)) {\n            results[name] = this.benchmark(name, fn);\n        }\n        \n        // រកមើលដែលលឿនបំផុត\n        let fastest = Object.keys(results).reduce((a, b) => \n            results[a].averageTime < results[b].averageTime ? a : b\n        );\n        \n        console.log(`\\nលឿនបំផុត: ${fastest}`);\n        \n        // បង្ហាញការប្រៀបធៀប\n        for (let [name, result] of Object.entries(results)) {\n            if (name !== fastest) {\n                let ratio = result.averageTime / results[fastest].averageTime;\n                console.log(`${name} យឺតជាង ${fastest} ${ratio.toFixed(2)}x`);\n            }\n        }\n        \n        return results;\n    }\n}\n\n// ឧទាហរណ៍ការប្រៀបធៀប performance\nlet testArray = Array.from({ length: 10000 }, (_, i) => i);\n\nPerformanceTester.compare({\n    'for-loop': () => {\n        let sum = 0;\n        for (let i = 0; i < testArray.length; i++) {\n            sum += testArray[i];\n        }\n        return sum;\n    },\n    \n    'forEach': () => {\n        let sum = 0;\n        testArray.forEach(num => sum += num);\n        return sum;\n    },\n    \n    'reduce': () => {\n        return testArray.reduce((sum, num) => sum + num, 0);\n    }\n});\n\n// Cleanup\nwindow.addEventListener('beforeunload', () => {\n    perfMonitor.disconnect();\n    console.log('Performance monitoring stopped');\n});",
    "tip": "វាស់ performance មុននិងក្រោយ optimization ហើយប្រើ browser DevTools ដើម្បីកំណត់ bottlenecks"
  },
  {
    "id": 83,
    "category": "JavaScript",
    "path": "/javascript/testing-debugging",
    "title": "មេរៀនទី២៨: ការសាកល្បងនិងការកែកំហុស JavaScript (Testing and Debugging)",
    "explanation": "ការសាកល្បងនិងការកែកំហុសគឺជាផ្នែកសំខាន់នៃការអភិវឌ្ឍន៍។ JavaScript ផ្តល់នូវឧបករណ៍ជាច្រើនសម្រាប់ការសាកល្បង unit testing, integration testing, និងការកែកំហុស។",
    "code": "// Console Debugging\nconsole.log('=== Console Debugging ===');\n\n// Console methods ផ្សេងៗ\nconsole.log('ព័ត៌មានធម្មតា');\nconsole.info('ព័ត៌មានបន្ថែម');\nconsole.warn('ការព្រមាន');\nconsole.error('កំហុស');\nconsole.debug('ព័ត៌មាន debug');\n\n// Console table\nlet សិស្ស = [\n    { ឈ្មោះ: 'សុខា', អាយុ: 20, ពិន្ទុ: 85 },\n    { ឈ្មោះ: 'ដារា', អាយុ: 19, ពិន្ទុ: 92 },\n    { ឈ្មោះ: 'វិចិត្រ', អាយុ: 21, ពិន្ទុ: 78 }\n];\n\nconsole.table(សិស្ស);\n\n// Console group\nconsole.group('ព័ត៌មានអ្នកប្រើ');\nconsole.log('ឈ្មោះ: សុខា');\nconsole.log('អាយុ: 25');\nconsole.log('ទីក្រុង: ភ្នំពេញ');\nconsole.groupEnd();\n\n// Console time\nconsole.time('ការគណនា');\nfor (let i = 0; i < 1000000; i++) {\n    // ការគណនាអ្វីមួយ\n}\nconsole.timeEnd('ការគណនា');\n\n// Console count\nfor (let i = 0; i < 5; i++) {\n    console.count('រាប់');\n}\n\n// Console trace\nfunction functionA() {\n    functionB();\n}\n\nfunction functionB() {\n    functionC();\n}\n\nfunction functionC() {\n    console.trace('Stack trace នៅទីនេះ');\n}\n\nfunctionA();\n\n// Assert\nconsole.assert(5 > 3, '5 ត្រូវតែធំជាង 3');\nconsole.assert(2 > 5, '2 មិនធំជាង 5 ទេ'); // នេះនឹងបង្ហាញកំហុស\n\n// Simple Testing Framework\nconsole.log('\\n=== Simple Testing Framework ===');\n\nclass SimpleTest {\n    constructor() {\n        this.tests = [];\n        this.passed = 0;\n        this.failed = 0;\n    }\n    \n    // បន្ថែម test case\n    test(description, testFunction) {\n        this.tests.push({ description, testFunction });\n    }\n    \n    // ដំណើរការ tests ទាំងអស់\n    run() {\n        console.log('\\n🧪 ចាប់ផ្តើម tests...');\n        \n        this.tests.forEach((test, index) => {\n            try {\n                test.testFunction();\n                this.passed++;\n                console.log(`✅ Test ${index + 1}: ${test.description}`);\n            } catch (error) {\n                this.failed++;\n                console.error(`❌ Test ${index + 1}: ${test.description}`);\n                console.error(`   Error: ${error.message}`);\n            }\n        });\n        \n        this.printSummary();\n    }\n    \n    printSummary() {\n        console.log('\\n📊 Test Summary:');\n        console.log(`✅ Passed: ${this.passed}`);\n        console.log(`❌ Failed: ${this.failed}`);\n        console.log(`📈 Total: ${this.tests.length}`);\n        \n        if (this.failed === 0) {\n            console.log('🎉 ទាំងអស់ជាប់!');\n        }\n    }\n    \n    // Assertion methods\n    static assertEqual(actual, expected, message = '') {\n        if (actual !== expected) {\n            throw new Error(`${message} - Expected: ${expected}, Actual: ${actual}`);\n        }\n    }\n    \n    static assertTrue(value, message = '') {\n        if (!value) {\n            throw new Error(`${message} - Expected true, got ${value}`);\n        }\n    }\n    \n    static assertFalse(value, message = '') {\n        if (value) {\n            throw new Error(`${message} - Expected false, got ${value}`);\n        }\n    }\n    \n    static assertThrows(fn, message = '') {\n        try {\n            fn();\n            throw new Error(`${message} - Expected function to throw`);\n        } catch (error) {\n            // Expected behavior\n        }\n    }\n    \n    static assertArrayEqual(actual, expected, message = '') {\n        if (JSON.stringify(actual) !== JSON.stringify(expected)) {\n            throw new Error(`${message} - Arrays not equal`);\n        }\n    }\n}\n\n// ឧទាហរណ៍ការប្រើ testing framework\nlet testSuite = new SimpleTest();\n\n// Math functions សម្រាប់ test\nfunction បូក(a, b) {\n    return a + b;\n}\n\nfunction ចែក(a, b) {\n    if (b === 0) {\n        throw new Error('មិនអាចចែកដោយសូន្យ');\n    }\n    return a / b;\n}\n\nfunction isPrime(n) {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\n// បន្ថែម test cases\ntestSuite.test('ការបូកលេខវិជ្ជមាន', () => {\n    SimpleTest.assertEqual(បូក(2, 3), 5, 'បូក 2 + 3');\n    SimpleTest.assertEqual(បូក(10, 15), 25, 'បូក 10 + 15');\n});\n\ntestSuite.test('ការបូកលេខអវិជ្ជមាន', () => {\n    SimpleTest.assertEqual(បូក(-2, -3), -5, 'បូកលេខអវិជ្ជមាន');\n    SimpleTest.assertEqual(បូក(-5, 10), 5, 'បូកលេខលាយ');\n});\n\ntestSuite.test('ការចែកធម្មតា', () => {\n    SimpleTest.assertEqual(ចែក(10, 2), 5, 'ចែក 10 ÷ 2');\n    SimpleTest.assertEqual(ចែក(15, 3), 5, 'ចែក 15 ÷ 3');\n});\n\ntestSuite.test('ការចែកដោយសូន្យ', () => {\n    SimpleTest.assertThrows(() => ចែក(10, 0), 'ត្រូវ throw error');\n});\n\ntestSuite.test('ការពិនិត្យលេខបឋម', () => {\n    SimpleTest.assertTrue(isPrime(7), '7 គឺជាលេខបឋម');\n    SimpleTest.assertTrue(isPrime(13), '13 គឺជាលេខបឋម');\n    SimpleTest.assertFalse(isPrime(4), '4 មិនមែនជាលេខបឋម');\n    SimpleTest.assertFalse(isPrime(1), '1 មិនមែនជាលេខបឋម');\n});\n\n// ដំណើរការ tests\ntestSuite.run();\n\n// Mock Objects\nconsole.log('\\n=== Mock Objects ===');\n\nclass MockFactory {\n    static createMock(originalObject) {\n        let mock = {};\n        let callHistory = new Map();\n        \n        for (let prop in originalObject) {\n            if (typeof originalObject[prop] === 'function') {\n                mock[prop] = function(...args) {\n                    // រក្សាទុកប្រវត្តិការហៅ\n                    if (!callHistory.has(prop)) {\n                        callHistory.set(prop, []);\n                    }\n                    callHistory.get(prop).push({\n                        args: args,\n                        timestamp: new Date()\n                    });\n                    \n                    // ត្រលប់តម្លៃ mock\n                    return mock[`_${prop}_returnValue`] || null;\n                };\n            } else {\n                mock[prop] = originalObject[prop];\n            }\n        }\n        \n        // Helper methods\n        mock._getCallHistory = (methodName) => callHistory.get(methodName) || [];\n        mock._wasCalledWith = (methodName, ...args) => {\n            let calls = callHistory.get(methodName) || [];\n            return calls.some(call => \n                JSON.stringify(call.args) === JSON.stringify(args)\n            );\n        };\n        mock._setReturnValue = (methodName, value) => {\n            mock[`_${methodName}_returnValue`] = value;\n        };\n        \n        return mock;\n    }\n}\n\n// ឧទាហរណ៍ការប្រើ Mock\nclass UserService {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n    }\n    \n    async getUser(id) {\n        return await this.apiClient.get(`/users/${id}`);\n    }\n    \n    async createUser(userData) {\n        return await this.apiClient.post('/users', userData);\n    }\n}\n\n// បង្កើត mock API client\nlet mockApiClient = MockFactory.createMock({\n    get: async (url) => {},\n    post: async (url, data) => {}\n});\n\n// កំណត់ return values\nmockApiClient._setReturnValue('get', { id: 1, name: 'Test User' });\nmockApiClient._setReturnValue('post', { id: 2, name: 'New User' });\n\n// Test ជាមួយ mock\nlet userService = new UserService(mockApiClient);\n\n// Test case ជាមួយ mock\ntestSuite.test('UserService.getUser', async () => {\n    let user = await userService.getUser(1);\n    SimpleTest.assertEqual(user.name, 'Test User', 'ត្រូវត្រលប់ user ត្រឹមត្រូវ');\n    SimpleTest.assertTrue(\n        mockApiClient._wasCalledWith('get', '/users/1'),\n        'ត្រូវហៅ API ជាមួយ URL ត្រឹមត្រូវ'\n    );\n});\n\n// Error Tracking\nconsole.log('\\n=== Error Tracking ===');\n\nclass ErrorTracker {\n    constructor() {\n        this.errors = [];\n        this.maxErrors = 100;\n        this.setupGlobalHandlers();\n    }\n    \n    setupGlobalHandlers() {\n        // JavaScript errors\n        window.addEventListener('error', (event) => {\n            this.logError({\n                type: 'javascript',\n                message: event.message,\n                filename: event.filename,\n                lineno: event.lineno,\n                colno: event.colno,\n                stack: event.error ? event.error.stack : null,\n                timestamp: new Date()\n            });\n        });\n        \n        // Promise rejections\n        window.addEventListener('unhandledrejection', (event) => {\n            this.logError({\n                type: 'promise',\n                message: event.reason.message || event.reason,\n                stack: event.reason.stack,\n                timestamp: new Date()\n            });\n        });\n    }\n    \n    logError(errorInfo) {\n        this.errors.push(errorInfo);\n        \n        // រក្សាតែ errors ចុងក្រោយ\n        if (this.errors.length > this.maxErrors) {\n            this.errors.shift();\n        }\n        \n        console.error('Error tracked:', errorInfo);\n        \n        // ផ្ញើទៅ server (ក្នុងកម្មវិធីពិត)\n        // this.sendToServer(errorInfo);\n    }\n    \n    getErrors() {\n        return [...this.errors];\n    }\n    \n    getErrorsByType(type) {\n        return this.errors.filter(error => error.type === type);\n    }\n    \n    clearErrors() {\n        this.errors = [];\n    }\n    \n    getErrorStats() {\n        let stats = {};\n        this.errors.forEach(error => {\n            stats[error.type] = (stats[error.type] || 0) + 1;\n        });\n        return stats;\n    }\n}\n\n// ការប្រើ Error Tracker\nlet errorTracker = new ErrorTracker();\n\n// ក្លែងធ្វើកំហុស\ntry {\n    throw new Error('នេះគឺជាកំហុសសាកល្បង');\n} catch (error) {\n    errorTracker.logError({\n        type: 'manual',\n        message: error.message,\n        stack: error.stack,\n        timestamp: new Date()\n    });\n}\n\nconsole.log('Error stats:', errorTracker.getErrorStats());\n\n// Performance Testing\nconsole.log('\\n=== Performance Testing ===');\n\nclass PerformanceTest {\n    static async measureAsync(name, asyncFn) {\n        console.time(name);\n        let startMemory = this.getMemoryUsage();\n        \n        try {\n            let result = await asyncFn();\n            console.timeEnd(name);\n            \n            let endMemory = this.getMemoryUsage();\n            if (startMemory && endMemory) {\n                console.log(`Memory change: ${endMemory.used - startMemory.used}MB`);\n            }\n            \n            return result;\n        } catch (error) {\n            console.timeEnd(name);\n            throw error;\n        }\n    }\n    \n    static getMemoryUsage() {\n        if ('memory' in performance) {\n            return {\n                used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),\n                total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024)\n            };\n        }\n        return null;\n    }\n    \n    static benchmark(name, fn, iterations = 1000) {\n        let times = [];\n        \n        for (let i = 0; i < iterations; i++) {\n            let start = performance.now();\n            fn();\n            let end = performance.now();\n            times.push(end - start);\n        }\n        \n        let avg = times.reduce((sum, time) => sum + time, 0) / times.length;\n        let min = Math.min(...times);\n        let max = Math.max(...times);\n        \n        console.log(`\\n📊 Benchmark ${name}:`);\n        console.log(`Average: ${avg.toFixed(4)}ms`);\n        console.log(`Min: ${min.toFixed(4)}ms`);\n        console.log(`Max: ${max.toFixed(4)}ms`);\n        console.log(`Ops/sec: ${Math.round(1000 / avg)}`);\n        \n        return { avg, min, max, times };\n    }\n}\n\n// Unit Testing Utilities\nconsole.log('\\n=== Unit Testing Utilities ===');\n\nclass TestUtils {\n    // Spy function\n    static createSpy(originalFn) {\n        let calls = [];\n        \n        function spy(...args) {\n            calls.push({\n                args: args,\n                timestamp: new Date()\n            });\n            \n            if (originalFn) {\n                return originalFn.apply(this, args);\n            }\n        }\n        \n        spy.calls = calls;\n        spy.callCount = () => calls.length;\n        spy.wasCalledWith = (...args) => {\n            return calls.some(call => \n                JSON.stringify(call.args) === JSON.stringify(args)\n            );\n        };\n        spy.reset = () => {\n            calls.length = 0;\n        };\n        \n        return spy;\n    }\n    \n    // Stub function\n    static createStub(returnValue) {\n        let stub = this.createSpy();\n        stub.returnValue = returnValue;\n        \n        let originalSpy = stub;\n        stub = function(...args) {\n            originalSpy.apply(this, args);\n            return stub.returnValue;\n        };\n        \n        // Copy spy methods\n        Object.assign(stub, originalSpy);\n        \n        return stub;\n    }\n    \n    // Fake timer\n    static createFakeTimer() {\n        let timers = [];\n        let currentTime = 0;\n        \n        return {\n            setTimeout: (fn, delay) => {\n                let id = timers.length;\n                timers.push({\n                    id: id,\n                    fn: fn,\n                    time: currentTime + delay,\n                    type: 'timeout'\n                });\n                return id;\n            },\n            \n            setInterval: (fn, delay) => {\n                let id = timers.length;\n                timers.push({\n                    id: id,\n                    fn: fn,\n                    time: currentTime + delay,\n                    interval: delay,\n                    type: 'interval'\n                });\n                return id;\n            },\n            \n            clearTimeout: (id) => {\n                timers = timers.filter(timer => timer.id !== id);\n            },\n            \n            clearInterval: (id) => {\n                timers = timers.filter(timer => timer.id !== id);\n            },\n            \n            tick: (time) => {\n                currentTime += time;\n                \n                let toExecute = timers.filter(timer => timer.time <= currentTime);\n                \n                toExecute.forEach(timer => {\n                    timer.fn();\n                    \n                    if (timer.type === 'interval') {\n                        timer.time = currentTime + timer.interval;\n                    } else {\n                        timers = timers.filter(t => t.id !== timer.id);\n                    }\n                });\n            },\n            \n            getCurrentTime: () => currentTime,\n            getPendingTimers: () => [...timers]\n        };\n    }\n}\n\n// ឧទាហរណ៍ការប្រើ Spy\nlet spyFunction = TestUtils.createSpy((x, y) => x + y);\n\nspyFunction(1, 2);\nspyFunction(3, 4);\n\nconsole.log('Spy call count:', spyFunction.callCount());\nconsole.log('Was called with (1, 2):', spyFunction.wasCalledWith(1, 2));\nconsole.log('All calls:', spyFunction.calls);\n\n// ឧទាហរណ៍ការប្រើ Stub\nlet stubFunction = TestUtils.createStub('mocked result');\nlet result = stubFunction('any', 'args');\nconsole.log('Stub result:', result);\nconsole.log('Stub was called:', stubFunction.callCount() > 0);\n\n// ឧទាហរណ៍ការប្រើ Fake Timer\nlet fakeTimer = TestUtils.createFakeTimer();\n\nlet callbackCalled = false;\nfakeTimer.setTimeout(() => {\n    callbackCalled = true;\n    console.log('Fake timer callback executed');\n}, 1000);\n\nconsole.log('Before tick:', callbackCalled);\nfakeTimer.tick(1000);\nconsole.log('After tick:', callbackCalled);\n\n// Integration Testing\nconsole.log('\\n=== Integration Testing ===');\n\nclass IntegrationTest {\n    constructor() {\n        this.setup = null;\n        this.teardown = null;\n        this.tests = [];\n    }\n    \n    beforeEach(setupFn) {\n        this.setup = setupFn;\n    }\n    \n    afterEach(teardownFn) {\n        this.teardown = teardownFn;\n    }\n    \n    test(description, testFn) {\n        this.tests.push({ description, testFn });\n    }\n    \n    async run() {\n        console.log('\\n🔗 ចាប់ផ្តើម integration tests...');\n        \n        let passed = 0;\n        let failed = 0;\n        \n        for (let test of this.tests) {\n            try {\n                // Setup\n                if (this.setup) {\n                    await this.setup();\n                }\n                \n                // Run test\n                await test.testFn();\n                \n                // Teardown\n                if (this.teardown) {\n                    await this.teardown();\n                }\n                \n                passed++;\n                console.log(`✅ ${test.description}`);\n                \n            } catch (error) {\n                failed++;\n                console.error(`❌ ${test.description}`);\n                console.error(`   Error: ${error.message}`);\n            }\n        }\n        \n        console.log(`\\n📊 Integration Test Summary:`);\n        console.log(`✅ Passed: ${passed}`);\n        console.log(`❌ Failed: ${failed}`);\n    }\n}\n\n// Debugging Utilities\nconsole.log('\\n=== Debugging Utilities ===');\n\nclass DebugUtils {\n    // Function wrapper សម្រាប់ debugging\n    static debugFunction(fn, name) {\n        return function(...args) {\n            console.group(`🐛 Debug: ${name}`);\n            console.log('Arguments:', args);\n            console.time('Execution time');\n            \n            try {\n                let result = fn.apply(this, args);\n                console.log('Result:', result);\n                console.timeEnd('Execution time');\n                console.groupEnd();\n                return result;\n            } catch (error) {\n                console.error('Error:', error);\n                console.timeEnd('Execution time');\n                console.groupEnd();\n                throw error;\n            }\n        };\n    }\n    \n    // Object state tracker\n    static trackObject(obj, name) {\n        return new Proxy(obj, {\n            get(target, prop) {\n                console.log(`📖 Read ${name}.${prop}:`, target[prop]);\n                return target[prop];\n            },\n            \n            set(target, prop, value) {\n                console.log(`✏️ Write ${name}.${prop}:`, value, '(was:', target[prop], ')');\n                target[prop] = value;\n                return true;\n            }\n        });\n    }\n    \n    // Call stack tracer\n    static traceCall(fn, name) {\n        return function(...args) {\n            console.trace(`📞 Calling ${name}`);\n            return fn.apply(this, args);\n        };\n    }\n}\n\n// ឧទាហរណ៍ការប្រើ Debug Utils\nlet debuggedFunction = DebugUtils.debugFunction(\n    (x, y) => x * y,\n    'multiply'\n);\n\nlet result = debuggedFunction(5, 3);\n\n// Object tracking\nlet trackedObject = DebugUtils.trackObject({\n    name: 'Test',\n    value: 42\n}, 'testObject');\n\ntrackedObject.name; // នេះនឹងបង្ហាញ read operation\ntrackedObject.value = 100; // នេះនឹងបង្ហាញ write operation\n\nconsole.log('\\n🎯 Testing និង Debugging បានបញ្ចប់');\nconsole.log('Error count:', errorTracker.getErrors().length);",
    "tip": "ប្រើ console methods ផ្សេងៗសម្រាប់ debugging និងសរសេរ tests ដើម្បីធានាថាកូដដំណើរការត្រឹមត្រូវ"
  },
  {
    "id": 84,
    "category": "JavaScript",
    "path": "/javascript/security",
    "title": "មេរៀនទី២៩: សុវត្ថិភាព JavaScript (JavaScript Security)",
    "explanation": "សុវត្ថិភាព JavaScript សំខាន់សម្រាប់ការពារកម្មវិធីពីការវាយប្រហារ។ នេះរួមមានការពារ XSS, CSRF, injection attacks, និងការគ្រប់គ្រងទិន្នន័យអ្នកប្រើប្រាស់ដោយសុវត្ថិភាព។",
    "code": "// Input Validation និង Sanitization\nconsole.log('=== Input Validation និង Sanitization ===');\n\nclass InputValidator {\n    // HTML sanitization\n    static sanitizeHTML(input) {\n        let div = document.createElement('div');\n        div.textContent = input;\n        return div.innerHTML;\n    }\n    \n    // ការពារ XSS\n    static escapeHTML(input) {\n        let escapeMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#x27;',\n            '/': '&#x2F;'\n        };\n        \n        return input.replace(/[&<>\"'\\/]/g, (char) => escapeMap[char]);\n    }\n    \n    // URL validation\n    static isValidURL(url) {\n        try {\n            let urlObj = new URL(url);\n            return ['http:', 'https:'].includes(urlObj.protocol);\n        } catch {\n            return false;\n        }\n    }\n    \n    // Email validation\n    static isValidEmail(email) {\n        let emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n        return emailRegex.test(email) && email.length <= 254;\n    }\n    \n    // SQL injection prevention\n    static sanitizeSQL(input) {\n        // នេះគឺជាឧទាហរណ៍សាមញ្ញ - ក្នុងកម្មវិធីពិតត្រូវប្រើ parameterized queries\n        return input.replace(/['\"\\\\;]/g, '');\n    }\n    \n    // ការពារ script injection\n    static removeScripts(input) {\n        return input.replace(/<script[^>]*>.*?<\\/script>/gi, '');\n    }\n    \n    // Validate file upload\n    static validateFile(file, options = {}) {\n        let errors = [];\n        \n        // ពិនិត្យទំហំ\n        if (options.maxSize && file.size > options.maxSize) {\n            errors.push(`ឯកសារធំពេក (${(file.size / 1024 / 1024).toFixed(2)}MB)`);\n        }\n        \n        // ពិនិត្យប្រភេទ\n        if (options.allowedTypes && !options.allowedTypes.includes(file.type)) {\n            errors.push(`ប្រភេទឯកសារមិនអនុញ្ញាត: ${file.type}`);\n        }\n        \n        // ពិនិត្យកន្ទុយឯកសារ\n        if (options.allowedExtensions) {\n            let extension = file.name.split('.').pop().toLowerCase();\n            if (!options.allowedExtensions.includes(extension)) {\n                errors.push(`កន្ទុយឯកសារមិនអនុញ្ញាត: .${extension}`);\n            }\n        }\n        \n        // ពិនិត្យឈ្មោះឯកសារ\n        if (/[<>:\"/\\\\|?*]/.test(file.name)) {\n            errors.push('ឈ្មោះឯកសារមានតួអក្សរមិនអនុញ្ញាត');\n        }\n        \n        return {\n            valid: errors.length === 0,\n            errors: errors\n        };\n    }\n}\n\n// ឧទាហរណ៍ការប្រើ Input Validator\nlet userInput = '<script>alert(\"XSS\")</script>Hello World';\nconsole.log('Input ដើម:', userInput);\nconsole.log('Sanitized:', InputValidator.sanitizeHTML(userInput));\nconsole.log('Escaped:', InputValidator.escapeHTML(userInput));\nconsole.log('Scripts removed:', InputValidator.removeScripts(userInput));\n\nconsole.log('\\nURL validation:');\nconsole.log('Valid URL:', InputValidator.isValidURL('https://example.com'));\nconsole.log('Invalid URL:', InputValidator.isValidURL('javascript:alert(1)'));\n\nconsole.log('\\nEmail validation:');\nconsole.log('Valid email:', InputValidator.isValidEmail('user@example.com'));\nconsole.log('Invalid email:', InputValidator.isValidEmail('invalid.email'));\n\n// CSRF Protection\nconsole.log('\\n=== CSRF Protection ===');\n\nclass CSRFProtection {\n    constructor() {\n        this.token = this.generateToken();\n        this.tokenExpiry = Date.now() + (60 * 60 * 1000); // 1 hour\n    }\n    \n    generateToken() {\n        let array = new Uint8Array(32);\n        crypto.getRandomValues(array);\n        return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n    }\n    \n    getToken() {\n        // ពិនិត្យ expiry\n        if (Date.now() > this.tokenExpiry) {\n            this.token = this.generateToken();\n            this.tokenExpiry = Date.now() + (60 * 60 * 1000);\n        }\n        \n        return this.token;\n    }\n    \n    validateToken(submittedToken) {\n        return submittedToken === this.token && Date.now() <= this.tokenExpiry;\n    }\n    \n    addTokenToForm(form) {\n        let tokenInput = document.createElement('input');\n        tokenInput.type = 'hidden';\n        tokenInput.name = 'csrf_token';\n        tokenInput.value = this.getToken();\n        form.appendChild(tokenInput);\n    }\n    \n    addTokenToHeaders(headers = {}) {\n        headers['X-CSRF-Token'] = this.getToken();\n        return headers;\n    }\n}\n\n// ការប្រើ CSRF Protection\nlet csrfProtection = new CSRFProtection();\nconsole.log('CSRF Token:', csrfProtection.getToken());\nconsole.log('Token valid:', csrfProtection.validateToken(csrfProtection.getToken()));\n\n// Content Security Policy Helper\nconsole.log('\\n=== Content Security Policy ===');\n\nclass CSPHelper {\n    static checkCSPSupport() {\n        return 'SecurityPolicyViolationEvent' in window;\n    }\n    \n    static monitorCSPViolations(callback) {\n        if (this.checkCSPSupport()) {\n            document.addEventListener('securitypolicyviolation', (e) => {\n                callback({\n                    blockedURI: e.blockedURI,\n                    violatedDirective: e.violatedDirective,\n                    originalPolicy: e.originalPolicy,\n                    sourceFile: e.sourceFile,\n                    lineNumber: e.lineNumber,\n                    columnNumber: e.columnNumber\n                });\n            });\n        }\n    }\n    \n    static generateNonce() {\n        let array = new Uint8Array(16);\n        crypto.getRandomValues(array);\n        return btoa(String.fromCharCode(...array));\n    }\n}\n\n// Monitor CSP violations\nCSPHelper.monitorCSPViolations((violation) => {\n    console.warn('CSP Violation:', violation);\n});\n\n// Secure Data Storage\nconsole.log('\\n=== Secure Data Storage ===');\n\nclass SecureStorage {\n    constructor(secretKey) {\n        this.secretKey = secretKey;\n    }\n    \n    // Simple encryption (សម្រាប់ demo - កុំប្រើក្នុងកម្មវិធីពិត)\n    encrypt(data) {\n        let jsonString = JSON.stringify(data);\n        let encrypted = '';\n        \n        for (let i = 0; i < jsonString.length; i++) {\n            let charCode = jsonString.charCodeAt(i);\n            let keyChar = this.secretKey.charCodeAt(i % this.secretKey.length);\n            encrypted += String.fromCharCode(charCode ^ keyChar);\n        }\n        \n        return btoa(encrypted);\n    }\n    \n    decrypt(encryptedData) {\n        try {\n            let encrypted = atob(encryptedData);\n            let decrypted = '';\n            \n            for (let i = 0; i < encrypted.length; i++) {\n                let charCode = encrypted.charCodeAt(i);\n                let keyChar = this.secretKey.charCodeAt(i % this.secretKey.length);\n                decrypted += String.fromCharCode(charCode ^ keyChar);\n            }\n            \n            return JSON.parse(decrypted);\n        } catch (error) {\n            throw new Error('មិនអាច decrypt ទិន្នន័យ');\n        }\n    }\n    \n    secureSet(key, data) {\n        try {\n            let encrypted = this.encrypt(data);\n            localStorage.setItem(key, encrypted);\n            return true;\n        } catch (error) {\n            console.error('មិនអាចរក្សាទុកទិន្នន័យ:', error.message);\n            return false;\n        }\n    }\n    \n    secureGet(key) {\n        try {\n            let encrypted = localStorage.getItem(key);\n            if (!encrypted) return null;\n            \n            return this.decrypt(encrypted);\n        } catch (error) {\n            console.error('មិនអាចទាញយកទិន្នន័យ:', error.message);\n            return null;\n        }\n    }\n    \n    secureRemove(key) {\n        localStorage.removeItem(key);\n    }\n}\n\n// ការប្រើ Secure Storage\nlet secureStorage = new SecureStorage('my-secret-key-123');\n\nlet sensitiveData = {\n    userId: 123,\n    sessionToken: 'abc123xyz',\n    preferences: { theme: 'dark' }\n};\n\nsecureStorage.secureSet('userData', sensitiveData);\nlet retrievedData = secureStorage.secureGet('userData');\nconsole.log('Retrieved secure data:', retrievedData);\n\n// Rate Limiting\nconsole.log('\\n=== Rate Limiting ===');\n\nclass RateLimiter {\n    constructor(maxRequests, timeWindow) {\n        this.maxRequests = maxRequests;\n        this.timeWindow = timeWindow;\n        this.requests = new Map();\n    }\n    \n    isAllowed(identifier) {\n        let now = Date.now();\n        let userRequests = this.requests.get(identifier) || [];\n        \n        // លុប requests ចាស់\n        userRequests = userRequests.filter(time => now - time < this.timeWindow);\n        \n        if (userRequests.length >= this.maxRequests) {\n            return false;\n        }\n        \n        userRequests.push(now);\n        this.requests.set(identifier, userRequests);\n        \n        return true;\n    }\n    \n    getRemainingRequests(identifier) {\n        let now = Date.now();\n        let userRequests = this.requests.get(identifier) || [];\n        userRequests = userRequests.filter(time => now - time < this.timeWindow);\n        \n        return Math.max(0, this.maxRequests - userRequests.length);\n    }\n    \n    getTimeUntilReset(identifier) {\n        let userRequests = this.requests.get(identifier) || [];\n        if (userRequests.length === 0) return 0;\n        \n        let oldestRequest = Math.min(...userRequests);\n        let resetTime = oldestRequest + this.timeWindow;\n        \n        return Math.max(0, resetTime - Date.now());\n    }\n}\n\n// ការប្រើ Rate Limiter\nlet rateLimiter = new RateLimiter(5, 60000); // 5 requests per minute\n\nfunction makeRequest(userId) {\n    if (rateLimiter.isAllowed(userId)) {\n        console.log(`Request allowed for user ${userId}`);\n        console.log(`Remaining: ${rateLimiter.getRemainingRequests(userId)}`);\n        return true;\n    } else {\n        let resetTime = rateLimiter.getTimeUntilReset(userId);\n        console.log(`Request blocked for user ${userId}. Reset in ${Math.ceil(resetTime / 1000)}s`);\n        return false;\n    }\n}\n\n// សាកល្បង rate limiting\nfor (let i = 0; i < 7; i++) {\n    makeRequest('user123');\n}\n\n// Secure Communication\nconsole.log('\\n=== Secure Communication ===');\n\nclass SecureAPIClient {\n    constructor(baseURL, apiKey) {\n        this.baseURL = baseURL;\n        this.apiKey = apiKey;\n        this.rateLimiter = new RateLimiter(100, 60000); // 100 requests per minute\n    }\n    \n    // បង្កើត secure headers\n    createSecureHeaders(additionalHeaders = {}) {\n        return {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.apiKey}`,\n            'X-Requested-With': 'XMLHttpRequest',\n            'X-API-Version': '1.0',\n            ...additionalHeaders\n        };\n    }\n    \n    // Secure request method\n    async secureRequest(endpoint, options = {}) {\n        // Rate limiting check\n        if (!this.rateLimiter.isAllowed('api-client')) {\n            throw new Error('Rate limit exceeded');\n        }\n        \n        // Validate URL\n        let fullURL = this.baseURL + endpoint;\n        if (!InputValidator.isValidURL(fullURL)) {\n            throw new Error('Invalid URL');\n        }\n        \n        // Prepare request\n        let config = {\n            method: options.method || 'GET',\n            headers: this.createSecureHeaders(options.headers),\n            ...options\n        };\n        \n        // Add CSRF token if needed\n        if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(config.method)) {\n            config.headers['X-CSRF-Token'] = csrfProtection.getToken();\n        }\n        \n        try {\n            let response = await fetch(fullURL, config);\n            \n            // ពិនិត្យ response\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            \n            // ពិនិត្យ Content-Type\n            let contentType = response.headers.get('Content-Type');\n            if (!contentType || !contentType.includes('application/json')) {\n                throw new Error('Invalid response content type');\n            }\n            \n            return await response.json();\n            \n        } catch (error) {\n            console.error('Secure request failed:', error.message);\n            throw error;\n        }\n    }\n}\n\n// Password Security\nconsole.log('\\n=== Password Security ===');\n\nclass PasswordSecurity {\n    // ពិនិត្យកម្លាំងពាក្យសម្ងាត់\n    static checkStrength(password) {\n        let score = 0;\n        let feedback = [];\n        \n        // ពិនិត្យប្រវែង\n        if (password.length >= 8) {\n            score += 1;\n        } else {\n            feedback.push('ត្រូវមានយ៉ាងតិច 8 តួអក្សរ');\n        }\n        \n        // ពិនិត្យអក្សរតូច\n        if (/[a-z]/.test(password)) {\n            score += 1;\n        } else {\n            feedback.push('ត្រូវមានអក្សរតូច');\n        }\n        \n        // ពិនិត្យអក្សរធំ\n        if (/[A-Z]/.test(password)) {\n            score += 1;\n        } else {\n            feedback.push('ត្រូវមានអក្សរធំ');\n        }\n        \n        // ពិនិត្យលេខ\n        if (/\\d/.test(password)) {\n            score += 1;\n        } else {\n            feedback.push('ត្រូវមានលេខ');\n        }\n        \n        // ពិនិត្យតួអក្សរពិសេស\n        if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n            score += 1;\n        } else {\n            feedback.push('ត្រូវមានតួអក្សរពិសេស');\n        }\n        \n        // ពិនិត្យ common patterns\n        if (/123|abc|password|qwerty/i.test(password)) {\n            score -= 1;\n            feedback.push('មិនត្រូវប្រើលំដាប់ធម្មតា');\n        }\n        \n        let strength = ['ខ្សោយណាស់', 'ខ្សោយ', 'មធ្យម', 'ល្អ', 'ខ្លាំង'][Math.max(0, score)];\n        \n        return {\n            score: Math.max(0, score),\n            strength: strength,\n            feedback: feedback\n        };\n    }\n    \n    // បង្កើតពាក្យសម្ងាត់ខ្លាំង\n    static generateSecurePassword(length = 12) {\n        let charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';\n        let password = '';\n        \n        // ធានាថាមានតួអក្សរគ្រប់ប្រភេទ\n        password += this.getRandomChar('abcdefghijklmnopqrstuvwxyz'); // lowercase\n        password += this.getRandomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // uppercase\n        password += this.getRandomChar('0123456789'); // number\n        password += this.getRandomChar('!@#$%^&*()_+-=[]{}|;:,.<>?'); // special\n        \n        // បំពេញនៅសល់\n        for (let i = password.length; i < length; i++) {\n            password += this.getRandomChar(charset);\n        }\n        \n        // ច្របល់តួអក្សរ\n        return password.split('').sort(() => Math.random() - 0.5).join('');\n    }\n    \n    static getRandomChar(charset) {\n        return charset.charAt(Math.floor(Math.random() * charset.length));\n    }\n    \n    // Hash password (សម្រាប់ demo - ប្រើ bcrypt ក្នុងកម្មវិធីពិត)\n    static async hashPassword(password, salt) {\n        let encoder = new TextEncoder();\n        let data = encoder.encode(password + salt);\n        let hashBuffer = await crypto.subtle.digest('SHA-256', data);\n        let hashArray = Array.from(new Uint8Array(hashBuffer));\n        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    }\n    \n    static generateSalt() {\n        let array = new Uint8Array(16);\n        crypto.getRandomValues(array);\n        return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n    }\n}\n\n// ការប្រើ Password Security\nlet testPasswords = ['123456', 'password', 'Password1', 'P@ssw0rd!', 'MyVerySecureP@ssw0rd123!'];\n\ntestPasswords.forEach(pwd => {\n    let strength = PasswordSecurity.checkStrength(pwd);\n    console.log(`\"${pwd}\": ${strength.strength} (${strength.score}/5)`);\n    if (strength.feedback.length > 0) {\n        console.log('  Feedback:', strength.feedback.join(', '));\n    }\n});\n\nlet securePassword = PasswordSecurity.generateSecurePassword(16);\nconsole.log('\\nGenerated secure password:', securePassword);\nlet generatedStrength = PasswordSecurity.checkStrength(securePassword);\nconsole.log('Generated password strength:', generatedStrength.strength);\n\n// Session Management\nconsole.log('\\n=== Session Management ===');\n\nclass SessionManager {\n    constructor() {\n        this.sessionKey = 'secure_session';\n        this.sessionTimeout = 30 * 60 * 1000; // 30 minutes\n    }\n    \n    createSession(userData) {\n        let session = {\n            id: this.generateSessionId(),\n            userId: userData.userId,\n            createdAt: Date.now(),\n            lastActivity: Date.now(),\n            data: userData\n        };\n        \n        let encrypted = secureStorage.encrypt(session);\n        localStorage.setItem(this.sessionKey, encrypted);\n        \n        return session.id;\n    }\n    \n    getSession() {\n        try {\n            let encrypted = localStorage.getItem(this.sessionKey);\n            if (!encrypted) return null;\n            \n            let session = secureStorage.decrypt(encrypted);\n            \n            // ពិនិត្យ timeout\n            if (Date.now() - session.lastActivity > this.sessionTimeout) {\n                this.destroySession();\n                return null;\n            }\n            \n            // Update last activity\n            session.lastActivity = Date.now();\n            let updatedEncrypted = secureStorage.encrypt(session);\n            localStorage.setItem(this.sessionKey, updatedEncrypted);\n            \n            return session;\n        } catch (error) {\n            console.error('Session error:', error.message);\n            this.destroySession();\n            return null;\n        }\n    }\n    \n    updateSession(newData) {\n        let session = this.getSession();\n        if (session) {\n            session.data = { ...session.data, ...newData };\n            session.lastActivity = Date.now();\n            \n            let encrypted = secureStorage.encrypt(session);\n            localStorage.setItem(this.sessionKey, encrypted);\n            return true;\n        }\n        return false;\n    }\n    \n    destroySession() {\n        localStorage.removeItem(this.sessionKey);\n    }\n    \n    generateSessionId() {\n        let array = new Uint8Array(32);\n        crypto.getRandomValues(array);\n        return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n    }\n    \n    isSessionValid() {\n        return this.getSession() !== null;\n    }\n    \n    getSessionTimeRemaining() {\n        let session = this.getSession();\n        if (!session) return 0;\n        \n        let timeElapsed = Date.now() - session.lastActivity;\n        return Math.max(0, this.sessionTimeout - timeElapsed);\n    }\n}\n\n// ការប្រើ Session Manager\nlet sessionManager = new SessionManager();\n\n// បង្កើត session\nlet sessionId = sessionManager.createSession({\n    userId: 123,\n    username: 'testuser',\n    role: 'user'\n});\n\nconsole.log('Session created:', sessionId);\nconsole.log('Session valid:', sessionManager.isSessionValid());\nconsole.log('Time remaining:', Math.ceil(sessionManager.getSessionTimeRemaining() / 1000), 'seconds');\n\n// Security Headers Helper\nconsole.log('\\n=== Security Headers ===');\n\nclass SecurityHeaders {\n    static getRecommendedHeaders() {\n        return {\n            'X-Content-Type-Options': 'nosniff',\n            'X-Frame-Options': 'DENY',\n            'X-XSS-Protection': '1; mode=block',\n            'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n            'Referrer-Policy': 'strict-origin-when-cross-origin',\n            'Permissions-Policy': 'geolocation=(), microphone=(), camera=()',\n            'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'\"\n        };\n    }\n    \n    static addSecurityHeaders(fetchOptions = {}) {\n        let headers = fetchOptions.headers || {};\n        let secureHeaders = this.getRecommendedHeaders();\n        \n        return {\n            ...fetchOptions,\n            headers: {\n                ...headers,\n                ...secureHeaders\n            }\n        };\n    }\n}\n\n// Security Audit\nconsole.log('\\n=== Security Audit ===');\n\nclass SecurityAudit {\n    static auditLocalStorage() {\n        let issues = [];\n        \n        for (let i = 0; i < localStorage.length; i++) {\n            let key = localStorage.key(i);\n            let value = localStorage.getItem(key);\n            \n            // ពិនិត្យទិន្នន័យ sensitive\n            if (/password|token|secret|key/i.test(key) || /password|token|secret|key/i.test(value)) {\n                issues.push(`Sensitive data in localStorage: ${key}`);\n            }\n            \n            // ពិនិត្យទំហំ\n            if (value.length > 1024 * 1024) { // 1MB\n                issues.push(`Large data in localStorage: ${key} (${(value.length / 1024).toFixed(2)}KB)`);\n            }\n        }\n        \n        return issues;\n    }\n    \n    static auditGlobalVariables() {\n        let issues = [];\n        let sensitivePatterns = /password|secret|key|token|api/i;\n        \n        for (let prop in window) {\n            if (sensitivePatterns.test(prop)) {\n                issues.push(`Potentially sensitive global variable: ${prop}`);\n            }\n        }\n        \n        return issues;\n    }\n    \n    static auditConsoleUsage() {\n        let issues = [];\n        \n        // ពិនិត្យថាតើ console.log នៅមានក្នុង production\n        if (typeof console !== 'undefined' && console.log.toString().includes('native code')) {\n            // នេះគឺជា production environment\n            issues.push('Console methods should be removed in production');\n        }\n        \n        return issues;\n    }\n    \n    static runFullAudit() {\n        console.log('\\n🔍 Security Audit Results:');\n        \n        let allIssues = [\n            ...this.auditLocalStorage(),\n            ...this.auditGlobalVariables(),\n            ...this.auditConsoleUsage()\n        ];\n        \n        if (allIssues.length === 0) {\n            console.log('✅ No security issues found');\n        } else {\n            console.log(`⚠️ Found ${allIssues.length} potential issues:`);\n            allIssues.forEach((issue, index) => {\n                console.log(`${index + 1}. ${issue}`);\n            });\n        }\n        \n        return allIssues;\n    }\n}\n\n// ដំណើរការ security audit\nSecurityAudit.runFullAudit();\n\nconsole.log('\\n🔒 Security measures implemented successfully');",
    "tip": "ពិនិត្យ input ទាំងអស់ ប្រើ HTTPS ជានិច្ច និងកុំរក្សាទុកទិន្នន័យ sensitive ក្នុង localStorage"
  },
  {
    "id": 85,
    "category": "JavaScript",
    "path": "/javascript/best-practices",
    "title": "មេរៀនទី៣០: ការអនុវត្តល្អបំផុត JavaScript (JavaScript Best Practices)",
    "explanation": "ការអនុវត្តល្អបំផុត JavaScript ជួយធ្វើឱ្យកូដមានគុណភាពល្អ រក្សាបានងាយ មានសុវត្ថិភាព និងដំណើរការបានល្អ។ នេះរួមមានការសរសេរកូដស្អាត ការគ្រប់គ្រងកំហុស និងការប្រើ modern JavaScript features។",
    "code": "// Code Organization និង Structure\nconsole.log('=== Code Organization និង Structure ===');\n\n// ល្អ - ប្រើ modules និង clear structure\nclass UserManager {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n        this.cache = new Map();\n        this.eventListeners = new Map();\n    }\n    \n    // ប្រើ async/await ជំនួស callbacks\n    async getUser(id) {\n        try {\n            // ពិនិត្យ cache មុន\n            if (this.cache.has(id)) {\n                return this.cache.get(id);\n            }\n            \n            let user = await this.apiClient.get(`/users/${id}`);\n            this.cache.set(id, user);\n            \n            return user;\n        } catch (error) {\n            console.error(`Failed to get user ${id}:`, error.message);\n            throw error;\n        }\n    }\n    \n    // ប្រើ descriptive method names\n    async createUserWithValidation(userData) {\n        // Validate input\n        this.validateUserData(userData);\n        \n        try {\n            let newUser = await this.apiClient.post('/users', userData);\n            this.cache.set(newUser.id, newUser);\n            \n            // Emit event\n            this.emit('userCreated', newUser);\n            \n            return newUser;\n        } catch (error) {\n            console.error('Failed to create user:', error.message);\n            throw error;\n        }\n    }\n    \n    validateUserData(userData) {\n        let errors = [];\n        \n        if (!userData.name || userData.name.trim().length < 2) {\n            errors.push('ឈ្មោះត្រូវមានយ៉ាងតិច 2 តួអក្សរ');\n        }\n        \n        if (!userData.email || !this.isValidEmail(userData.email)) {\n            errors.push('អ៊ីមែលមិនត្រឹមត្រូវ');\n        }\n        \n        if (errors.length > 0) {\n            throw new Error('Validation failed: ' + errors.join(', '));\n        }\n    }\n    \n    isValidEmail(email) {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    }\n    \n    // Event system\n    on(event, callback) {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, []);\n        }\n        this.eventListeners.get(event).push(callback);\n    }\n    \n    emit(event, data) {\n        let listeners = this.eventListeners.get(event) || [];\n        listeners.forEach(callback => {\n            try {\n                callback(data);\n            } catch (error) {\n                console.error(`Event listener error for ${event}:`, error);\n            }\n        });\n    }\n    \n    // Cleanup method\n    destroy() {\n        this.cache.clear();\n        this.eventListeners.clear();\n    }\n}\n\n// Variable Naming និង Constants\nconsole.log('\\n=== Variable Naming និង Constants ===');\n\n// ល្អ - ប្រើ descriptive names\nconst MAX_RETRY_ATTEMPTS = 3;\nconst API_TIMEOUT_MS = 5000;\nconst USER_ROLES = {\n    ADMIN: 'admin',\n    USER: 'user',\n    MODERATOR: 'moderator'\n};\n\n// ល្អ - ប្រើ camelCase\nlet userAccountBalance = 1000;\nlet isUserAuthenticated = false;\nlet currentUserPermissions = ['read', 'write'];\n\n// មិនល្អ - ឈ្មោះមិនច្បាស់\n// let x = 1000;\n// let flag = false;\n// let arr = ['read', 'write'];\n\n// Function Best Practices\nconsole.log('\\n=== Function Best Practices ===');\n\n// ល្អ - Single Responsibility Principle\nfunction calculateTotalPrice(items) {\n    return items.reduce((total, item) => total + item.price, 0);\n}\n\nfunction formatCurrency(amount, currency = 'USD') {\n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency\n    }).format(amount);\n}\n\nfunction validateOrderItems(items) {\n    if (!Array.isArray(items) || items.length === 0) {\n        throw new Error('Order must contain at least one item');\n    }\n    \n    items.forEach((item, index) => {\n        if (!item.id || !item.price || item.price <= 0) {\n            throw new Error(`Invalid item at index ${index}`);\n        }\n    });\n}\n\n// ល្អ - Pure functions (no side effects)\nfunction addTax(price, taxRate) {\n    return price * (1 + taxRate);\n}\n\n// ល្អ - Default parameters\nfunction createUser(name, email, role = USER_ROLES.USER, isActive = true) {\n    return {\n        id: Date.now(),\n        name,\n        email,\n        role,\n        isActive,\n        createdAt: new Date().toISOString()\n    };\n}\n\n// ល្អ - Destructuring parameters\nfunction updateUserProfile({ userId, name, email, preferences = {} }) {\n    return {\n        userId,\n        name,\n        email,\n        preferences,\n        updatedAt: new Date().toISOString()\n    };\n}\n\n// Error Handling Best Practices\nconsole.log('\\n=== Error Handling Best Practices ===');\n\n// ល្អ - Custom Error Classes\nclass ValidationError extends Error {\n    constructor(message, field) {\n        super(message);\n        this.name = 'ValidationError';\n        this.field = field;\n    }\n}\n\nclass NetworkError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'NetworkError';\n        this.statusCode = statusCode;\n    }\n}\n\n// ល្អ - Comprehensive error handling\nasync function fetchUserData(userId) {\n    try {\n        // Input validation\n        if (!userId || typeof userId !== 'number') {\n            throw new ValidationError('User ID must be a valid number', 'userId');\n        }\n        \n        let response = await fetch(`/api/users/${userId}`);\n        \n        if (!response.ok) {\n            throw new NetworkError(\n                `Failed to fetch user: ${response.statusText}`,\n                response.status\n            );\n        }\n        \n        let userData = await response.json();\n        \n        // Validate response data\n        if (!userData.id || !userData.email) {\n            throw new ValidationError('Invalid user data received', 'userData');\n        }\n        \n        return userData;\n        \n    } catch (error) {\n        // Log error with context\n        console.error('fetchUserData failed:', {\n            userId,\n            error: error.message,\n            type: error.name,\n            timestamp: new Date().toISOString()\n        });\n        \n        // Re-throw for caller to handle\n        throw error;\n    }\n}\n\n// Async/Await Best Practices\nconsole.log('\\n=== Async/Await Best Practices ===');\n\n// ល្អ - Parallel execution\nasync function fetchMultipleUsers(userIds) {\n    try {\n        // ដំណើរការ parallel ជំនួស sequential\n        let userPromises = userIds.map(id => fetchUserData(id));\n        let users = await Promise.all(userPromises);\n        \n        return users;\n    } catch (error) {\n        console.error('Failed to fetch multiple users:', error.message);\n        throw error;\n    }\n}\n\n// ល្អ - Error handling ជាមួយ Promise.allSettled\nasync function fetchUsersWithErrorHandling(userIds) {\n    let userPromises = userIds.map(async (id) => {\n        try {\n            return await fetchUserData(id);\n        } catch (error) {\n            return { error: error.message, id };\n        }\n    });\n    \n    let results = await Promise.allSettled(userPromises);\n    \n    let successfulUsers = [];\n    let failedUsers = [];\n    \n    results.forEach((result, index) => {\n        if (result.status === 'fulfilled') {\n            if (result.value.error) {\n                failedUsers.push(result.value);\n            } else {\n                successfulUsers.push(result.value);\n            }\n        } else {\n            failedUsers.push({ id: userIds[index], error: result.reason.message });\n        }\n    });\n    \n    return { successfulUsers, failedUsers };\n}\n\n// Memory Management Best Practices\nconsole.log('\\n=== Memory Management ===');\n\nclass MemoryEfficientComponent {\n    constructor() {\n        this.eventListeners = [];\n        this.timers = [];\n        this.observers = [];\n    }\n    \n    // ល្អ - Track event listeners for cleanup\n    addEventListener(element, event, handler) {\n        element.addEventListener(event, handler);\n        this.eventListeners.push({ element, event, handler });\n    }\n    \n    // ល្អ - Track timers for cleanup\n    setTimeout(callback, delay) {\n        let timerId = setTimeout(callback, delay);\n        this.timers.push(timerId);\n        return timerId;\n    }\n    \n    setInterval(callback, interval) {\n        let intervalId = setInterval(callback, interval);\n        this.timers.push(intervalId);\n        return intervalId;\n    }\n    \n    // ល្អ - Track observers for cleanup\n    observeElement(element, callback, options) {\n        if ('IntersectionObserver' in window) {\n            let observer = new IntersectionObserver(callback, options);\n            observer.observe(element);\n            this.observers.push(observer);\n            return observer;\n        }\n    }\n    \n    // ល្អ - Proper cleanup\n    destroy() {\n        // Remove event listeners\n        this.eventListeners.forEach(({ element, event, handler }) => {\n            element.removeEventListener(event, handler);\n        });\n        \n        // Clear timers\n        this.timers.forEach(timerId => {\n            clearTimeout(timerId);\n            clearInterval(timerId);\n        });\n        \n        // Disconnect observers\n        this.observers.forEach(observer => {\n            observer.disconnect();\n        });\n        \n        // Clear arrays\n        this.eventListeners = [];\n        this.timers = [];\n        this.observers = [];\n    }\n}\n\n// Performance Best Practices\nconsole.log('\\n=== Performance Best Practices ===');\n\nclass PerformanceOptimizer {\n    // ល្អ - Debounce expensive operations\n    static debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            let later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n    \n    // ល្អ - Throttle frequent events\n    static throttle(func, limit) {\n        let inThrottle;\n        return function(...args) {\n            if (!inThrottle) {\n                func.apply(this, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n    \n    // ល្អ - Lazy loading\n    static createLazyLoader(loader) {\n        let loaded = false;\n        let loading = false;\n        let result = null;\n        \n        return async function() {\n            if (loaded) return result;\n            if (loading) {\n                // Wait for current loading to complete\n                while (loading) {\n                    await new Promise(resolve => setTimeout(resolve, 10));\n                }\n                return result;\n            }\n            \n            loading = true;\n            try {\n                result = await loader();\n                loaded = true;\n                return result;\n            } finally {\n                loading = false;\n            }\n        };\n    }\n    \n    // ល្អ - Efficient DOM queries\n    static createDOMCache() {\n        let cache = new Map();\n        \n        return {\n            get(selector) {\n                if (!cache.has(selector)) {\n                    cache.set(selector, document.querySelector(selector));\n                }\n                return cache.get(selector);\n            },\n            \n            getAll(selector) {\n                let cacheKey = `all:${selector}`;\n                if (!cache.has(cacheKey)) {\n                    cache.set(cacheKey, document.querySelectorAll(selector));\n                }\n                return cache.get(cacheKey);\n            },\n            \n            clear() {\n                cache.clear();\n            }\n        };\n    }\n}\n\n// ការប្រើ Performance Optimizers\nlet domCache = PerformanceOptimizer.createDOMCache();\n\n// Debounced search\nlet debouncedSearch = PerformanceOptimizer.debounce((query) => {\n    console.log('ស្វែងរក:', query);\n    // ធ្វើ API call នៅទីនេះ\n}, 300);\n\n// Throttled scroll handler\nlet throttledScroll = PerformanceOptimizer.throttle(() => {\n    console.log('Scroll position:', window.pageYOffset);\n}, 100);\n\n// Code Quality Best Practices\nconsole.log('\\n=== Code Quality Best Practices ===');\n\nclass CodeQualityExamples {\n    // ល្អ - ប្រើ const/let ជំនួស var\n    static demonstrateVariableDeclaration() {\n        const CONFIG = { apiUrl: 'https://api.example.com' }; // មិនផ្លាស់ប្តូរ\n        let userCount = 0; // អាចផ្លាស់ប្តូរ\n        \n        for (let i = 0; i < 5; i++) { // block scope\n            userCount += i;\n        }\n        \n        return userCount;\n    }\n    \n    // ល្អ - ប្រើ template literals\n    static createUserMessage(user) {\n        return `សួស្តី ${user.name}! អ្នកមានសារ ${user.messageCount} ថ្មី។`;\n    }\n    \n    // ល្អ - ប្រើ destructuring\n    static processUserData({ id, name, email, preferences = {} }) {\n        let { theme = 'light', language = 'en' } = preferences;\n        \n        return {\n            userId: id,\n            displayName: name,\n            contactEmail: email,\n            userTheme: theme,\n            userLanguage: language\n        };\n    }\n    \n    // ល្អ - ប្រើ spread operator\n    static mergeUserSettings(defaultSettings, userSettings) {\n        return {\n            ...defaultSettings,\n            ...userSettings,\n            lastUpdated: new Date().toISOString()\n        };\n    }\n    \n    // ល្អ - ប្រើ array methods ជំនួស loops\n    static processUsers(users) {\n        return users\n            .filter(user => user.isActive)\n            .map(user => ({\n                id: user.id,\n                name: user.name,\n                email: user.email\n            }))\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n    \n    // ល្អ - ប្រើ optional chaining\n    static getUserCity(user) {\n        return user?.address?.city ?? 'Unknown';\n    }\n    \n    // ល្អ - ប្រើ nullish coalescing\n    static getDisplayName(user) {\n        return user.displayName ?? user.name ?? 'Anonymous';\n    }\n}\n\n// Security Best Practices\nconsole.log('\\n=== Security Best Practices ===');\n\nclass SecurityBestPractices {\n    // ល្អ - Input validation\n    static validateAndSanitizeInput(input, type) {\n        if (typeof input !== 'string') {\n            throw new Error('Input must be a string');\n        }\n        \n        // Remove potentially dangerous characters\n        let sanitized = input.replace(/[<>\"'&]/g, '');\n        \n        switch (type) {\n            case 'email':\n                if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(sanitized)) {\n                    throw new Error('Invalid email format');\n                }\n                break;\n            case 'username':\n                if (!/^[a-zA-Z0-9_]{3,20}$/.test(sanitized)) {\n                    throw new Error('Username must be 3-20 characters, alphanumeric and underscore only');\n                }\n                break;\n            case 'text':\n                if (sanitized.length > 1000) {\n                    throw new Error('Text too long');\n                }\n                break;\n        }\n        \n        return sanitized;\n    }\n    \n    // ល្អ - Secure API calls\n    static async secureApiCall(url, options = {}) {\n        // Validate URL\n        if (!url.startsWith('https://')) {\n            throw new Error('Only HTTPS URLs are allowed');\n        }\n        \n        // Add security headers\n        let secureOptions = {\n            ...options,\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest',\n                ...options.headers\n            }\n        };\n        \n        try {\n            let response = await fetch(url, secureOptions);\n            \n            if (!response.ok) {\n                throw new NetworkError(\n                    `HTTP ${response.status}: ${response.statusText}`,\n                    response.status\n                );\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Secure API call failed:', error.message);\n            throw error;\n        }\n    }\n    \n    // ល្អ - Secure data storage\n    static securelyStoreData(key, data, expirationMinutes = 60) {\n        let secureData = {\n            data: data,\n            timestamp: Date.now(),\n            expiration: Date.now() + (expirationMinutes * 60 * 1000)\n        };\n        \n        try {\n            localStorage.setItem(key, JSON.stringify(secureData));\n            return true;\n        } catch (error) {\n            console.error('Failed to store data securely:', error.message);\n            return false;\n        }\n    }\n    \n    static securelyRetrieveData(key) {\n        try {\n            let stored = localStorage.getItem(key);\n            if (!stored) return null;\n            \n            let secureData = JSON.parse(stored);\n            \n            // ពិនិត្យ expiration\n            if (Date.now() > secureData.expiration) {\n                localStorage.removeItem(key);\n                return null;\n            }\n            \n            return secureData.data;\n        } catch (error) {\n            console.error('Failed to retrieve data securely:', error.message);\n            localStorage.removeItem(key); // Remove corrupted data\n            return null;\n        }\n    }\n}\n\n// Testing Best Practices\nconsole.log('\\n=== Testing Best Practices ===');\n\nclass TestingBestPractices {\n    // ល្អ - Testable functions\n    static calculateDiscount(price, discountPercent, userType) {\n        // Input validation\n        if (price < 0 || discountPercent < 0 || discountPercent > 100) {\n            throw new Error('Invalid input parameters');\n        }\n        \n        let baseDiscount = (price * discountPercent) / 100;\n        \n        // Additional discount for premium users\n        if (userType === 'premium') {\n            baseDiscount *= 1.1; // 10% bonus\n        }\n        \n        return Math.min(baseDiscount, price); // Can't discount more than price\n    }\n    \n    // ល្អ - Mockable dependencies\n    static async processOrder(orderData, paymentService, inventoryService) {\n        try {\n            // Validate inventory\n            let inventoryCheck = await inventoryService.checkAvailability(orderData.items);\n            if (!inventoryCheck.available) {\n                throw new Error('Items not available');\n            }\n            \n            // Process payment\n            let paymentResult = await paymentService.processPayment(orderData.payment);\n            if (!paymentResult.success) {\n                throw new Error('Payment failed');\n            }\n            \n            // Update inventory\n            await inventoryService.reserveItems(orderData.items);\n            \n            return {\n                orderId: Date.now(),\n                status: 'confirmed',\n                paymentId: paymentResult.id\n            };\n        } catch (error) {\n            console.error('Order processing failed:', error.message);\n            throw error;\n        }\n    }\n}\n\n// Documentation Best Practices\nconsole.log('\\n=== Documentation Best Practices ===');\n\n/**\n * ការគ្រប់គ្រងកម្មវិធីទិញទំនិញ\n * @class ShoppingCartManager\n */\nclass ShoppingCartManager {\n    /**\n     * បង្កើត shopping cart manager ថ្មី\n     * @param {Object} options - ការកំណត់\n     * @param {number} options.maxItems - ចំនួនទំនិញអតិបរមា\n     * @param {string} options.currency - រូបិយប័ណ្ណ\n     */\n    constructor(options = {}) {\n        this.maxItems = options.maxItems || 100;\n        this.currency = options.currency || 'USD';\n        this.items = [];\n        this.listeners = new Map();\n    }\n    \n    /**\n     * បន្ថែមទំនិញទៅកាន់រទេះ\n     * @param {Object} item - ទំនិញដែលត្រូវបន្ថែម\n     * @param {string} item.id - លេខសម្គាល់ទំនិញ\n     * @param {string} item.name - ឈ្មោះទំនិញ\n     * @param {number} item.price - តម្លៃទំនិញ\n     * @param {number} [item.quantity=1] - ចំនួនទំនិញ\n     * @returns {boolean} - true ប្រសិនបើបន្ថែមបានជោគជ័យ\n     * @throws {Error} - ប្រសិនបើទំនិញមិនត្រឹមត្រូវ ឬរទេះពេញ\n     */\n    addItem(item) {\n        // Validate item\n        if (!item.id || !item.name || typeof item.price !== 'number') {\n            throw new Error('Invalid item data');\n        }\n        \n        if (this.items.length >= this.maxItems) {\n            throw new Error('Cart is full');\n        }\n        \n        let existingItem = this.items.find(cartItem => cartItem.id === item.id);\n        \n        if (existingItem) {\n            existingItem.quantity += (item.quantity || 1);\n        } else {\n            this.items.push({\n                ...item,\n                quantity: item.quantity || 1,\n                addedAt: new Date().toISOString()\n            });\n        }\n        \n        this.emit('itemAdded', item);\n        return true;\n    }\n    \n    /**\n     * គណនាតម្លៃសរុបនៃរទេះ\n     * @returns {number} - តម្លៃសរុប\n     */\n    calculateTotal() {\n        return this.items.reduce((total, item) => {\n            return total + (item.price * item.quantity);\n        }, 0);\n    }\n    \n    /**\n     * ទទួលព័ត៌មានសង្ខេបរទេះ\n     * @returns {Object} - ព័ត៌មានសង្ខេប\n     */\n    getSummary() {\n        return {\n            itemCount: this.items.length,\n            totalQuantity: this.items.reduce((sum, item) => sum + item.quantity, 0),\n            totalPrice: this.calculateTotal(),\n            currency: this.currency,\n            lastUpdated: new Date().toISOString()\n        };\n    }\n    \n    /**\n     * ចុះឈ្មោះ event listener\n     * @param {string} event - ឈ្មោះ event\n     * @param {Function} callback - មុខងារ callback\n     */\n    on(event, callback) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event).push(callback);\n    }\n    \n    /**\n     * បញ្ជូន event\n     * @private\n     * @param {string} event - ឈ្មោះ event\n     * @param {*} data - ទិន្នន័យ event\n     */\n    emit(event, data) {\n        let callbacks = this.listeners.get(event) || [];\n        callbacks.forEach(callback => {\n            try {\n                callback(data);\n            } catch (error) {\n                console.error(`Event callback error for ${event}:`, error);\n            }\n        });\n    }\n}\n\n// Modern JavaScript Best Practices\nconsole.log('\\n=== Modern JavaScript Best Practices ===');\n\nclass ModernJSExamples {\n    // ល្អ - ប្រើ Map/Set ជំនួស Objects/Arrays ពេលសមស្រប\n    static createUserIndex(users) {\n        let userMap = new Map();\n        let emailSet = new Set();\n        \n        users.forEach(user => {\n            userMap.set(user.id, user);\n            emailSet.add(user.email);\n        });\n        \n        return { userMap, emailSet };\n    }\n    \n    // ល្អ - ប្រើ WeakMap សម្រាប់ private data\n    static createPrivateDataStore() {\n        let privateData = new WeakMap();\n        \n        class User {\n            constructor(name, email) {\n                privateData.set(this, {\n                    name: name,\n                    email: email,\n                    createdAt: new Date()\n                });\n            }\n            \n            getName() {\n                return privateData.get(this).name;\n            }\n            \n            getEmail() {\n                return privateData.get(this).email;\n            }\n        }\n        \n        return User;\n    }\n    \n    // ល្អ - ប្រើ Proxy សម្រាប់ advanced functionality\n    static createValidatedObject(schema) {\n        return new Proxy({}, {\n            set(target, property, value) {\n                if (schema[property]) {\n                    let validator = schema[property];\n                    if (!validator(value)) {\n                        throw new Error(`Invalid value for ${property}`);\n                    }\n                }\n                target[property] = value;\n                return true;\n            }\n        });\n    }\n    \n    // ល្អ - ប្រើ Symbols សម្រាប់ unique keys\n    static createSymbolBasedAPI() {\n        let PRIVATE_METHOD = Symbol('privateMethod');\n        let INTERNAL_STATE = Symbol('internalState');\n        \n        class APIClass {\n            constructor() {\n                this[INTERNAL_STATE] = {\n                    initialized: true,\n                    data: new Map()\n                };\n            }\n            \n            [PRIVATE_METHOD]() {\n                return 'This is a private method';\n            }\n            \n            publicMethod() {\n                return this[PRIVATE_METHOD]();\n            }\n        }\n        \n        return APIClass;\n    }\n}\n\n// ការប្រើ Modern JS Examples\nlet users = [\n    { id: 1, name: 'សុខា', email: 'sokha@example.com' },\n    { id: 2, name: 'ដារា', email: 'dara@example.com' }\n];\n\nlet { userMap, emailSet } = ModernJSExamples.createUserIndex(users);\nconsole.log('User map:', userMap);\nconsole.log('Email set:', emailSet);\n\n// Validated object\nlet userSchema = {\n    name: (value) => typeof value === 'string' && value.length > 0,\n    age: (value) => typeof value === 'number' && value > 0 && value < 150,\n    email: (value) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)\n};\n\nlet validatedUser = ModernJSExamples.createValidatedObject(userSchema);\n\ntry {\n    validatedUser.name = 'សុខា';\n    validatedUser.age = 25;\n    validatedUser.email = 'sokha@example.com';\n    console.log('Validated user created successfully');\n} catch (error) {\n    console.error('Validation failed:', error.message);\n}\n\n// Project Structure Best Practices\nconsole.log('\\n=== Project Structure Best Practices ===');\n\n// ល្អ - Module organization\nconst AppModules = {\n    // Utils module\n    utils: {\n        formatDate: (date) => date.toLocaleDateString(),\n        formatCurrency: (amount) => `$${amount.toFixed(2)}`,\n        debounce: PerformanceOptimizer.debounce,\n        throttle: PerformanceOptimizer.throttle\n    },\n    \n    // API module\n    api: {\n        baseURL: 'https://api.example.com',\n        timeout: 5000,\n        \n        async request(endpoint, options = {}) {\n            return SecurityBestPractices.secureApiCall(\n                this.baseURL + endpoint,\n                {\n                    timeout: this.timeout,\n                    ...options\n                }\n            );\n        }\n    },\n    \n    // Validation module\n    validation: {\n        email: (email) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email),\n        phone: (phone) => /^\\+?[1-9]\\d{1,14}$/.test(phone),\n        required: (value) => value !== null && value !== undefined && value !== ''\n    }\n};\n\n// Configuration Best Practices\nconst AppConfig = {\n    // Environment-specific settings\n    development: {\n        apiURL: 'http://localhost:3000/api',\n        debug: true,\n        logLevel: 'debug'\n    },\n    \n    production: {\n        apiURL: 'https://api.myapp.com',\n        debug: false,\n        logLevel: 'error'\n    },\n    \n    // Get current environment config\n    get current() {\n        let env = process.env.NODE_ENV || 'development';\n        return this[env] || this.development;\n    }\n};\n\n// Final Best Practices Summary\nconsole.log('\\n=== Best Practices Summary ===');\n\nconst BestPracticesChecklist = {\n    codeQuality: [\n        '✅ ប្រើ const/let ជំនួស var',\n        '✅ ប្រើ template literals សម្រាប់ strings',\n        '✅ ប្រើ arrow functions ពេលសមស្រប',\n        '✅ ប្រើ destructuring សម្រាប់ objects/arrays',\n        '✅ ប្រើ spread operator សម្រាប់ copying',\n        '✅ ប្រើ async/await ជំនួស callbacks'\n    ],\n    \n    performance: [\n        '✅ Debounce/throttle expensive operations',\n        '✅ ប្រើ lazy loading សម្រាប់ resources',\n        '✅ Cache DOM queries',\n        '✅ ជៀសវាង memory leaks',\n        '✅ ប្រើ efficient algorithms',\n        '✅ Minimize DOM manipulation'\n    ],\n    \n    security: [\n        '✅ Validate និង sanitize inputs',\n        '✅ ប្រើ HTTPS សម្រាប់ API calls',\n        '✅ Implement CSRF protection',\n        '✅ ជៀសវាង XSS vulnerabilities',\n        '✅ ប្រើ secure storage methods',\n        '✅ Implement rate limiting'\n    ],\n    \n    maintainability: [\n        '✅ សរសេរ clear documentation',\n        '✅ ប្រើ meaningful variable names',\n        '✅ Keep functions small និង focused',\n        '✅ ប្រើ consistent code style',\n        '✅ Write comprehensive tests',\n        '✅ Handle errors gracefully'\n    ]\n};\n\nObject.entries(BestPracticesChecklist).forEach(([category, practices]) => {\n    console.log(`\\n${category.toUpperCase()}:`);\n    practices.forEach(practice => console.log(practice));\n});\n\nconsole.log('\\n🎯 JavaScript Best Practices បានបញ្ចប់');\nconsole.log('💡 ចងចាំ: ការអនុវត្តល្អបំផុតនេះនឹងជួយធ្វើឱ្យកូដរបស់អ្នកមានគុណភាពល្អ!');\n\n// Cleanup demonstration\nlet component = new MemoryEfficientComponent();\n// ... ប្រើ component\ncomponent.destroy(); // សំខាន់សម្រាប់ការពារ memory leaks",
    "tip": "អនុវត្តតាម best practices ទាំងនេះជានិច្ច ហើយ review កូដរបស់អ្នកឱ្យបានទៀងទាត់"
  },
     {
    "id": 1,
    "category": "React",
    "path": "/react/introduction",
    "title": "មេរៀនទី១: Introduction to React",
    "explanation": "React គឺជា JavaScript library សម្រាប់បង្កើត user interfaces។ វាត្រូវបានបង្កើតដោយ Facebook និងត្រូវបានប្រើប្រាស់យ៉ាងទូលំទូលាយក្នុងការអភិវឌ្ឍន៍ web applications។",
    "code": "// What is React?\n// React is a JavaScript library for building user interfaces\n\n// Creating your first React component\nimport React from 'react';\n\n// Functional Component\nfunction Welcome() {\n  return (\n    <div>\n      <h1>Hello, React!</h1>\n      <p>Welcome to React development</p>\n    </div>\n  );\n}\n\n// Arrow Function Component\nconst Greeting = () => {\n  return (\n    <div>\n      <h2>Hello from Arrow Function Component!</h2>\n    </div>\n  );\n};\n\n// Component with JSX\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Welcome />\n      <Greeting />\n      <p>React makes building UIs easy and efficient!</p>\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "React components ត្រូវតែចាប់ផ្តើមដោយអក្សរធំ និងត្រូវ return JSX"
  },
  {
    "id": 2,
    "category": "React",
    "path": "/react/jsx",
    "title": "មេរៀនទី២: JSX Syntax",
    "explanation": "JSX គឺជា syntax extension សម្រាប់ JavaScript ដែលអនុញ្ញាតឱ្យយើងសរសេរ HTML-like code នៅក្នុង JavaScript។ វាធ្វើឱ្យការសរសេរ React components កាន់តែងាយស្រួល។",
    "code": "import React from 'react';\n\n// JSX Basics\nconst JSXExample = () => {\n  const name = 'John Doe';\n  const age = 25;\n  const isStudent = true;\n  \n  // JSX Expression\n  const greeting = <h1>Hello, {name}!</h1>;\n  \n  return (\n    <div>\n      {/* JSX Comments */}\n      {greeting}\n      \n      {/* Embedding Expressions */}\n      <p>Age: {age}</p>\n      <p>Status: {isStudent ? 'Student' : 'Not Student'}</p>\n      \n      {/* JSX Attributes */}\n      <img \n        src=\"https://via.placeholder.com/150\" \n        alt=\"Profile\"\n        className=\"profile-image\"\n        style={{ borderRadius: '50%', width: '100px' }}\n      />\n      \n      {/* Conditional Rendering */}\n      {isStudent && <p>Currently studying React!</p>}\n      \n      {/* List Rendering */}\n      <ul>\n        {['HTML', 'CSS', 'JavaScript', 'React'].map((skill, index) => (\n          <li key={index}>{skill}</li>\n        ))}\n      </ul>\n      \n      {/* JSX Fragment */}\n      <React.Fragment>\n        <h3>Fragment Example</h3>\n        <p>This avoids extra div wrapper</p>\n      </React.Fragment>\n      \n      {/* Short Fragment Syntax */}\n      <>\n        <h3>Short Fragment</h3>\n        <p>Even shorter syntax</p>\n      </>\n    </div>\n  );\n};\n\nexport default JSXExample;",
    "tip": "JSX expressions ត្រូវតែនៅក្នុង curly braces {} និង className ប្រើជំនួស class"
  },
  {
    "id": 3,
    "category": "React",
    "path": "/react/components",
    "title": "មេរៀនទី៣: Components and Props",
    "explanation": "Components គឺជាផ្នែកមូលដ្ឋានរបស់ React។ Props គឺជាវិធីដើម្បីបញ្ជូនទិន្នន័យពី parent component ទៅ child component។",
    "code": "import React from 'react';\n\n// Props Interface (TypeScript)\ninterface UserProps {\n  name: string;\n  age: number;\n  email: string;\n  avatar?: string;\n}\n\n// Component with Props\nconst UserCard = ({ name, age, email, avatar }: UserProps) => {\n  return (\n    <div className=\"user-card\">\n      <img \n        src={avatar || 'https://via.placeholder.com/100'} \n        alt={name}\n        className=\"avatar\"\n      />\n      <h3>{name}</h3>\n      <p>Age: {age}</p>\n      <p>Email: {email}</p>\n    </div>\n  );\n};\n\n// Component with Default Props\ninterface ButtonProps {\n  text: string;\n  variant?: 'primary' | 'secondary';\n  size?: 'small' | 'medium' | 'large';\n  onClick?: () => void;\n}\n\nconst Button = ({ \n  text, \n  variant = 'primary', \n  size = 'medium',\n  onClick \n}: ButtonProps) => {\n  const baseClasses = 'btn';\n  const variantClass = `btn--${variant}`;\n  const sizeClass = `btn--${size}`;\n  \n  return (\n    <button \n      className={`${baseClasses} ${variantClass} ${sizeClass}`}\n      onClick={onClick}\n    >\n      {text}\n    </button>\n  );\n};\n\n// Props Children\ninterface CardProps {\n  title: string;\n  children: React.ReactNode;\n}\n\nconst Card = ({ title, children }: CardProps) => {\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h2>{title}</h2>\n      </div>\n      <div className=\"card-body\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\n// Main App Component\nconst App = () => {\n  const handleClick = () => {\n    alert('Button clicked!');\n  };\n  \n  return (\n    <div className=\"app\">\n      <h1>Components and Props Example</h1>\n      \n      {/* Using UserCard Component */}\n      <UserCard \n        name=\"John Doe\"\n        age={25}\n        email=\"john@example.com\"\n        avatar=\"https://via.placeholder.com/100\"\n      />\n      \n      {/* Using Button Component */}\n      <Button text=\"Primary Button\" onClick={handleClick} />\n      <Button text=\"Secondary\" variant=\"secondary\" size=\"large\" />\n      \n      {/* Using Card with Children */}\n      <Card title=\"User Information\">\n        <UserCard \n          name=\"Jane Smith\"\n          age={30}\n          email=\"jane@example.com\"\n        />\n        <Button text=\"Edit Profile\" variant=\"secondary\" />\n      </Card>\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "Props គឺ read-only និងមិនអាចផ្លាស់ប្តូរបានពី child component"
  },
  {
    "id": 4,
    "category": "React",
    "path": "/react/state",
    "title": "មេរៀនទី៤: State Management with useState",
    "explanation": "State គឺជាទិន្នន័យដែលអាចផ្លាស់ប្តូរបាននៅក្នុង component។ useState hook អនុញ្ញាតឱ្យយើងគ្រប់គ្រង state នៅក្នុង functional components។",
    "code": "import React, { useState } from 'react';\n\n// Simple Counter Example\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  \n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  const reset = () => setCount(0);\n  \n  return (\n    <div className=\"counter\">\n      <h2>Counter: {count}</h2>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n};\n\n// Form State Management\nconst ContactForm = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Form submitted:', formData);\n    // Reset form\n    setFormData({ name: '', email: '', message: '' });\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"contact-form\">\n      <h2>Contact Form</h2>\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Your Name\"\n        value={formData.name}\n        onChange={handleInputChange}\n        required\n      />\n      <input\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"Your Email\"\n        value={formData.email}\n        onChange={handleInputChange}\n        required\n      />\n      <textarea\n        name=\"message\"\n        placeholder=\"Your Message\"\n        value={formData.message}\n        onChange={handleInputChange}\n        rows={4}\n        required\n      />\n      <button type=\"submit\">Send Message</button>\n    </form>\n  );\n};\n\n// Todo List with State\ninterface Todo {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\nconst TodoList = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  \n  const addTodo = () => {\n    if (inputValue.trim()) {\n      const newTodo: Todo = {\n        id: Date.now(),\n        text: inputValue,\n        completed: false\n      };\n      setTodos([...todos, newTodo]);\n      setInputValue('');\n    }\n  };\n  \n  const toggleTodo = (id: number) => {\n    setTodos(todos.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n  \n  const deleteTodo = (id: number) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n  \n  return (\n    <div className=\"todo-list\">\n      <h2>Todo List</h2>\n      <div className=\"todo-input\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          placeholder=\"Add a new todo\"\n          onKeyPress={(e) => e.key === 'Enter' && addTodo()}\n        />\n        <button onClick={addTodo}>Add</button>\n      </div>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id} className={todo.completed ? 'completed' : ''}>\n            <span onClick={() => toggleTodo(todo.id)}>\n              {todo.text}\n            </span>\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>State Management Examples</h1>\n      <Counter />\n      <ContactForm />\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "useState hook ត្រូវបានហៅនៅ top level របស់ component និងមិនអាចនៅក្នុង loops ឬ conditions"
  },
  {
    "id": 5,
    "category": "React",
    "path": "/react/event-handling",
    "title": "មេរៀនទី៥: Event Handling",
    "explanation": "Event handling នៅក្នុង React ស្រដៀងនឹង HTML ប៉ុន្តែប្រើ camelCase naming និង SyntheticEvent objects។ វាអនុញ្ញាតឱ្យយើងឆ្លើយតបទៅនឹង user interactions។",
    "code": "import React, { useState } from 'react';\n\n// Basic Event Handling\nconst EventHandlingExample = () => {\n  const [message, setMessage] = useState('');\n  const [clickCount, setClickCount] = useState(0);\n  \n  // Click Event\n  const handleClick = () => {\n    setClickCount(prev => prev + 1);\n    setMessage(`Button clicked ${clickCount + 1} times!`);\n  };\n  \n  // Mouse Events\n  const handleMouseEnter = () => {\n    setMessage('Mouse entered!');\n  };\n  \n  const handleMouseLeave = () => {\n    setMessage('Mouse left!');\n  };\n  \n  // Keyboard Events\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      setMessage('Enter key pressed!');\n    }\n  };\n  \n  return (\n    <div className=\"event-example\">\n      <h2>Event Handling</h2>\n      <p>Message: {message}</p>\n      \n      <button onClick={handleClick}>\n        Click me ({clickCount})\n      </button>\n      \n      <div \n        className=\"hover-area\"\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        style={{ \n          padding: '20px', \n          border: '1px solid #ccc', \n          margin: '10px 0' \n        }}\n      >\n        Hover over me!\n      </div>\n      \n      <input\n        type=\"text\"\n        placeholder=\"Press Enter\"\n        onKeyPress={handleKeyPress}\n      />\n    </div>\n  );\n};\n\n// Form Events\nconst FormEvents = () => {\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    country: '',\n    newsletter: false\n  });\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    const checked = (e.target as HTMLInputElement).checked;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Form Data:', formData);\n    alert('Form submitted! Check console.');\n  };\n  \n  const handleReset = () => {\n    setFormData({\n      username: '',\n      email: '',\n      password: '',\n      country: '',\n      newsletter: false\n    });\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"form-events\">\n      <h2>Form Events</h2>\n      \n      <input\n        type=\"text\"\n        name=\"username\"\n        placeholder=\"Username\"\n        value={formData.username}\n        onChange={handleInputChange}\n        required\n      />\n      \n      <input\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"Email\"\n        value={formData.email}\n        onChange={handleInputChange}\n        required\n      />\n      \n      <input\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"Password\"\n        value={formData.password}\n        onChange={handleInputChange}\n        required\n      />\n      \n      <select\n        name=\"country\"\n        value={formData.country}\n        onChange={handleInputChange}\n        required\n      >\n        <option value=\"\">Select Country</option>\n        <option value=\"cambodia\">Cambodia</option>\n        <option value=\"thailand\">Thailand</option>\n        <option value=\"vietnam\">Vietnam</option>\n      </select>\n      \n      <label>\n        <input\n          type=\"checkbox\"\n          name=\"newsletter\"\n          checked={formData.newsletter}\n          onChange={handleInputChange}\n        />\n        Subscribe to newsletter\n      </label>\n      \n      <div className=\"form-actions\">\n        <button type=\"submit\">Submit</button>\n        <button type=\"button\" onClick={handleReset}>Reset</button>\n      </div>\n    </form>\n  );\n};\n\n// Event Delegation and Dynamic Events\nconst DynamicEvents = () => {\n  const [items, setItems] = useState(['Item 1', 'Item 2', 'Item 3']);\n  const [newItem, setNewItem] = useState('');\n  \n  const addItem = () => {\n    if (newItem.trim()) {\n      setItems([...items, newItem]);\n      setNewItem('');\n    }\n  };\n  \n  const removeItem = (index: number) => {\n    setItems(items.filter((_, i) => i !== index));\n  };\n  \n  // Event with parameters\n  const handleItemClick = (item: string, index: number) => {\n    alert(`Clicked on ${item} at index ${index}`);\n  };\n  \n  return (\n    <div className=\"dynamic-events\">\n      <h2>Dynamic Events</h2>\n      \n      <div className=\"add-item\">\n        <input\n          type=\"text\"\n          value={newItem}\n          onChange={(e) => setNewItem(e.target.value)}\n          placeholder=\"Add new item\"\n          onKeyPress={(e) => e.key === 'Enter' && addItem()}\n        />\n        <button onClick={addItem}>Add</button>\n      </div>\n      \n      <ul className=\"item-list\">\n        {items.map((item, index) => (\n          <li key={index}>\n            <span onClick={() => handleItemClick(item, index)}>\n              {item}\n            </span>\n            <button onClick={() => removeItem(index)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Event Handling in React</h1>\n      <EventHandlingExample />\n      <FormEvents />\n      <DynamicEvents />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "React events គឺជា SyntheticEvents ដែល wrap native DOM events និងផ្តល់នូវ consistent behavior"
  },
  {
    "id": 6,
    "category": "React",
    "path": "/react/conditional-rendering",
    "title": "មេរៀនទី៦: Conditional Rendering",
    "explanation": "Conditional rendering អនុញ្ញាតឱ្យយើងបង្ហាញ components ឬ elements ផ្សេងៗគ្នាដោយផ្អែកលើ conditions។ នេះជាមុខងារសំខាន់សម្រាប់បង្កើត dynamic UIs។",
    "code": "import React, { useState } from 'react';\n\n// Basic Conditional Rendering\nconst ConditionalExample = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userRole, setUserRole] = useState<'admin' | 'user' | 'guest'>('guest');\n  \n  // If-else rendering\n  const renderAuthStatus = () => {\n    if (isLoggedIn) {\n      return <p className=\"success\">Welcome back!</p>;\n    } else {\n      return <p className=\"warning\">Please log in</p>;\n    }\n  };\n  \n  return (\n    <div className=\"conditional-example\">\n      <h2>Authentication Status</h2>\n      \n      {/* Method 1: Function call */}\n      {renderAuthStatus()}\n      \n      {/* Method 2: Ternary operator */}\n      <p>\n        Status: {isLoggedIn ? 'Logged In' : 'Logged Out'}\n      </p>\n      \n      {/* Method 3: Logical AND operator */}\n      {isLoggedIn && (\n        <div className=\"user-menu\">\n          <button>Profile</button>\n          <button>Settings</button>\n          <button onClick={() => setIsLoggedIn(false)}>Logout</button>\n        </div>\n      )}\n      \n      {/* Method 4: Logical AND with negation */}\n      {!isLoggedIn && (\n        <button onClick={() => setIsLoggedIn(true)}>\n          Login\n        </button>\n      )}\n      \n      {/* Role-based rendering */}\n      <div className=\"role-section\">\n        <h3>Role: {userRole}</h3>\n        <select \n          value={userRole} \n          onChange={(e) => setUserRole(e.target.value as any)}\n        >\n          <option value=\"guest\">Guest</option>\n          <option value=\"user\">User</option>\n          <option value=\"admin\">Admin</option>\n        </select>\n        \n        {/* Multiple conditions */}\n        {userRole === 'admin' && (\n          <div className=\"admin-panel\">\n            <h4>Admin Panel</h4>\n            <button>Manage Users</button>\n            <button>System Settings</button>\n          </div>\n        )}\n        \n        {userRole === 'user' && (\n          <div className=\"user-panel\">\n            <h4>User Dashboard</h4>\n            <button>My Profile</button>\n            <button>My Orders</button>\n          </div>\n        )}\n        \n        {userRole === 'guest' && (\n          <div className=\"guest-panel\">\n            <h4>Guest Access</h4>\n            <p>Limited features available</p>\n            <button>Sign Up</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Loading States\nconst LoadingExample = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState<string[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  \n  const fetchData = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Simulate random success/failure\n      if (Math.random() > 0.3) {\n        setData(['Item 1', 'Item 2', 'Item 3', 'Item 4']);\n      } else {\n        throw new Error('Failed to fetch data');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"loading-example\">\n      <h2>Loading States</h2>\n      \n      <button onClick={fetchData} disabled={isLoading}>\n        {isLoading ? 'Loading...' : 'Fetch Data'}\n      </button>\n      \n      {/* Loading state */}\n      {isLoading && (\n        <div className=\"loading\">\n          <p>Loading data...</p>\n          <div className=\"spinner\"></div>\n        </div>\n      )}\n      \n      {/* Error state */}\n      {error && (\n        <div className=\"error\">\n          <p>Error: {error}</p>\n          <button onClick={fetchData}>Retry</button>\n        </div>\n      )}\n      \n      {/* Success state */}\n      {data && !isLoading && (\n        <div className=\"success\">\n          <h3>Data loaded successfully:</h3>\n          <ul>\n            {data.map((item, index) => (\n              <li key={index}>{item}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      \n      {/* Empty state */}\n      {!data && !isLoading && !error && (\n        <p className=\"empty\">No data available. Click \"Fetch Data\" to load.</p>\n      )}\n    </div>\n  );\n};\n\n// Complex Conditional Rendering\nconst ShoppingCart = () => {\n  const [cartItems, setCartItems] = useState<Array<{id: number, name: string, price: number, quantity: number}>>([]);\n  const [isCheckingOut, setIsCheckingOut] = useState(false);\n  \n  const addItem = () => {\n    const newItem = {\n      id: Date.now(),\n      name: `Product ${cartItems.length + 1}`,\n      price: Math.floor(Math.random() * 100) + 10,\n      quantity: 1\n    };\n    setCartItems([...cartItems, newItem]);\n  };\n  \n  const removeItem = (id: number) => {\n    setCartItems(cartItems.filter(item => item.id !== id));\n  };\n  \n  const getTotalPrice = () => {\n    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n  };\n  \n  const handleCheckout = () => {\n    setIsCheckingOut(true);\n    setTimeout(() => {\n      setCartItems([]);\n      setIsCheckingOut(false);\n      alert('Order placed successfully!');\n    }, 2000);\n  };\n  \n  return (\n    <div className=\"shopping-cart\">\n      <h2>Shopping Cart</h2>\n      \n      <button onClick={addItem}>Add Random Item</button>\n      \n      {/* Empty cart */}\n      {cartItems.length === 0 && !isCheckingOut && (\n        <div className=\"empty-cart\">\n          <p>Your cart is empty</p>\n          <p>Add some items to get started!</p>\n        </div>\n      )}\n      \n      {/* Cart with items */}\n      {cartItems.length > 0 && (\n        <div className=\"cart-items\">\n          <h3>Cart Items ({cartItems.length})</h3>\n          {cartItems.map(item => (\n            <div key={item.id} className=\"cart-item\">\n              <span>{item.name}</span>\n              <span>${item.price}</span>\n              <button onClick={() => removeItem(item.id)}>Remove</button>\n            </div>\n          ))}\n          \n          <div className=\"cart-total\">\n            <strong>Total: ${getTotalPrice()}</strong>\n          </div>\n          \n          {/* Checkout button - only show if not checking out */}\n          {!isCheckingOut && (\n            <button \n              className=\"checkout-btn\" \n              onClick={handleCheckout}\n              disabled={cartItems.length === 0}\n            >\n              Checkout\n            </button>\n          )}\n        </div>\n      )}\n      \n      {/* Checkout loading */}\n      {isCheckingOut && (\n        <div className=\"checkout-loading\">\n          <p>Processing your order...</p>\n          <div className=\"spinner\"></div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Conditional Rendering Examples</h1>\n      <ConditionalExample />\n      <LoadingExample />\n      <ShoppingCart />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "ប្រើ && operator សម្រាប់ simple conditions និង ternary operator សម្រាប់ if-else cases"
  },
  {
    "id": 7,
    "category": "React",
    "path": "/react/lists-keys",
    "title": "មេរៀនទី៧: Lists and Keys",
    "explanation": "Lists និង Keys គឺជាគោលការណ៍សំខាន់នៅក្នុង React សម្រាប់ rendering arrays of elements។ Keys ជួយ React identify ថាតើ items ណាដែលបានផ្លាស់ប្តូរ បន្ថែម ឬលុបចេញ។",
    "code": "import React, { useState } from 'react';\n\n// Basic List Rendering\nconst BasicList = () => {\n  const fruits = ['Apple', 'Banana', 'Orange', 'Grape', 'Mango'];\n  const numbers = [1, 2, 3, 4, 5];\n  \n  return (\n    <div className=\"basic-list\">\n      <h2>Basic Lists</h2>\n      \n      {/* Simple string array */}\n      <h3>Fruits:</h3>\n      <ul>\n        {fruits.map((fruit, index) => (\n          <li key={index}>{fruit}</li>\n        ))}\n      </ul>\n      \n      {/* Number array with transformation */}\n      <h3>Squared Numbers:</h3>\n      <ul>\n        {numbers.map(number => (\n          <li key={number}>{number} squared = {number * number}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// Object Arrays with Proper Keys\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  age: number;\n}\n\nconst UserList = () => {\n  const [users, setUsers] = useState<User[]>([\n    { id: 1, name: 'John Doe', email: 'john@example.com', age: 25 },\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com', age: 30 },\n    { id: 3, name: 'Bob Johnson', email: 'bob@example.com', age: 35 }\n  ]);\n  \n  const [newUser, setNewUser] = useState({ name: '', email: '', age: '' });\n  \n  const addUser = () => {\n    if (newUser.name && newUser.email && newUser.age) {\n      const user: User = {\n        id: Date.now(), // Better to use UUID in real apps\n        name: newUser.name,\n        email: newUser.email,\n        age: parseInt(newUser.age)\n      };\n      setUsers([...users, user]);\n      setNewUser({ name: '', email: '', age: '' });\n    }\n  };\n  \n  const removeUser = (id: number) => {\n    setUsers(users.filter(user => user.id !== id));\n  };\n  \n  return (\n    <div className=\"user-list\">\n      <h2>User Management</h2>\n      \n      {/* Add User Form */}\n      <div className=\"add-user-form\">\n        <h3>Add New User</h3>\n        <input\n          type=\"text\"\n          placeholder=\"Name\"\n          value={newUser.name}\n          onChange={(e) => setNewUser({...newUser, name: e.target.value})}\n        />\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={newUser.email}\n          onChange={(e) => setNewUser({...newUser, email: e.target.value})}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Age\"\n          value={newUser.age}\n          onChange={(e) => setNewUser({...newUser, age: e.target.value})}\n        />\n        <button onClick={addUser}>Add User</button>\n      </div>\n      \n      {/* User List */}\n      <div className=\"users\">\n        <h3>Users ({users.length})</h3>\n        {users.length === 0 ? (\n          <p>No users found</p>\n        ) : (\n          <div className=\"user-grid\">\n            {users.map(user => (\n              <div key={user.id} className=\"user-card\">\n                <h4>{user.name}</h4>\n                <p>Email: {user.email}</p>\n                <p>Age: {user.age}</p>\n                <button onClick={() => removeUser(user.id)}>Remove</button>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Dynamic List with Filtering and Sorting\ninterface Product {\n  id: number;\n  name: string;\n  category: string;\n  price: number;\n  inStock: boolean;\n}\n\nconst ProductList = () => {\n  const [products] = useState<Product[]>([\n    { id: 1, name: 'Laptop', category: 'Electronics', price: 999, inStock: true },\n    { id: 2, name: 'Phone', category: 'Electronics', price: 699, inStock: false },\n    { id: 3, name: 'Book', category: 'Education', price: 29, inStock: true },\n    { id: 4, name: 'Headphones', category: 'Electronics', price: 199, inStock: true },\n    { id: 5, name: 'Notebook', category: 'Education', price: 15, inStock: false }\n  ]);\n  \n  const [filter, setFilter] = useState('all');\n  const [sortBy, setSortBy] = useState<'name' | 'price'>('name');\n  const [searchTerm, setSearchTerm] = useState('');\n  \n  // Filter products\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFilter = filter === 'all' || \n                         (filter === 'inStock' && product.inStock) ||\n                         (filter === 'outOfStock' && !product.inStock) ||\n                         (filter === product.category);\n    return matchesSearch && matchesFilter;\n  });\n  \n  // Sort products\n  const sortedProducts = [...filteredProducts].sort((a, b) => {\n    if (sortBy === 'name') {\n      return a.name.localeCompare(b.name);\n    } else {\n      return a.price - b.price;\n    }\n  });\n  \n  const categories = ['all', 'Electronics', 'Education', 'inStock', 'outOfStock'];\n  \n  return (\n    <div className=\"product-list\">\n      <h2>Product Catalog</h2>\n      \n      {/* Controls */}\n      <div className=\"controls\">\n        <input\n          type=\"text\"\n          placeholder=\"Search products...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n        \n        <select value={filter} onChange={(e) => setFilter(e.target.value)}>\n          {categories.map(category => (\n            <option key={category} value={category}>\n              {category === 'all' ? 'All Products' : \n               category === 'inStock' ? 'In Stock' :\n               category === 'outOfStock' ? 'Out of Stock' : category}\n            </option>\n          ))}\n        </select>\n        \n        <select value={sortBy} onChange={(e) => setSortBy(e.target.value as 'name' | 'price')}>\n          <option value=\"name\">Sort by Name</option>\n          <option value=\"price\">Sort by Price</option>\n        </select>\n      </div>\n      \n      {/* Products */}\n      <div className=\"products\">\n        <p>Showing {sortedProducts.length} of {products.length} products</p>\n        \n        {sortedProducts.length === 0 ? (\n          <p>No products match your criteria</p>\n        ) : (\n          <div className=\"product-grid\">\n            {sortedProducts.map(product => (\n              <div \n                key={product.id} \n                className={`product-card ${!product.inStock ? 'out-of-stock' : ''}`}\n              >\n                <h4>{product.name}</h4>\n                <p>Category: {product.category}</p>\n                <p>Price: ${product.price}</p>\n                <p className={`stock-status ${product.inStock ? 'in-stock' : 'out-of-stock'}`}>\n                  {product.inStock ? 'In Stock' : 'Out of Stock'}\n                </p>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Nested Lists\ninterface Category {\n  id: number;\n  name: string;\n  items: string[];\n}\n\nconst NestedList = () => {\n  const categories: Category[] = [\n    { id: 1, name: 'Fruits', items: ['Apple', 'Banana', 'Orange'] },\n    { id: 2, name: 'Vegetables', items: ['Carrot', 'Broccoli', 'Spinach'] },\n    { id: 3, name: 'Grains', items: ['Rice', 'Wheat', 'Oats'] }\n  ];\n  \n  return (\n    <div className=\"nested-list\">\n      <h2>Nested Lists</h2>\n      {categories.map(category => (\n        <div key={category.id} className=\"category\">\n          <h3>{category.name}</h3>\n          <ul>\n            {category.items.map((item, index) => (\n              <li key={`${category.id}-${index}`}>{item}</li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Lists and Keys in React</h1>\n      <BasicList />\n      <UserList />\n      <ProductList />\n      <NestedList />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "ប្រើ unique IDs ជា keys ជាជាងប្រើ array indexes ដើម្បីបញ្ជៀសបញ្ហា rendering"
  },
  {
    "id": 8,
    "category": "React",
    "path": "/react/useeffect",
    "title": "មេរៀនទី៨: useEffect Hook",
    "explanation": "useEffect hook អនុញ្ញាតឱ្យយើងធ្វើ side effects នៅក្នុង functional components។ វាអាចប្រើសម្រាប់ data fetching, subscriptions, ឬ manually changing DOM។",
    "code": "import React, { useState, useEffect } from 'react';\n\n// Basic useEffect\nconst BasicEffect = () => {\n  const [count, setCount] = useState(0);\n  const [message, setMessage] = useState('');\n  \n  // Effect runs after every render\n  useEffect(() => {\n    console.log('Component rendered or updated');\n    document.title = `Count: ${count}`;\n  });\n  \n  // Effect with dependency array - runs only when count changes\n  useEffect(() => {\n    if (count > 0) {\n      setMessage(`Count is now ${count}`);\n    }\n  }, [count]);\n  \n  // Effect runs only once (on mount)\n  useEffect(() => {\n    console.log('Component mounted');\n    setMessage('Component has been mounted!');\n    \n    // Cleanup function (runs on unmount)\n    return () => {\n      console.log('Component will unmount');\n    };\n  }, []); // Empty dependency array\n  \n  return (\n    <div className=\"basic-effect\">\n      <h2>Basic useEffect</h2>\n      <p>Count: {count}</p>\n      <p>Message: {message}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <button onClick={() => setCount(0)}>Reset</button>\n    </div>\n  );\n};\n\n// Data Fetching with useEffect\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n  userId: number;\n}\n\nconst DataFetching = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState(1);\n  \n  // Fetch posts when component mounts or selectedUserId changes\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/posts?userId=${selectedUserId}`\n        );\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch posts');\n        }\n        \n        const data = await response.json();\n        setPosts(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchPosts();\n  }, [selectedUserId]);\n  \n  return (\n    <div className=\"data-fetching\">\n      <h2>Data Fetching</h2>\n      \n      <div className=\"user-selector\">\n        <label>Select User: </label>\n        <select \n          value={selectedUserId} \n          onChange={(e) => setSelectedUserId(Number(e.target.value))}\n        >\n          {[1, 2, 3, 4, 5].map(id => (\n            <option key={id} value={id}>User {id}</option>\n          ))}\n        </select>\n      </div>\n      \n      {loading && <p>Loading posts...</p>}\n      {error && <p className=\"error\">Error: {error}</p>}\n      \n      {!loading && !error && (\n        <div className=\"posts\">\n          <h3>Posts by User {selectedUserId} ({posts.length})</h3>\n          {posts.map(post => (\n            <div key={post.id} className=\"post\">\n              <h4>{post.title}</h4>\n              <p>{post.body}</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Timer and Cleanup\nconst Timer = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  \n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n    \n    if (isRunning) {\n      intervalId = setInterval(() => {\n        setSeconds(prevSeconds => prevSeconds + 1);\n      }, 1000);\n    }\n    \n    // Cleanup function\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [isRunning]);\n  \n  const startTimer = () => setIsRunning(true);\n  const stopTimer = () => setIsRunning(false);\n  const resetTimer = () => {\n    setSeconds(0);\n    setIsRunning(false);\n  };\n  \n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  return (\n    <div className=\"timer\">\n      <h2>Timer</h2>\n      <div className=\"time-display\">\n        <h3>{formatTime(seconds)}</h3>\n      </div>\n      <div className=\"timer-controls\">\n        <button onClick={startTimer} disabled={isRunning}>\n          Start\n        </button>\n        <button onClick={stopTimer} disabled={!isRunning}>\n          Stop\n        </button>\n        <button onClick={resetTimer}>\n          Reset\n        </button>\n      </div>\n      <p>Status: {isRunning ? 'Running' : 'Stopped'}</p>\n    </div>\n  );\n};\n\n// Window Resize Listener\nconst WindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  \n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n    \n    // Add event listener\n    window.addEventListener('resize', handleResize);\n    \n    // Cleanup: remove event listener\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []); // Empty dependency array - effect runs once\n  \n  return (\n    <div className=\"window-size\">\n      <h2>Window Size</h2>\n      <p>Width: {windowSize.width}px</p>\n      <p>Height: {windowSize.height}px</p>\n      <p>Resize the window to see changes!</p>\n    </div>\n  );\n};\n\n// Local Storage Sync\nconst LocalStorageSync = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  \n  // Load from localStorage on mount\n  useEffect(() => {\n    const savedName = localStorage.getItem('userName');\n    const savedEmail = localStorage.getItem('userEmail');\n    \n    if (savedName) setName(savedName);\n    if (savedEmail) setEmail(savedEmail);\n  }, []);\n  \n  // Save to localStorage when name changes\n  useEffect(() => {\n    if (name) {\n      localStorage.setItem('userName', name);\n    }\n  }, [name]);\n  \n  // Save to localStorage when email changes\n  useEffect(() => {\n    if (email) {\n      localStorage.setItem('userEmail', email);\n    }\n  }, [email]);\n  \n  const clearData = () => {\n    setName('');\n    setEmail('');\n    localStorage.removeItem('userName');\n    localStorage.removeItem('userEmail');\n  };\n  \n  return (\n    <div className=\"local-storage-sync\">\n      <h2>Local Storage Sync</h2>\n      <p>Data is automatically saved to localStorage</p>\n      \n      <div className=\"form-group\">\n        <label>Name:</label>\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"Enter your name\"\n        />\n      </div>\n      \n      <div className=\"form-group\">\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"Enter your email\"\n        />\n      </div>\n      \n      <button onClick={clearData}>Clear Data</button>\n      \n      {(name || email) && (\n        <div className=\"saved-data\">\n          <h3>Saved Data:</h3>\n          <p>Name: {name}</p>\n          <p>Email: {email}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Component Toggle for Testing Cleanup\nconst ComponentToggle = () => {\n  const [showTimer, setShowTimer] = useState(true);\n  const [showWindowSize, setShowWindowSize] = useState(true);\n  \n  return (\n    <div className=\"component-toggle\">\n      <h2>Component Lifecycle Testing</h2>\n      \n      <div className=\"toggles\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={showTimer}\n            onChange={(e) => setShowTimer(e.target.checked)}\n          />\n          Show Timer\n        </label>\n        \n        <label>\n          <input\n            type=\"checkbox\"\n            checked={showWindowSize}\n            onChange={(e) => setShowWindowSize(e.target.checked)}\n          />\n          Show Window Size\n        </label>\n      </div>\n      \n      {showTimer && <Timer />}\n      {showWindowSize && <WindowSize />}\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>useEffect Hook Examples</h1>\n      <BasicEffect />\n      <DataFetching />\n      <LocalStorageSync />\n      <ComponentToggle />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "ប្រើ dependency array ដើម្បីគ្រប់គ្រងពេលវេលាដែល effect ត្រូវបាន run និងកុំភ្លេច cleanup"
  },
  {
    "id": 9,
    "category": "React",
    "path": "/react/custom-hooks",
    "title": "មេរៀនទី៩: Custom Hooks",
    "explanation": "Custom Hooks អនុញ្ញាតឱ្យយើងបង្កើត reusable stateful logic ដែលអាចចែករំលែកបានរវាង components។ វាជាវិធីដ៏មានប្រសិទ្ធភាពក្នុងការរៀបចំកូដ។",
    "code": "import React, { useState, useEffect, useCallback, useRef } from 'react';\n\n// 1. useCounter - Custom hook for counter logic\nconst useCounter = (initialValue: number = 0, step: number = 1) => {\n  const [count, setCount] = useState(initialValue);\n  \n  const increment = useCallback(() => {\n    setCount(prev => prev + step);\n  }, [step]);\n  \n  const decrement = useCallback(() => {\n    setCount(prev => prev - step);\n  }, [step]);\n  \n  const reset = useCallback(() => {\n    setCount(initialValue);\n  }, [initialValue]);\n  \n  const setValue = useCallback((value: number) => {\n    setCount(value);\n  }, []);\n  \n  return {\n    count,\n    increment,\n    decrement,\n    reset,\n    setValue\n  };\n};\n\n// 2. useLocalStorage - Sync state with localStorage\nconst useLocalStorage = <T>(key: string, initialValue: T) => {\n  // Get initial value from localStorage or use provided initial value\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n  \n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = useCallback((value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  }, [key, storedValue]);\n  \n  return [storedValue, setValue] as const;\n};\n\n// 3. useFetch - Data fetching hook\ninterface UseFetchResult<T> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n  refetch: () => void;\n}\n\nconst useFetch = <T>(url: string): UseFetchResult<T> => {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  }, [url]);\n  \n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  \n  return { data, loading, error, refetch: fetchData };\n};\n\n// 4. useDebounce - Debounce hook for performance\nconst useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n  \n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    \n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  \n  return debouncedValue;\n};\n\n// 5. useToggle - Toggle boolean state\nconst useToggle = (initialValue: boolean = false) => {\n  const [value, setValue] = useState(initialValue);\n  \n  const toggle = useCallback(() => {\n    setValue(prev => !prev);\n  }, []);\n  \n  const setTrue = useCallback(() => {\n    setValue(true);\n  }, []);\n  \n  const setFalse = useCallback(() => {\n    setValue(false);\n  }, []);\n  \n  return {\n    value,\n    toggle,\n    setTrue,\n    setFalse,\n    setValue\n  };\n};\n\n// 6. useWindowSize - Track window dimensions\nconst useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  \n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  return windowSize;\n};\n\n// 7. usePrevious - Get previous value\nconst usePrevious = <T>(value: T): T | undefined => {\n  const ref = useRef<T>();\n  \n  useEffect(() => {\n    ref.current = value;\n  });\n  \n  return ref.current;\n};\n\n// 8. useInterval - Declarative interval hook\nconst useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = useRef(callback);\n  \n  // Remember the latest callback\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  \n  // Set up the interval\n  useEffect(() => {\n    if (delay !== null) {\n      const id = setInterval(() => savedCallback.current(), delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\n// Example Components using Custom Hooks\n\n// Counter Example\nconst CounterExample = () => {\n  const { count, increment, decrement, reset } = useCounter(0, 2);\n  const { value: isVisible, toggle } = useToggle(true);\n  \n  return (\n    <div className=\"counter-example\">\n      <h2>Custom Counter Hook</h2>\n      {isVisible && (\n        <div>\n          <p>Count: {count}</p>\n          <button onClick={increment}>+2</button>\n          <button onClick={decrement}>-2</button>\n          <button onClick={reset}>Reset</button>\n        </div>\n      )}\n      <button onClick={toggle}>\n        {isVisible ? 'Hide' : 'Show'} Counter\n      </button>\n    </div>\n  );\n};\n\n// LocalStorage Example\nconst LocalStorageExample = () => {\n  const [name, setName] = useLocalStorage('userName', '');\n  const [preferences, setPreferences] = useLocalStorage('userPrefs', {\n    theme: 'light',\n    notifications: true\n  });\n  \n  return (\n    <div className=\"localstorage-example\">\n      <h2>LocalStorage Hook</h2>\n      <div>\n        <label>Name: </label>\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"Enter your name\"\n        />\n      </div>\n      \n      <div>\n        <label>Theme: </label>\n        <select\n          value={preferences.theme}\n          onChange={(e) => setPreferences({\n            ...preferences,\n            theme: e.target.value as 'light' | 'dark'\n          })}\n        >\n          <option value=\"light\">Light</option>\n          <option value=\"dark\">Dark</option>\n        </select>\n      </div>\n      \n      <div>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={preferences.notifications}\n            onChange={(e) => setPreferences({\n              ...preferences,\n              notifications: e.target.checked\n            })}\n          />\n          Enable Notifications\n        </label>\n      </div>\n      \n      <div className=\"saved-data\">\n        <h3>Saved Data:</h3>\n        <p>Name: {name}</p>\n        <p>Theme: {preferences.theme}</p>\n        <p>Notifications: {preferences.notifications ? 'On' : 'Off'}</p>\n      </div>\n    </div>\n  );\n};\n\n// Data Fetching Example\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n}\n\nconst DataFetchingExample = () => {\n  const { data: posts, loading, error, refetch } = useFetch<Post[]>(\n    'https://jsonplaceholder.typicode.com/posts?_limit=5'\n  );\n  \n  return (\n    <div className=\"data-fetching-example\">\n      <h2>Data Fetching Hook</h2>\n      <button onClick={refetch} disabled={loading}>\n        {loading ? 'Loading...' : 'Refetch Data'}\n      </button>\n      \n      {error && <p className=\"error\">Error: {error}</p>}\n      \n      {posts && (\n        <div className=\"posts\">\n          {posts.map(post => (\n            <div key={post.id} className=\"post\">\n              <h4>{post.title}</h4>\n              <p>{post.body.substring(0, 100)}...</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Search with Debounce Example\nconst SearchExample = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n  const [searchResults, setSearchResults] = useState<string[]>([]);\n  \n  // Mock search function\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      // Simulate API call\n      const results = [\n        'Apple', 'Banana', 'Cherry', 'Date', 'Elderberry',\n        'Fig', 'Grape', 'Honeydew', 'Kiwi', 'Lemon'\n      ].filter(fruit => \n        fruit.toLowerCase().includes(debouncedSearchTerm.toLowerCase())\n      );\n      setSearchResults(results);\n    } else {\n      setSearchResults([]);\n    }\n  }, [debouncedSearchTerm]);\n  \n  return (\n    <div className=\"search-example\">\n      <h2>Debounced Search</h2>\n      <input\n        type=\"text\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        placeholder=\"Search fruits...\"\n      />\n      <p>Searching for: {debouncedSearchTerm}</p>\n      \n      {searchResults.length > 0 && (\n        <ul>\n          {searchResults.map((result, index) => (\n            <li key={index}>{result}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\n// Window Size and Previous Value Example\nconst WindowExample = () => {\n  const windowSize = useWindowSize();\n  const previousSize = usePrevious(windowSize);\n  const [time, setTime] = useState(new Date());\n  \n  useInterval(() => {\n    setTime(new Date());\n  }, 1000);\n  \n  return (\n    <div className=\"window-example\">\n      <h2>Window Size & Previous Value</h2>\n      <p>Current time: {time.toLocaleTimeString()}</p>\n      <p>Current size: {windowSize.width} x {windowSize.height}</p>\n      {previousSize && (\n        <p>Previous size: {previousSize.width} x {previousSize.height}</p>\n      )}\n      <p>Resize the window to see changes!</p>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Custom Hooks Examples</h1>\n      <CounterExample />\n      <LocalStorageExample />\n      <DataFetchingExample />\n      <SearchExample />\n      <WindowExample />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "Custom hooks ត្រូវចាប់ផ្តើមដោយ 'use' និងអាចប្រើ built-in hooks នៅខាងក្នុង"
  },
  {
    "id": 10,
    "category": "React",
    "path": "/react/context-api",
    "title": "មេរៀនទី១០: Context API",
    "explanation": "Context API អនុញ្ញាតឱ្យយើងចែករំលែក data រវាង components ដោយមិនចាំបាច់បញ្ជូន props តាមរយៈ component tree។ វាមានប្រយោជន៍សម្រាប់ global state management។",
    "code": "import React, { createContext, useContext, useReducer, useState, ReactNode } from 'react';\n\n// 1. Theme Context Example\ninterface ThemeContextType {\n  theme: 'light' | 'dark';\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Theme Provider\nconst ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n  \n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n  \n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Custom hook to use theme context\nconst useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// 2. User Authentication Context\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  role: 'admin' | 'user';\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const login = async (email: string, password: string): Promise<boolean> => {\n    setIsLoading(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock authentication\n      if (email === 'admin@example.com' && password === 'admin') {\n        setUser({\n          id: 1,\n          name: 'Admin User',\n          email: 'admin@example.com',\n          role: 'admin'\n        });\n        return true;\n      } else if (email === 'user@example.com' && password === 'user') {\n        setUser({\n          id: 2,\n          name: 'Regular User',\n          email: 'user@example.com',\n          role: 'user'\n        });\n        return true;\n      }\n      \n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const logout = () => {\n    setUser(null);\n  };\n  \n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nconst useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// 3. Shopping Cart Context with useReducer\ninterface CartItem {\n  id: number;\n  name: string;\n  price: number;\n  quantity: number;\n}\n\ninterface CartState {\n  items: CartItem[];\n  total: number;\n}\n\ntype CartAction =\n  | { type: 'ADD_ITEM'; payload: Omit<CartItem, 'quantity'> }\n  | { type: 'REMOVE_ITEM'; payload: number }\n  | { type: 'UPDATE_QUANTITY'; payload: { id: number; quantity: number } }\n  | { type: 'CLEAR_CART' };\n\nconst cartReducer = (state: CartState, action: CartAction): CartState => {\n  switch (action.type) {\n    case 'ADD_ITEM': {\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      \n      if (existingItem) {\n        const updatedItems = state.items.map(item =>\n          item.id === action.payload.id\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        );\n        return {\n          items: updatedItems,\n          total: updatedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)\n        };\n      } else {\n        const newItems = [...state.items, { ...action.payload, quantity: 1 }];\n        return {\n          items: newItems,\n          total: newItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)\n        };\n      }\n    }\n    \n    case 'REMOVE_ITEM': {\n      const filteredItems = state.items.filter(item => item.id !== action.payload);\n      return {\n        items: filteredItems,\n        total: filteredItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)\n      };\n    }\n    \n    case 'UPDATE_QUANTITY': {\n      const updatedItems = state.items.map(item =>\n        item.id === action.payload.id\n          ? { ...item, quantity: Math.max(0, action.payload.quantity) }\n          : item\n      ).filter(item => item.quantity > 0);\n      \n      return {\n        items: updatedItems,\n        total: updatedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)\n      };\n    }\n    \n    case 'CLEAR_CART':\n      return { items: [], total: 0 };\n    \n    default:\n      return state;\n  }\n};\n\ninterface CartContextType {\n  state: CartState;\n  addItem: (item: Omit<CartItem, 'quantity'>) => void;\n  removeItem: (id: number) => void;\n  updateQuantity: (id: number, quantity: number) => void;\n  clearCart: () => void;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nconst CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [state, dispatch] = useReducer(cartReducer, { items: [], total: 0 });\n  \n  const addItem = (item: Omit<CartItem, 'quantity'>) => {\n    dispatch({ type: 'ADD_ITEM', payload: item });\n  };\n  \n  const removeItem = (id: number) => {\n    dispatch({ type: 'REMOVE_ITEM', payload: id });\n  };\n  \n  const updateQuantity = (id: number, quantity: number) => {\n    dispatch({ type: 'UPDATE_QUANTITY', payload: { id, quantity } });\n  };\n  \n  const clearCart = () => {\n    dispatch({ type: 'CLEAR_CART' });\n  };\n  \n  return (\n    <CartContext.Provider value={{ state, addItem, removeItem, updateQuantity, clearCart }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nconst useCart = () => {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\n// Components using Context\n\n// Header Component\nconst Header = () => {\n  const { theme, toggleTheme } = useTheme();\n  const { user, logout } = useAuth();\n  const { state } = useCart();\n  \n  return (\n    <header className={`header ${theme}`}>\n      <div className=\"header-content\">\n        <h1>My Store</h1>\n        \n        <div className=\"header-actions\">\n          <button onClick={toggleTheme}>\n            {theme === 'light' ? '🌙' : '☀️'} {theme === 'light' ? 'Dark' : 'Light'}\n          </button>\n          \n          <div className=\"cart-info\">\n            🛒 Cart ({state.items.length}) - ${state.total.toFixed(2)}\n          </div>\n          \n          {user ? (\n            <div className=\"user-info\">\n              <span>Welcome, {user.name}!</span>\n              <button onClick={logout}>Logout</button>\n            </div>\n          ) : (\n            <span>Not logged in</span>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n\n// Login Component\nconst LoginForm = () => {\n  const { login, isLoading } = useAuth();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    \n    const success = await login(email, password);\n    if (!success) {\n      setError('Invalid credentials');\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"login-form\">\n      <h2>Login</h2>\n      <p>Try: admin@example.com / admin or user@example.com / user</p>\n      \n      <input\n        type=\"email\"\n        placeholder=\"Email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        required\n      />\n      \n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        required\n      />\n      \n      <button type=\"submit\" disabled={isLoading}>\n        {isLoading ? 'Logging in...' : 'Login'}\n      </button>\n      \n      {error && <p className=\"error\">{error}</p>}\n    </form>\n  );\n};\n\n// Product List Component\nconst ProductList = () => {\n  const { addItem } = useCart();\n  const { theme } = useTheme();\n  \n  const products = [\n    { id: 1, name: 'Laptop', price: 999 },\n    { id: 2, name: 'Phone', price: 699 },\n    { id: 3, name: 'Headphones', price: 199 },\n    { id: 4, name: 'Tablet', price: 399 }\n  ];\n  \n  return (\n    <div className={`product-list ${theme}`}>\n      <h2>Products</h2>\n      <div className=\"products-grid\">\n        {products.map(product => (\n          <div key={product.id} className=\"product-card\">\n            <h3>{product.name}</h3>\n            <p>${product.price}</p>\n            <button onClick={() => addItem(product)}>\n              Add to Cart\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Cart Component\nconst Cart = () => {\n  const { state, removeItem, updateQuantity, clearCart } = useCart();\n  const { theme } = useTheme();\n  \n  if (state.items.length === 0) {\n    return (\n      <div className={`cart ${theme}`}>\n        <h2>Shopping Cart</h2>\n        <p>Your cart is empty</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className={`cart ${theme}`}>\n      <h2>Shopping Cart</h2>\n      \n      {state.items.map(item => (\n        <div key={item.id} className=\"cart-item\">\n          <span>{item.name}</span>\n          <span>${item.price}</span>\n          <div className=\"quantity-controls\">\n            <button onClick={() => updateQuantity(item.id, item.quantity - 1)}>\n              -\n            </button>\n            <span>{item.quantity}</span>\n            <button onClick={() => updateQuantity(item.id, item.quantity + 1)}>\n              +\n            </button>\n          </div>\n          <span>${(item.price * item.quantity).toFixed(2)}</span>\n          <button onClick={() => removeItem(item.id)}>Remove</button>\n        </div>\n      ))}\n      \n      <div className=\"cart-total\">\n        <strong>Total: ${state.total.toFixed(2)}</strong>\n      </div>\n      \n      <div className=\"cart-actions\">\n        <button onClick={clearCart}>Clear Cart</button>\n        <button className=\"checkout-btn\">Checkout</button>\n      </div>\n    </div>\n  );\n};\n\n// Main App Component\nconst AppContent = () => {\n  const { user } = useAuth();\n  const { theme } = useTheme();\n  \n  return (\n    <div className={`app ${theme}`}>\n      <Header />\n      \n      <main className=\"main-content\">\n        {!user ? (\n          <LoginForm />\n        ) : (\n          <>\n            <ProductList />\n            <Cart />\n          </>\n        )}\n      </main>\n    </div>\n  );\n};\n\n// App with all providers\nconst App = () => {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <CartProvider>\n          <AppContent />\n        </CartProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;",
    "tip": "ប្រើ Context API សម្រាប់ global state ប៉ុន្តែកុំប្រើច្រើនពេក ព្រោះវាអាចធ្វើឱ្យ performance ធ្លាក់ចុះ"
  },
  {
    "id": 11,
    "category": "React",
    "path": "/react/useReducer",
    "title": "មេរៀនទី១១: useReducer Hook",
    "explanation": "useReducer hook គឺជាជម្រើសមួយសម្រាប់ useState នៅពេលដែលយើងមាន complex state logic។ វាស្រដៀងនឹង Redux pattern និងមានប្រយោជន៍សម្រាប់ state management ដែលស្មុគស្មាញ។",
    "code": "import React, { useReducer, useState, useEffect } from 'react';\n\n// 1. Simple Counter with useReducer\ninterface CounterState {\n  count: number;\n  step: number;\n}\n\ntype CounterAction =\n  | { type: 'INCREMENT' }\n  | { type: 'DECREMENT' }\n  | { type: 'RESET' }\n  | { type: 'SET_STEP'; payload: number }\n  | { type: 'SET_COUNT'; payload: number };\n\nconst counterReducer = (state: CounterState, action: CounterAction): CounterState => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + state.step };\n    case 'DECREMENT':\n      return { ...state, count: state.count - state.step };\n    case 'RESET':\n      return { ...state, count: 0 };\n    case 'SET_STEP':\n      return { ...state, step: action.payload };\n    case 'SET_COUNT':\n      return { ...state, count: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst Counter = () => {\n  const [state, dispatch] = useReducer(counterReducer, { count: 0, step: 1 });\n  \n  return (\n    <div className=\"counter\">\n      <h2>Counter with useReducer</h2>\n      <p>Count: {state.count}</p>\n      <p>Step: {state.step}</p>\n      \n      <div className=\"controls\">\n        <button onClick={() => dispatch({ type: 'INCREMENT' })}>\n          +{state.step}\n        </button>\n        <button onClick={() => dispatch({ type: 'DECREMENT' })}>\n          -{state.step}\n        </button>\n        <button onClick={() => dispatch({ type: 'RESET' })}>\n          Reset\n        </button>\n      </div>\n      \n      <div className=\"step-control\">\n        <label>Step: </label>\n        <input\n          type=\"number\"\n          value={state.step}\n          onChange={(e) => dispatch({ \n            type: 'SET_STEP', \n            payload: parseInt(e.target.value) || 1 \n          })}\n          min=\"1\"\n        />\n      </div>\n    </div>\n  );\n};\n\n// 2. Todo List with Complex State\ninterface Todo {\n  id: number;\n  text: string;\n  completed: boolean;\n  priority: 'low' | 'medium' | 'high';\n  createdAt: Date;\n}\n\ninterface TodoState {\n  todos: Todo[];\n  filter: 'all' | 'active' | 'completed';\n  sortBy: 'date' | 'priority' | 'alphabetical';\n}\n\ntype TodoAction =\n  | { type: 'ADD_TODO'; payload: { text: string; priority: Todo['priority'] } }\n  | { type: 'TOGGLE_TODO'; payload: number }\n  | { type: 'DELETE_TODO'; payload: number }\n  | { type: 'EDIT_TODO'; payload: { id: number; text: string } }\n  | { type: 'SET_FILTER'; payload: TodoState['filter'] }\n  | { type: 'SET_SORT'; payload: TodoState['sortBy'] }\n  | { type: 'CLEAR_COMPLETED' }\n  | { type: 'TOGGLE_ALL' };\n\nconst todoReducer = (state: TodoState, action: TodoAction): TodoState => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            id: Date.now(),\n            text: action.payload.text,\n            completed: false,\n            priority: action.payload.priority,\n            createdAt: new Date()\n          }\n        ]\n      };\n    \n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map(todo =>\n          todo.id === action.payload\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        )\n      };\n    \n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload)\n      };\n    \n    case 'EDIT_TODO':\n      return {\n        ...state,\n        todos: state.todos.map(todo =>\n          todo.id === action.payload.id\n            ? { ...todo, text: action.payload.text }\n            : todo\n        )\n      };\n    \n    case 'SET_FILTER':\n      return { ...state, filter: action.payload };\n    \n    case 'SET_SORT':\n      return { ...state, sortBy: action.payload };\n    \n    case 'CLEAR_COMPLETED':\n      return {\n        ...state,\n        todos: state.todos.filter(todo => !todo.completed)\n      };\n    \n    case 'TOGGLE_ALL':\n      const allCompleted = state.todos.every(todo => todo.completed);\n      return {\n        ...state,\n        todos: state.todos.map(todo => ({\n          ...todo,\n          completed: !allCompleted\n        }))\n      };\n    \n    default:\n      return state;\n  }\n};\n\nconst TodoApp = () => {\n  const [state, dispatch] = useReducer(todoReducer, {\n    todos: [],\n    filter: 'all',\n    sortBy: 'date'\n  });\n  \n  const [newTodo, setNewTodo] = useState('');\n  const [newPriority, setNewPriority] = useState<Todo['priority']>('medium');\n  const [editingId, setEditingId] = useState<number | null>(null);\n  const [editText, setEditText] = useState('');\n  \n  const addTodo = () => {\n    if (newTodo.trim()) {\n      dispatch({\n        type: 'ADD_TODO',\n        payload: { text: newTodo.trim(), priority: newPriority }\n      });\n      setNewTodo('');\n    }\n  };\n  \n  const startEditing = (todo: Todo) => {\n    setEditingId(todo.id);\n    setEditText(todo.text);\n  };\n  \n  const saveEdit = () => {\n    if (editingId && editText.trim()) {\n      dispatch({\n        type: 'EDIT_TODO',\n        payload: { id: editingId, text: editText.trim() }\n      });\n      setEditingId(null);\n      setEditText('');\n    }\n  };\n  \n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditText('');\n  };\n  \n  // Filter and sort todos\n  const filteredTodos = state.todos.filter(todo => {\n    switch (state.filter) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n  \n  const sortedTodos = [...filteredTodos].sort((a, b) => {\n    switch (state.sortBy) {\n      case 'priority':\n        const priorityOrder = { high: 3, medium: 2, low: 1 };\n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n      case 'alphabetical':\n        return a.text.localeCompare(b.text);\n      case 'date':\n      default:\n        return b.createdAt.getTime() - a.createdAt.getTime();\n    }\n  });\n  \n  const stats = {\n    total: state.todos.length,\n    active: state.todos.filter(todo => !todo.completed).length,\n    completed: state.todos.filter(todo => todo.completed).length\n  };\n  \n  return (\n    <div className=\"todo-app\">\n      <h2>Advanced Todo List</h2>\n      \n      {/* Add Todo Form */}\n      <div className=\"add-todo\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add a new todo...\"\n          onKeyPress={(e) => e.key === 'Enter' && addTodo()}\n        />\n        <select\n          value={newPriority}\n          onChange={(e) => setNewPriority(e.target.value as Todo['priority'])}\n        >\n          <option value=\"low\">Low</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"high\">High</option>\n        </select>\n        <button onClick={addTodo}>Add</button>\n      </div>\n      \n      {/* Stats */}\n      <div className=\"stats\">\n        <span>Total: {stats.total}</span>\n        <span>Active: {stats.active}</span>\n        <span>Completed: {stats.completed}</span>\n      </div>\n      \n      {/* Controls */}\n      <div className=\"controls\">\n        <div className=\"filters\">\n          <button\n            className={state.filter === 'all' ? 'active' : ''}\n            onClick={() => dispatch({ type: 'SET_FILTER', payload: 'all' })}\n          >\n            All\n          </button>\n          <button\n            className={state.filter === 'active' ? 'active' : ''}\n            onClick={() => dispatch({ type: 'SET_FILTER', payload: 'active' })}\n          >\n            Active\n          </button>\n          <button\n            className={state.filter === 'completed' ? 'active' : ''}\n            onClick={() => dispatch({ type: 'SET_FILTER', payload: 'completed' })}\n          >\n            Completed\n          </button>\n        </div>\n        \n        <div className=\"sort\">\n          <label>Sort by: </label>\n          <select\n            value={state.sortBy}\n            onChange={(e) => dispatch({ \n              type: 'SET_SORT', \n              payload: e.target.value as TodoState['sortBy'] \n            })}\n          >\n            <option value=\"date\">Date</option>\n            <option value=\"priority\">Priority</option>\n            <option value=\"alphabetical\">Alphabetical</option>\n          </select>\n        </div>\n        \n        <div className=\"actions\">\n          <button onClick={() => dispatch({ type: 'TOGGLE_ALL' })}>\n            Toggle All\n          </button>\n          <button onClick={() => dispatch({ type: 'CLEAR_COMPLETED' })}>\n            Clear Completed\n          </button>\n        </div>\n      </div>\n      \n      {/* Todo List */}\n      <div className=\"todo-list\">\n        {sortedTodos.length === 0 ? (\n          <p>No todos found</p>\n        ) : (\n          sortedTodos.map(todo => (\n            <div\n              key={todo.id}\n              className={`todo-item ${todo.completed ? 'completed' : ''} priority-${todo.priority}`}\n            >\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => dispatch({ type: 'TOGGLE_TODO', payload: todo.id })}\n              />\n              \n              {editingId === todo.id ? (\n                <div className=\"edit-mode\">\n                  <input\n                    type=\"text\"\n                    value={editText}\n                    onChange={(e) => setEditText(e.target.value)}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') saveEdit();\n                      if (e.key === 'Escape') cancelEdit();\n                    }}\n                    autoFocus\n                  />\n                  <button onClick={saveEdit}>Save</button>\n                  <button onClick={cancelEdit}>Cancel</button>\n                </div>\n              ) : (\n                <div className=\"view-mode\">\n                  <span className=\"todo-text\">{todo.text}</span>\n                  <span className={`priority priority-${todo.priority}`}>\n                    {todo.priority}\n                  </span>\n                  <span className=\"date\">\n                    {todo.createdAt.toLocaleDateString()}\n                  </span>\n                  <div className=\"todo-actions\">\n                    <button onClick={() => startEditing(todo)}>Edit</button>\n                    <button onClick={() => dispatch({ type: 'DELETE_TODO', payload: todo.id })}>\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\n// 3. Form with Complex Validation\ninterface FormState {\n  values: {\n    name: string;\n    email: string;\n    password: string;\n    confirmPassword: string;\n    age: string;\n    terms: boolean;\n  };\n  errors: Record<string, string>;\n  touched: Record<string, boolean>;\n  isSubmitting: boolean;\n}\n\ntype FormAction =\n  | { type: 'SET_FIELD'; payload: { field: string; value: any } }\n  | { type: 'SET_ERROR'; payload: { field: string; error: string } }\n  | { type: 'SET_TOUCHED'; payload: string }\n  | { type: 'SET_SUBMITTING'; payload: boolean }\n  | { type: 'RESET_FORM' };\n\nconst formReducer = (state: FormState, action: FormAction): FormState => {\n  switch (action.type) {\n    case 'SET_FIELD':\n      return {\n        ...state,\n        values: {\n          ...state.values,\n          [action.payload.field]: action.payload.value\n        }\n      };\n    \n    case 'SET_ERROR':\n      return {\n        ...state,\n        errors: {\n          ...state.errors,\n          [action.payload.field]: action.payload.error\n        }\n      };\n    \n    case 'SET_TOUCHED':\n      return {\n        ...state,\n        touched: {\n          ...state.touched,\n          [action.payload]: true\n        }\n      };\n    \n    case 'SET_SUBMITTING':\n      return {\n        ...state,\n        isSubmitting: action.payload\n      };\n    \n    case 'RESET_FORM':\n      return {\n        values: {\n          name: '',\n          email: '',\n          password: '',\n          confirmPassword: '',\n          age: '',\n          terms: false\n        },\n        errors: {},\n        touched: {},\n        isSubmitting: false\n      };\n    \n    default:\n      return state;\n  }\n};\n\nconst RegistrationForm = () => {\n  const [state, dispatch] = useReducer(formReducer, {\n    values: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      age: '',\n      terms: false\n    },\n    errors: {},\n    touched: {},\n    isSubmitting: false\n  });\n  \n  const validateField = (field: string, value: any) => {\n    let error = '';\n    \n    switch (field) {\n      case 'name':\n        if (!value.trim()) error = 'Name is required';\n        else if (value.length < 2) error = 'Name must be at least 2 characters';\n        break;\n      \n      case 'email':\n        if (!value) error = 'Email is required';\n        else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) error = 'Invalid email format';\n        break;\n      \n      case 'password':\n        if (!value) error = 'Password is required';\n        else if (value.length < 6) error = 'Password must be at least 6 characters';\n        break;\n      \n      case 'confirmPassword':\n        if (!value) error = 'Please confirm your password';\n        else if (value !== state.values.password) error = 'Passwords do not match';\n        break;\n      \n      case 'age':\n        if (!value) error = 'Age is required';\n        else if (isNaN(value) || value < 18) error = 'Must be at least 18 years old';\n        break;\n      \n      case 'terms':\n        if (!value) error = 'You must accept the terms';\n        break;\n    }\n    \n    dispatch({ type: 'SET_ERROR', payload: { field, error } });\n  };\n  \n  const handleFieldChange = (field: string, value: any) => {\n    dispatch({ type: 'SET_FIELD', payload: { field, value } });\n    if (state.touched[field]) {\n      validateField(field, value);\n    }\n  };\n  \n  const handleBlur = (field: string) => {\n    dispatch({ type: 'SET_TOUCHED', payload: field });\n    validateField(field, state.values[field as keyof typeof state.values]);\n  };\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate all fields\n    Object.keys(state.values).forEach(field => {\n      validateField(field, state.values[field as keyof typeof state.values]);\n    });\n    \n    // Check if there are any errors\n    const hasErrors = Object.values(state.errors).some(error => error !== '');\n    if (hasErrors) return;\n    \n    dispatch({ type: 'SET_SUBMITTING', payload: true });\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      alert('Registration successful!');\n      dispatch({ type: 'RESET_FORM' });\n    } catch (error) {\n      alert('Registration failed!');\n    } finally {\n      dispatch({ type: 'SET_SUBMITTING', payload: false });\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"registration-form\">\n      <h2>Registration Form</h2>\n      \n      <div className=\"form-group\">\n        <label>Name:</label>\n        <input\n          type=\"text\"\n          value={state.values.name}\n          onChange={(e) => handleFieldChange('name', e.target.value)}\n          onBlur={() => handleBlur('name')}\n          className={state.errors.name ? 'error' : ''}\n        />\n        {state.errors.name && <span className=\"error-message\">{state.errors.name}</span>}\n      </div>\n      \n      <div className=\"form-group\">\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          value={state.values.email}\n          onChange={(e) => handleFieldChange('email', e.target.value)}\n          onBlur={() => handleBlur('email')}\n          className={state.errors.email ? 'error' : ''}\n        />\n        {state.errors.email && <span className=\"error-message\">{state.errors.email}</span>}\n      </div>\n      \n      <div className=\"form-group\">\n        <label>Password:</label>\n        <input\n          type=\"password\"\n          value={state.values.password}\n          onChange={(e) => handleFieldChange('password', e.target.value)}\n          onBlur={() => handleBlur('password')}\n          className={state.errors.password ? 'error' : ''}\n        />\n        {state.errors.password && <span className=\"error-message\">{state.errors.password}</span>}\n      </div>\n      \n      <div className=\"form-group\">\n        <label>Confirm Password:</label>\n        <input\n          type=\"password\"\n          value={state.values.confirmPassword}\n          onChange={(e) => handleFieldChange('confirmPassword', e.target.value)}\n          onBlur={() => handleBlur('confirmPassword')}\n          className={state.errors.confirmPassword ? 'error' : ''}\n        />\n        {state.errors.confirmPassword && <span className=\"error-message\">{state.errors.confirmPassword}</span>}\n      </div>\n      \n      <div className=\"form-group\">\n        <label>Age:</label>\n        <input\n          type=\"number\"\n          value={state.values.age}\n          onChange={(e) => handleFieldChange('age', e.target.value)}\n          onBlur={() => handleBlur('age')}\n          className={state.errors.age ? 'error' : ''}\n        />\n        {state.errors.age && <span className=\"error-message\">{state.errors.age}</span>}\n      </div>\n      \n      <div className=\"form-group\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={state.values.terms}\n            onChange={(e) => handleFieldChange('terms', e.target.checked)}\n            onBlur={() => handleBlur('terms')}\n          />\n          I accept the terms and conditions\n        </label>\n        {state.errors.terms && <span className=\"error-message\">{state.errors.terms}</span>}\n      </div>\n      \n      <button type=\"submit\" disabled={state.isSubmitting}>\n        {state.isSubmitting ? 'Registering...' : 'Register'}\n      </button>\n    </form>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>useReducer Hook Examples</h1>\n      <Counter />\n      <TodoApp />\n      <RegistrationForm />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "ប្រើ useReducer នៅពេលដែលមាន complex state logic ឬ state transitions ច្រើន"
  },
  {
    "id": 12,
    "category": "React",
    "path": "/react/refs",
    "title": "មេរៀនទី១២: Refs and useRef",
    "explanation": "Refs អនុញ្ញាតឱ្យយើងចូលដំណើរការ DOM elements ដោយផ្ទាល់ ឬរក្សាទុក mutable values ដែលមិនបណ្តាលឱ្យ re-render។ useRef hook គឺជាវិធីសាស្រ្តសម្រាប់ប្រើ refs នៅក្នុង functional components។",
    "code": "import React, { useRef, useState, useEffect, forwardRef, useImperativeHandle } from 'react';\n\n// 1. Basic useRef for DOM manipulation\nconst BasicRefExample = () => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [inputValue, setInputValue] = useState('');\n  \n  const focusInput = () => {\n    inputRef.current?.focus();\n  };\n  \n  const clearInput = () => {\n    if (inputRef.current) {\n      inputRef.current.value = '';\n      setInputValue('');\n      inputRef.current.focus();\n    }\n  };\n  \n  const selectAllText = () => {\n    inputRef.current?.select();\n  };\n  \n  return (\n    <div className=\"basic-ref-example\">\n      <h2>Basic useRef Example</h2>\n      \n      <div className=\"input-group\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          placeholder=\"Type something...\"\n        />\n        <div className=\"button-group\">\n          <button onClick={focusInput}>Focus Input</button>\n          <button onClick={clearInput}>Clear Input</button>\n          <button onClick={selectAllText}>Select All</button>\n        </div>\n      </div>\n      \n      <p>Current value: {inputValue}</p>\n    </div>\n  );\n};\n\n// 2. File Upload with Ref\nconst FileUploadExample = () => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\n  const [isUploading, setIsUploading] = useState(false);\n  \n  const triggerFileSelect = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedFiles(e.target.files);\n  };\n  \n  const simulateUpload = async () => {\n    if (!selectedFiles) return;\n    \n    setIsUploading(true);\n    setUploadProgress(0);\n    \n    // Simulate upload progress\n    for (let i = 0; i <= 100; i += 10) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      setUploadProgress(i);\n    }\n    \n    setIsUploading(false);\n    alert('Upload completed!');\n  };\n  \n  const clearSelection = () => {\n    setSelectedFiles(null);\n    setUploadProgress(0);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  \n  return (\n    <div className=\"file-upload-example\">\n      <h2>File Upload with Ref</h2>\n      \n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        onChange={handleFileSelect}\n        style={{ display: 'none' }}\n        accept=\"image/*,.pdf,.doc,.docx\"\n      />\n      \n      <div className=\"upload-area\">\n        <button onClick={triggerFileSelect} className=\"select-files-btn\">\n          Select Files\n        </button>\n        \n        {selectedFiles && (\n          <div className=\"selected-files\">\n            <h3>Selected Files:</h3>\n            {Array.from(selectedFiles).map((file, index) => (\n              <div key={index} className=\"file-info\">\n                <span>{file.name}</span>\n                <span>({(file.size / 1024).toFixed(2)} KB)</span>\n              </div>\n            ))}\n            \n            <div className=\"upload-controls\">\n              <button \n                onClick={simulateUpload} \n                disabled={isUploading}\n                className=\"upload-btn\"\n              >\n                {isUploading ? 'Uploading...' : 'Upload Files'}\n              </button>\n              <button onClick={clearSelection} disabled={isUploading}>\n                Clear Selection\n              </button>\n            </div>\n            \n            {isUploading && (\n              <div className=\"progress-bar\">\n                <div \n                  className=\"progress-fill\" \n                  style={{ width: `${uploadProgress}%` }}\n                ></div>\n                <span className=\"progress-text\">{uploadProgress}%</span>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// 3. Scroll to Element\nconst ScrollExample = () => {\n  const topRef = useRef<HTMLDivElement>(null);\n  const middleRef = useRef<HTMLDivElement>(null);\n  const bottomRef = useRef<HTMLDivElement>(null);\n  \n  const scrollToElement = (ref: React.RefObject<HTMLDivElement>) => {\n    ref.current?.scrollIntoView({ \n      behavior: 'smooth',\n      block: 'center'\n    });\n  };\n  \n  return (\n    <div className=\"scroll-example\">\n      <h2>Scroll to Element</h2>\n      \n      <div className=\"navigation\">\n        <button onClick={() => scrollToElement(topRef)}>Go to Top</button>\n        <button onClick={() => scrollToElement(middleRef)}>Go to Middle</button>\n        <button onClick={() => scrollToElement(bottomRef)}>Go to Bottom</button>\n      </div>\n      \n      <div ref={topRef} className=\"section section-top\">\n        <h3>Top Section</h3>\n        <p>This is the top section of the page.</p>\n        {Array.from({ length: 10 }, (_, i) => (\n          <p key={i}>Top section content line {i + 1}</p>\n        ))}\n      </div>\n      \n      <div ref={middleRef} className=\"section section-middle\">\n        <h3>Middle Section</h3>\n        <p>This is the middle section of the page.</p>\n        {Array.from({ length: 10 }, (_, i) => (\n          <p key={i}>Middle section content line {i + 1}</p>\n        ))}\n      </div>\n      \n      <div ref={bottomRef} className=\"section section-bottom\">\n        <h3>Bottom Section</h3>\n        <p>This is the bottom section of the page.</p>\n        {Array.from({ length: 10 }, (_, i) => (\n          <p key={i}>Bottom section content line {i + 1}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// 4. Timer with useRef for mutable values\nconst TimerExample = () => {\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const startTimeRef = useRef<number>(0);\n  \n  const startTimer = () => {\n    if (!isRunning) {\n      setIsRunning(true);\n      startTimeRef.current = Date.now() - time;\n      \n      intervalRef.current = setInterval(() => {\n        setTime(Date.now() - startTimeRef.current);\n      }, 10);\n    }\n  };\n  \n  const stopTimer = () => {\n    if (isRunning && intervalRef.current) {\n      setIsRunning(false);\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n  \n  const resetTimer = () => {\n    setTime(0);\n    setIsRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n  \n  const formatTime = (milliseconds: number) => {\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    const ms = Math.floor((milliseconds % 1000) / 10);\n    \n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${ms.toString().padStart(2, '0')}`;\n  };\n  \n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  \n  return (\n    <div className=\"timer-example\">\n      <h2>Stopwatch Timer</h2>\n      \n      <div className=\"timer-display\">\n        <h1>{formatTime(time)}</h1>\n      </div>\n      \n      <div className=\"timer-controls\">\n        <button \n          onClick={startTimer} \n          disabled={isRunning}\n          className=\"start-btn\"\n        >\n          Start\n        </button>\n        <button \n          onClick={stopTimer} \n          disabled={!isRunning}\n          className=\"stop-btn\"\n        >\n          Stop\n        </button>\n        <button onClick={resetTimer} className=\"reset-btn\">\n          Reset\n        </button>\n      </div>\n      \n      <p>Status: {isRunning ? 'Running' : 'Stopped'}</p>\n    </div>\n  );\n};\n\n// 5. Forward Ref Example\ninterface CustomInputProps {\n  label: string;\n  placeholder?: string;\n  value: string;\n  onChange: (value: string) => void;\n}\n\ninterface CustomInputRef {\n  focus: () => void;\n  clear: () => void;\n  getValue: () => string;\n}\n\nconst CustomInput = forwardRef<CustomInputRef, CustomInputProps>(\n  ({ label, placeholder, value, onChange }, ref) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    \n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef.current?.focus();\n      },\n      clear: () => {\n        onChange('');\n        inputRef.current?.focus();\n      },\n      getValue: () => {\n        return value;\n      }\n    }));\n    \n    return (\n      <div className=\"custom-input\">\n        <label>{label}</label>\n        <input\n          ref={inputRef}\n          type=\"text\"\n          placeholder={placeholder}\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n        />\n      </div>\n    );\n  }\n);\n\nconst ForwardRefExample = () => {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  \n  const firstNameRef = useRef<CustomInputRef>(null);\n  const lastNameRef = useRef<CustomInputRef>(null);\n  const emailRef = useRef<CustomInputRef>(null);\n  \n  const focusFirstName = () => firstNameRef.current?.focus();\n  const focusLastName = () => lastNameRef.current?.focus();\n  const focusEmail = () => emailRef.current?.focus();\n  \n  const clearAll = () => {\n    firstNameRef.current?.clear();\n    lastNameRef.current?.clear();\n    emailRef.current?.clear();\n  };\n  \n  const getFormData = () => {\n    const data = {\n      firstName: firstNameRef.current?.getValue() || '',\n      lastName: lastNameRef.current?.getValue() || '',\n      email: emailRef.current?.getValue() || ''\n    };\n    alert(JSON.stringify(data, null, 2));\n  };\n  \n  return (\n    <div className=\"forward-ref-example\">\n      <h2>Forward Ref Example</h2>\n      \n      <div className=\"form\">\n        <CustomInput\n          ref={firstNameRef}\n          label=\"First Name:\"\n          placeholder=\"Enter first name\"\n          value={firstName}\n          onChange={setFirstName}\n        />\n        \n        <CustomInput\n          ref={lastNameRef}\n          label=\"Last Name:\"\n          placeholder=\"Enter last name\"\n          value={lastName}\n          onChange={setLastName}\n        />\n        \n        <CustomInput\n          ref={emailRef}\n          label=\"Email:\"\n          placeholder=\"Enter email\"\n          value={email}\n          onChange={setEmail}\n        />\n        \n        <div className=\"form-controls\">\n          <button onClick={focusFirstName}>Focus First Name</button>\n          <button onClick={focusLastName}>Focus Last Name</button>\n          <button onClick={focusEmail}>Focus Email</button>\n          <button onClick={clearAll}>Clear All</button>\n          <button onClick={getFormData}>Get Form Data</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 6. Canvas Drawing with Ref\nconst CanvasExample = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [color, setColor] = useState('#000000');\n  const [brushSize, setBrushSize] = useState(5);\n  \n  const startDrawing = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    setIsDrawing(true);\n    draw(e);\n  };\n  \n  const draw = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing || !canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    \n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    ctx.lineWidth = brushSize;\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = color;\n    \n    ctx.lineTo(x, y);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n  };\n  \n  const stopDrawing = () => {\n    if (!isDrawing || !canvasRef.current) return;\n    \n    setIsDrawing(false);\n    const ctx = canvasRef.current.getContext('2d');\n    ctx?.beginPath();\n  };\n  \n  const clearCanvas = () => {\n    if (!canvasRef.current) return;\n    \n    const ctx = canvasRef.current.getContext('2d');\n    if (ctx) {\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    }\n  };\n  \n  const downloadCanvas = () => {\n    if (!canvasRef.current) return;\n    \n    const link = document.createElement('a');\n    link.download = 'drawing.png';\n    link.href = canvasRef.current.toDataURL();\n    link.click();\n  };\n  \n  return (\n    <div className=\"canvas-example\">\n      <h2>Canvas Drawing</h2>\n      \n      <div className=\"canvas-controls\">\n        <div className=\"control-group\">\n          <label>Color: </label>\n          <input\n            type=\"color\"\n            value={color}\n            onChange={(e) => setColor(e.target.value)}\n          />\n        </div>\n        \n        <div className=\"control-group\">\n          <label>Brush Size: </label>\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"20\"\n            value={brushSize}\n            onChange={(e) => setBrushSize(Number(e.target.value))}\n          />\n          <span>{brushSize}px</span>\n        </div>\n        \n        <div className=\"control-group\">\n          <button onClick={clearCanvas}>Clear Canvas</button>\n          <button onClick={downloadCanvas}>Download</button>\n        </div>\n      </div>\n      \n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={400}\n        className=\"drawing-canvas\"\n        onMouseDown={startDrawing}\n        onMouseMove={draw}\n        onMouseUp={stopDrawing}\n        onMouseLeave={stopDrawing}\n      />\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Refs and useRef Examples</h1>\n      <BasicRefExample />\n      <FileUploadExample />\n      <ScrollExample />\n      <TimerExample />\n      <ForwardRefExample />\n      <CanvasExample />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "ប្រើ useRef សម្រាប់ DOM manipulation និងរក្សាទុក mutable values ដែលមិនត្រូវការ re-render"
  },
  {
    "id": 13,
    "category": "React",
    "path": "/react/memo-optimization",
    "title": "មេរៀនទី១៣: React.memo and Performance Optimization",
    "explanation": "React.memo, useMemo, និង useCallback គឺជា optimization techniques ដើម្បីកាត់បន្ថយ unnecessary re-renders និងធ្វើឱ្យ React applications រត់កាន់តែលឿន។",
    "code": "import React, { useState, useMemo, useCallback, memo } from 'react';\n\n// 1. React.memo Example\ninterface UserCardProps {\n  user: {\n    id: number;\n    name: string;\n    email: string;\n    avatar: string;\n  };\n  onEdit: (id: number) => void;\n  onDelete: (id: number) => void;\n}\n\n// Without memo - will re-render every time parent re-renders\nconst UserCardWithoutMemo: React.FC<UserCardProps> = ({ user, onEdit, onDelete }) => {\n  console.log(`UserCard ${user.id} rendered without memo`);\n  \n  return (\n    <div className=\"user-card\">\n      <img src={user.avatar} alt={user.name} />\n      <h3>{user.name}</h3>\n      <p>{user.email}</p>\n      <div className=\"actions\">\n        <button onClick={() => onEdit(user.id)}>Edit</button>\n        <button onClick={() => onDelete(user.id)}>Delete</button>\n      </div>\n    </div>\n  );\n};\n\n// With memo - will only re-render if props change\nconst UserCardWithMemo = memo<UserCardProps>(({ user, onEdit, onDelete }) => {\n  console.log(`UserCard ${user.id} rendered with memo`);\n  \n  return (\n    <div className=\"user-card\">\n      <img src={user.avatar} alt={user.name} />\n      <h3>{user.name}</h3>\n      <p>{user.email}</p>\n      <div className=\"actions\">\n        <button onClick={() => onEdit(user.id)}>Edit</button>\n        <button onClick={() => onDelete(user.id)}>Delete</button>\n      </div>\n    </div>\n  );\n});\n\n// Custom comparison function for memo\nconst UserCardWithCustomMemo = memo<UserCardProps>(\n  ({ user, onEdit, onDelete }) => {\n    console.log(`UserCard ${user.id} rendered with custom memo`);\n    \n    return (\n      <div className=\"user-card\">\n        <img src={user.avatar} alt={user.name} />\n        <h3>{user.name}</h3>\n        <p>{user.email}</p>\n        <div className=\"actions\">\n          <button onClick={() => onEdit(user.id)}>Edit</button>\n          <button onClick={() => onDelete(user.id)}>Delete</button>\n        </div>\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    // Custom comparison - only re-render if user data changes\n    return (\n      prevProps.user.id === nextProps.user.id &&\n      prevProps.user.name === nextProps.user.name &&\n      prevProps.user.email === nextProps.user.email &&\n      prevProps.user.avatar === nextProps.user.avatar\n    );\n  }\n);\n\n// 2. useMemo Example\nconst ExpensiveCalculationExample = () => {\n  const [count, setCount] = useState(0);\n  const [items, setItems] = useState<number[]>([]);\n  const [filter, setFilter] = useState('');\n  \n  // Expensive calculation without useMemo\n  const expensiveCalculationWithoutMemo = () => {\n    console.log('Expensive calculation running without memo');\n    let result = 0;\n    for (let i = 0; i < 1000000; i++) {\n      result += i;\n    }\n    return result;\n  };\n  \n  // Expensive calculation with useMemo\n  const expensiveCalculationWithMemo = useMemo(() => {\n    console.log('Expensive calculation running with memo');\n    let result = 0;\n    for (let i = 0; i < 1000000; i++) {\n      result += i;\n    }\n    return result;\n  }, [count]); // Only recalculate when count changes\n  \n  // Filtered items with useMemo\n  const filteredItems = useMemo(() => {\n    console.log('Filtering items');\n    return items.filter(item => \n      item.toString().includes(filter)\n    );\n  }, [items, filter]);\n  \n  // Sorted items with useMemo\n  const sortedItems = useMemo(() => {\n    console.log('Sorting items');\n    return [...filteredItems].sort((a, b) => b - a);\n  }, [filteredItems]);\n  \n  const addRandomItem = () => {\n    setItems(prev => [...prev, Math.floor(Math.random() * 1000)]);\n  };\n  \n  const clearItems = () => {\n    setItems([]);\n  };\n  \n  return (\n    <div className=\"expensive-calculation-example\">\n      <h2>useMemo Example</h2>\n      \n      <div className=\"controls\">\n        <button onClick={() => setCount(count + 1)}>\n          Count: {count}\n        </button>\n        <button onClick={addRandomItem}>Add Random Item</button>\n        <button onClick={clearItems}>Clear Items</button>\n      </div>\n      \n      <div className=\"filter\">\n        <input\n          type=\"text\"\n          placeholder=\"Filter items...\"\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n        />\n      </div>\n      \n      <div className=\"results\">\n        <p>Expensive calculation result (with memo): {expensiveCalculationWithMemo}</p>\n        <p>Expensive calculation result (without memo): {expensiveCalculationWithoutMemo()}</p>\n        \n        <div className=\"items\">\n          <h3>Filtered & Sorted Items ({sortedItems.length}):</h3>\n          <div className=\"item-list\">\n            {sortedItems.slice(0, 10).map((item, index) => (\n              <span key={index} className=\"item\">{item}</span>\n            ))}\n            {sortedItems.length > 10 && <span>... and {sortedItems.length - 10} more</span>}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 3. useCallback Example\nconst CallbackExample = () => {\n  const [count, setCount] = useState(0);\n  const [users, setUsers] = useState([\n    { id: 1, name: 'John Doe', email: 'john@example.com', avatar: 'https://via.placeholder.com/50' },\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com', avatar: 'https://via.placeholder.com/50' },\n    { id: 3, name: 'Bob Johnson', email: 'bob@example.com', avatar: 'https://via.placeholder.com/50' }\n  ]);\n  \n  // Without useCallback - new function created on every render\n  const handleEditWithoutCallback = (id: number) => {\n    console.log(`Edit user ${id} - function created without callback`);\n    // Edit logic here\n  };\n  \n  const handleDeleteWithoutCallback = (id: number) => {\n    console.log(`Delete user ${id} - function created without callback`);\n    setUsers(users.filter(user => user.id !== id));\n  };\n  \n  // With useCallback - function only recreated when dependencies change\n  const handleEditWithCallback = useCallback((id: number) => {\n    console.log(`Edit user ${id} - function created with callback`);\n    // Edit logic here\n  }, []); // No dependencies, so function never changes\n  \n  const handleDeleteWithCallback = useCallback((id: number) => {\n    console.log(`Delete user ${id} - function created with callback`);\n    setUsers(prev => prev.filter(user => user.id !== id));\n  }, []); // Using functional update, so no dependency on users\n  \n  // Complex callback with dependencies\n  const handleComplexAction = useCallback((id: number) => {\n    console.log(`Complex action for user ${id}, count is ${count}`);\n    // Some complex logic that depends on count\n  }, [count]); // Recreated only when count changes\n  \n  return (\n    <div className=\"callback-example\">\n      <h2>useCallback Example</h2>\n      \n      <div className=\"controls\">\n        <button onClick={() => setCount(count + 1)}>\n          Count: {count} (Click to trigger re-render)\n        </button>\n      </div>\n      \n      <div className=\"user-sections\">\n        <div className=\"section\">\n          <h3>Without useCallback (Check console for re-renders)</h3>\n          {users.map(user => (\n            <UserCardWithoutMemo\n              key={user.id}\n              user={user}\n              onEdit={handleEditWithoutCallback}\n              onDelete={handleDeleteWithoutCallback}\n            />\n          ))}\n        </div>\n        \n        <div className=\"section\">\n          <h3>With useCallback + memo (Optimized)</h3>\n          {users.map(user => (\n            <UserCardWithMemo\n              key={user.id}\n              user={user}\n              onEdit={handleEditWithCallback}\n              onDelete={handleDeleteWithCallback}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 4. Complex Optimization Example\ninterface Product {\n  id: number;\n  name: string;\n  price: number;\n  category: string;\n  rating: number;\n  inStock: boolean;\n}\n\ninterface ProductListProps {\n  products: Product[];\n  onAddToCart: (product: Product) => void;\n  searchTerm: string;\n  sortBy: 'name' | 'price' | 'rating';\n  filterCategory: string;\n}\n\nconst ProductList = memo<ProductListProps>(({ \n  products, \n  onAddToCart, \n  searchTerm, \n  sortBy, \n  filterCategory \n}) => {\n  console.log('ProductList rendered');\n  \n  // Memoized filtered and sorted products\n  const processedProducts = useMemo(() => {\n    console.log('Processing products...');\n    \n    let filtered = products.filter(product => {\n      const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesCategory = filterCategory === 'all' || product.category === filterCategory;\n      return matchesSearch && matchesCategory;\n    });\n    \n    return filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'price':\n          return a.price - b.price;\n        case 'rating':\n          return b.rating - a.rating;\n        default:\n          return 0;\n      }\n    });\n  }, [products, searchTerm, sortBy, filterCategory]);\n  \n  // Memoized statistics\n  const statistics = useMemo(() => {\n    console.log('Calculating statistics...');\n    \n    return {\n      total: processedProducts.length,\n      inStock: processedProducts.filter(p => p.inStock).length,\n      averagePrice: processedProducts.reduce((sum, p) => sum + p.price, 0) / processedProducts.length || 0,\n      averageRating: processedProducts.reduce((sum, p) => sum + p.rating, 0) / processedProducts.length || 0\n    };\n  }, [processedProducts]);\n  \n  return (\n    <div className=\"product-list\">\n      <div className=\"statistics\">\n        <h3>Statistics</h3>\n        <p>Total Products: {statistics.total}</p>\n        <p>In Stock: {statistics.inStock}</p>\n        <p>Average Price: ${statistics.averagePrice.toFixed(2)}</p>\n        <p>Average Rating: {statistics.averageRating.toFixed(1)}/5</p>\n      </div>\n      \n      <div className=\"products\">\n        {processedProducts.map(product => (\n          <ProductCard\n            key={product.id}\n            product={product}\n            onAddToCart={onAddToCart}\n          />\n        ))}\n      </div>\n    </div>\n  );\n});\n\ninterface ProductCardProps {\n  product: Product;\n  onAddToCart: (product: Product) => void;\n}\n\nconst ProductCard = memo<ProductCardProps>(({ product, onAddToCart }) => {\n  console.log(`ProductCard ${product.id} rendered`);\n  \n  const handleAddToCart = useCallback(() => {\n    onAddToCart(product);\n  }, [product, onAddToCart]);\n  \n  return (\n    <div className={`product-card ${!product.inStock ? 'out-of-stock' : ''}`}>\n      <h4>{product.name}</h4>\n      <p>Category: {product.category}</p>\n      <p>Price: ${product.price}</p>\n      <p>Rating: {product.rating}/5</p>\n      <p>Status: {product.inStock ? 'In Stock' : 'Out of Stock'}</p>\n      <button \n        onClick={handleAddToCart} \n        disabled={!product.inStock}\n      >\n        Add to Cart\n      </button>\n    </div>\n  );\n});\n\nconst ShoppingApp = () => {\n  const [products] = useState<Product[]>([\n    { id: 1, name: 'Laptop', price: 999, category: 'Electronics', rating: 4.5, inStock: true },\n    { id: 2, name: 'Phone', price: 699, category: 'Electronics', rating: 4.2, inStock: false },\n    { id: 3, name: 'Book', price: 29, category: 'Education', rating: 4.8, inStock: true },\n    { id: 4, name: 'Headphones', price: 199, category: 'Electronics', rating: 4.0, inStock: true },\n    { id: 5, name: 'Notebook', price: 15, category: 'Education', rating: 4.3, inStock: false },\n    { id: 6, name: 'Tablet', price: 399, category: 'Electronics', rating: 4.1, inStock: true }\n  ]);\n  \n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState<'name' | 'price' | 'rating'>('name');\n  const [filterCategory, setFilterCategory] = useState('all');\n  const [cart, setCart] = useState<Product[]>([]);\n  const [renderCount, setRenderCount] = useState(0);\n  \n  // Memoized callback for adding to cart\n  const handleAddToCart = useCallback((product: Product) => {\n    setCart(prev => [...prev, product]);\n    console.log(`Added ${product.name} to cart`);\n  }, []);\n  \n  // Memoized categories\n  const categories = useMemo(() => {\n    const cats = ['all', ...new Set(products.map(p => p.category))];\n    return cats;\n  }, [products]);\n  \n  return (\n    <div className=\"shopping-app\">\n      <h2>Optimized Shopping App</h2>\n      \n      <div className=\"controls\">\n        <button onClick={() => setRenderCount(renderCount + 1)}>\n          Force Re-render ({renderCount})\n        </button>\n        \n        <input\n          type=\"text\"\n          placeholder=\"Search products...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n        \n        <select value={sortBy} onChange={(e) => setSortBy(e.target.value as any)}>\n          <option value=\"name\">Sort by Name</option>\n          <option value=\"price\">Sort by Price</option>\n          <option value=\"rating\">Sort by Rating</option>\n        </select>\n        \n        <select value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)}>\n          {categories.map(category => (\n            <option key={category} value={category}>\n              {category === 'all' ? 'All Categories' : category}\n            </option>\n          ))}\n        </select>\n      </div>\n      \n      <div className=\"cart-info\">\n        <h3>Cart ({cart.length} items)</h3>\n        <p>Total: ${cart.reduce((sum, item) => sum + item.price, 0).toFixed(2)}</p>\n      </div>\n      \n      <ProductList\n        products={products}\n        onAddToCart={handleAddToCart}\n        searchTerm={searchTerm}\n        sortBy={sortBy}\n        filterCategory={filterCategory}\n      />\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>React Performance Optimization</h1>\n      <ExpensiveCalculationExample />\n      <CallbackExample />\n      <ShoppingApp />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "ប្រើ React.memo សម្រាប់ components, useMemo សម្រាប់ expensive calculations, និង useCallback សម្រាប់ functions"
  },
  {
    "id": 14,
    "category": "React",
    "path": "/react/error-boundaries",
    "title": "មេរៀនទី១៤: Error Boundaries",
    "explanation": "Error Boundaries គឺជា React components ដែលចាប់ JavaScript errors នៅកន្លែងណាមួយនៅក្នុង component tree របស់វា និងបង្ហាញ fallback UI ជំនួសឱ្យ component tree ដែលបាន crash។",
    "code": "import React, { Component, ErrorInfo, ReactNode, useState } from 'react';\n\n// 1. Basic Error Boundary Class Component\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n}\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n}\n\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null\n    };\n  }\n  \n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    // Update state so the next render will show the fallback UI\n    return {\n      hasError: true,\n      error,\n      errorInfo: null\n    };\n  }\n  \n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log error to error reporting service\n    console.error('Error caught by boundary:', error, errorInfo);\n    \n    this.setState({\n      error,\n      errorInfo\n    });\n    \n    // Call optional error handler\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n  }\n  \n  render() {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n      \n      // Default error UI\n      return (\n        <div className=\"error-boundary\">\n          <h2>🚨 Something went wrong!</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            <summary>Error Details (Click to expand)</summary>\n            <p><strong>Error:</strong> {this.state.error?.toString()}</p>\n            <p><strong>Stack Trace:</strong></p>\n            <pre>{this.state.errorInfo?.componentStack}</pre>\n          </details>\n          <button onClick={() => window.location.reload()}>\n            Reload Page\n          </button>\n        </div>\n      );\n    }\n    \n    return this.props.children;\n  }\n}\n\n// 2. Advanced Error Boundary with Recovery\ninterface AdvancedErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorId: string | null;\n  retryCount: number;\n}\n\ninterface AdvancedErrorBoundaryProps {\n  children: ReactNode;\n  maxRetries?: number;\n  fallback?: (error: Error, retry: () => void, errorId: string) => ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo, errorId: string) => void;\n}\n\nclass AdvancedErrorBoundary extends Component<AdvancedErrorBoundaryProps, AdvancedErrorBoundaryState> {\n  private retryTimeoutId: NodeJS.Timeout | null = null;\n  \n  constructor(props: AdvancedErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorId: null,\n      retryCount: 0\n    };\n  }\n  \n  static getDerivedStateFromError(error: Error): Partial<AdvancedErrorBoundaryState> {\n    return {\n      hasError: true,\n      error,\n      errorId: `error-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    };\n  }\n  \n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    const errorId = this.state.errorId || 'unknown';\n    \n    console.error(`Error ${errorId} caught:`, error, errorInfo);\n    \n    // Report to error tracking service\n    this.reportError(error, errorInfo, errorId);\n    \n    if (this.props.onError) {\n      this.props.onError(error, errorInfo, errorId);\n    }\n  }\n  \n  componentWillUnmount() {\n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n    }\n  }\n  \n  reportError = (error: Error, errorInfo: ErrorInfo, errorId: string) => {\n    // Simulate error reporting to external service\n    const errorReport = {\n      errorId,\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href\n    };\n    \n    console.log('Error report:', errorReport);\n    // In real app: send to error tracking service like Sentry, Bugsnag, etc.\n  };\n  \n  retry = () => {\n    const maxRetries = this.props.maxRetries || 3;\n    \n    if (this.state.retryCount < maxRetries) {\n      this.setState(prevState => ({\n        hasError: false,\n        error: null,\n        errorId: null,\n        retryCount: prevState.retryCount + 1\n      }));\n    }\n  };\n  \n  autoRetry = () => {\n    this.retryTimeoutId = setTimeout(() => {\n      this.retry();\n    }, 3000);\n  };\n  \n  render() {\n    if (this.state.hasError && this.state.error) {\n      const maxRetries = this.props.maxRetries || 3;\n      const canRetry = this.state.retryCount < maxRetries;\n      \n      if (this.props.fallback) {\n        return this.props.fallback(this.state.error, this.retry, this.state.errorId || 'unknown');\n      }\n      \n      return (\n        <div className=\"advanced-error-boundary\">\n          <div className=\"error-header\">\n            <h2>🚨 Application Error</h2>\n            <p>Error ID: <code>{this.state.errorId}</code></p>\n          </div>\n          \n          <div className=\"error-content\">\n            <p><strong>Something unexpected happened:</strong></p>\n            <div className=\"error-message\">\n              {this.state.error.message}\n            </div>\n            \n            <div className=\"error-actions\">\n              {canRetry ? (\n                <>\n                  <button onClick={this.retry} className=\"retry-btn\">\n                    Try Again ({maxRetries - this.state.retryCount} attempts left)\n                  </button>\n                  <button onClick={this.autoRetry} className=\"auto-retry-btn\">\n                    Auto Retry in 3s\n                  </button>\n                </>\n              ) : (\n                <p className=\"max-retries\">Maximum retry attempts reached.</p>\n              )}\n              \n              <button onClick={() => window.location.reload()} className=\"reload-btn\">\n                Reload Page\n              </button>\n              \n              <button onClick={() => window.history.back()} className=\"back-btn\">\n                Go Back\n              </button>\n            </div>\n            \n            <details className=\"error-details\">\n              <summary>Technical Details</summary>\n              <pre>{this.state.error.stack}</pre>\n            </details>\n          </div>\n        </div>\n      );\n    }\n    \n    return this.props.children;\n  }\n}\n\n// 3. Components that might throw errors\nconst BuggyComponent: React.FC<{ shouldThrow: boolean }> = ({ shouldThrow }) => {\n  if (shouldThrow) {\n    throw new Error('This is a simulated error from BuggyComponent!');\n  }\n  \n  return (\n    <div className=\"buggy-component\">\n      <h3>✅ BuggyComponent is working fine!</h3>\n      <p>This component can throw errors when shouldThrow is true.</p>\n    </div>\n  );\n};\n\nconst AsyncBuggyComponent: React.FC = () => {\n  const [shouldThrow, setShouldThrow] = useState(false);\n  const [loading, setLoading] = useState(false);\n  \n  const simulateAsyncError = async () => {\n    setLoading(true);\n    \n    try {\n      // Simulate async operation\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Simulate random error\n      if (Math.random() > 0.5) {\n        throw new Error('Async operation failed!');\n      }\n      \n      alert('Async operation succeeded!');\n    } catch (error) {\n      // Note: Error boundaries don't catch errors in event handlers\n      // You need to handle these manually\n      console.error('Async error (not caught by boundary):', error);\n      alert(`Async error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  if (shouldThrow) {\n    throw new Error('AsyncBuggyComponent threw an error during render!');\n  }\n  \n  return (\n    <div className=\"async-buggy-component\">\n      <h3>Async Buggy Component</h3>\n      <p>This component can throw errors during render or async operations.</p>\n      \n      <div className=\"controls\">\n        <button onClick={() => setShouldThrow(true)}>\n          Throw Render Error\n        </button>\n        \n        <button onClick={simulateAsyncError} disabled={loading}>\n          {loading ? 'Loading...' : 'Simulate Async Error'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst DeepNestedBuggyComponent: React.FC = () => {\n  const [level, setLevel] = useState(0);\n  \n  if (level > 5) {\n    throw new Error(`Error at nesting level ${level}!`);\n  }\n  \n  return (\n    <div className=\"nested-component\" style={{ marginLeft: level * 20 }}>\n      <h4>Nested Level {level}</h4>\n      <button onClick={() => setLevel(level + 1)}>\n        Go Deeper (Current: {level})\n      </button>\n      \n      {level > 0 && <DeepNestedBuggyComponent />}\n    </div>\n  );\n};\n\n// 4. Error Boundary Usage Examples\nconst ErrorBoundaryExamples = () => {\n  const [showBuggy, setShowBuggy] = useState(false);\n  const [errorCount, setErrorCount] = useState(0);\n  \n  const handleError = (error: Error, errorInfo: ErrorInfo, errorId?: string) => {\n    setErrorCount(prev => prev + 1);\n    console.log('Error handled by parent:', { error, errorInfo, errorId });\n  };\n  \n  const customFallback = (error: Error, retry: () => void, errorId: string) => (\n    <div className=\"custom-error-fallback\">\n      <h3>🎨 Custom Error UI</h3>\n      <p>Oops! Something went wrong in this section.</p>\n      <p><strong>Error:</strong> {error.message}</p>\n      <p><strong>ID:</strong> {errorId}</p>\n      <button onClick={retry}>🔄 Retry</button>\n    </div>\n  );\n  \n  return (\n    <div className=\"error-boundary-examples\">\n      <h2>Error Boundary Examples</h2>\n      \n      <div className=\"stats\">\n        <p>Total errors caught: {errorCount}</p>\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={() => setShowBuggy(!showBuggy)}>\n          {showBuggy ? 'Hide' : 'Show'} Buggy Components\n        </button>\n      </div>\n      \n      {showBuggy && (\n        <div className=\"error-sections\">\n          {/* Basic Error Boundary */}\n          <section className=\"error-section\">\n            <h3>1. Basic Error Boundary</h3>\n            <ErrorBoundary onError={handleError}>\n              <BuggyComponent shouldThrow={true} />\n            </ErrorBoundary>\n          </section>\n          \n          {/* Error Boundary with Custom Fallback */}\n          <section className=\"error-section\">\n            <h3>2. Custom Fallback UI</h3>\n            <ErrorBoundary \n              fallback={\n                <div className=\"simple-fallback\">\n                  <p>⚠️ This section is temporarily unavailable.</p>\n                  <button onClick={() => window.location.reload()}>\n                    Refresh Page\n                  </button>\n                </div>\n              }\n              onError={handleError}\n            >\n              <BuggyComponent shouldThrow={true} />\n            </ErrorBoundary>\n          </section>\n          \n          {/* Advanced Error Boundary */}\n          <section className=\"error-section\">\n            <h3>3. Advanced Error Boundary with Retry</h3>\n            <AdvancedErrorBoundary \n              maxRetries={2}\n              fallback={customFallback}\n              onError={handleError}\n            >\n              <BuggyComponent shouldThrow={true} />\n            </AdvancedErrorBoundary>\n          </section>\n          \n          {/* Multiple Components */}\n          <section className=\"error-section\">\n            <h3>4. Multiple Components (Isolated Errors)</h3>\n            <div className=\"component-grid\">\n              <ErrorBoundary onError={handleError}>\n                <BuggyComponent shouldThrow={false} />\n              </ErrorBoundary>\n              \n              <ErrorBoundary onError={handleError}>\n                <BuggyComponent shouldThrow={true} />\n              </ErrorBoundary>\n              \n              <ErrorBoundary onError={handleError}>\n                <AsyncBuggyComponent />\n              </ErrorBoundary>\n            </div>\n          </section>\n          \n          {/* Nested Error Boundaries */}\n          <section className=\"error-section\">\n            <h3>5. Nested Error Boundaries</h3>\n            <ErrorBoundary \n              fallback={<div className=\"outer-error\">Outer boundary caught error</div>}\n              onError={handleError}\n            >\n              <div className=\"outer-container\">\n                <h4>Outer Container</h4>\n                <ErrorBoundary \n                  fallback={<div className=\"inner-error\">Inner boundary caught error</div>}\n                  onError={handleError}\n                >\n                  <DeepNestedBuggyComponent />\n                </ErrorBoundary>\n              </div>\n            </ErrorBoundary>\n          </section>\n        </div>\n      )}\n      \n      {/* Working Components (No Errors) */}\n      <section className=\"working-section\">\n        <h3>Working Components (No Errors)</h3>\n        <ErrorBoundary onError={handleError}>\n          <BuggyComponent shouldThrow={false} />\n          <div className=\"working-component\">\n            <h4>✅ Another Working Component</h4>\n            <p>This component works perfectly fine!</p>\n          </div>\n        </ErrorBoundary>\n      </section>\n    </div>\n  );\n};\n\n// 5. Error Logging Service Simulation\nclass ErrorLogger {\n  static logs: Array<{\n    id: string;\n    error: Error;\n    errorInfo: ErrorInfo;\n    timestamp: Date;\n    context?: any;\n  }> = [];\n  \n  static log(error: Error, errorInfo: ErrorInfo, context?: any) {\n    const logEntry = {\n      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      error,\n      errorInfo,\n      timestamp: new Date(),\n      context\n    };\n    \n    this.logs.push(logEntry);\n    \n    // In a real app, send to external service\n    console.log('Error logged:', logEntry);\n  }\n  \n  static getLogs() {\n    return this.logs;\n  }\n  \n  static clearLogs() {\n    this.logs = [];\n  }\n}\n\nconst ErrorLogger_Component = () => {\n  const [logs, setLogs] = useState(ErrorLogger.getLogs());\n  \n  const refreshLogs = () => {\n    setLogs([...ErrorLogger.getLogs()]);\n  };\n  \n  const clearLogs = () => {\n    ErrorLogger.clearLogs();\n    setLogs([]);\n  };\n  \n  return (\n    <div className=\"error-logger\">\n      <h3>Error Logs ({logs.length})</h3>\n      \n      <div className=\"log-controls\">\n        <button onClick={refreshLogs}>Refresh Logs</button>\n        <button onClick={clearLogs}>Clear Logs</button>\n      </div>\n      \n      <div className=\"logs\">\n        {logs.length === 0 ? (\n          <p>No errors logged yet.</p>\n        ) : (\n          logs.map(log => (\n            <div key={log.id} className=\"log-entry\">\n              <div className=\"log-header\">\n                <strong>{log.error.message}</strong>\n                <span className=\"timestamp\">{log.timestamp.toLocaleString()}</span>\n              </div>\n              <details>\n                <summary>Stack Trace</summary>\n                <pre>{log.error.stack}</pre>\n              </details>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  const handleGlobalError = (error: Error, errorInfo: ErrorInfo) => {\n    ErrorLogger.log(error, errorInfo, { component: 'App' });\n  };\n  \n  return (\n    <ErrorBoundary onError={handleGlobalError}>\n      <div className=\"app\">\n        <h1>Error Boundaries in React</h1>\n        <p>Error boundaries catch JavaScript errors anywhere in the child component tree.</p>\n        \n        <ErrorBoundaryExamples />\n        <ErrorLogger_Component />\n      </div>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;",
    "tip": "Error boundaries មិនចាប់ errors ក្នុង event handlers, async code, ឬ errors ដែលកើតឡើងនៅក្នុង error boundary ខ្លួនឯង"
  },
  {
    "id": 15,
    "category": "React",
    "path": "/react/portals",
    "title": "មេរៀនទី១៥: Portals",
    "explanation": "React Portals អនុញ្ញាតឱ្យយើង render children នៅក្នុង DOM node ដែលនៅខាងក្រៅ parent component's DOM hierarchy។ វាមានប្រយោជន៍សម្រាប់ modals, tooltips, និង dropdowns។",
    "code": "import React, { useState, useEffect, useRef, ReactNode } from 'react';\nimport { createPortal } from 'react-dom';\n\n// 1. Basic Portal Example\ninterface PortalProps {\n  children: ReactNode;\n  container?: Element;\n}\n\nconst Portal: React.FC<PortalProps> = ({ children, container }) => {\n  const [mountNode, setMountNode] = useState<Element | null>(null);\n  \n  useEffect(() => {\n    // Use provided container or create a new one\n    let node = container;\n    let shouldRemove = false;\n    \n    if (!node) {\n      node = document.createElement('div');\n      node.setAttribute('data-portal', 'true');\n      document.body.appendChild(node);\n      shouldRemove = true;\n    }\n    \n    setMountNode(node);\n    \n    // Cleanup\n    return () => {\n      if (shouldRemove && node && node.parentNode) {\n        node.parentNode.removeChild(node);\n      }\n    };\n  }, [container]);\n  \n  return mountNode ? createPortal(children, mountNode) : null;\n};\n\n// 2. Modal Component using Portal\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title?: string;\n  children: ReactNode;\n  size?: 'small' | 'medium' | 'large';\n  closeOnOverlayClick?: boolean;\n  closeOnEscape?: boolean;\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  children,\n  size = 'medium',\n  closeOnOverlayClick = true,\n  closeOnEscape = true\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null);\n  \n  // Handle escape key\n  useEffect(() => {\n    if (!isOpen || !closeOnEscape) return;\n    \n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n    \n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen, closeOnEscape, onClose]);\n  \n  // Handle body scroll lock\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n    \n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen]);\n  \n  // Focus management\n  useEffect(() => {\n    if (isOpen && modalRef.current) {\n      modalRef.current.focus();\n    }\n  }, [isOpen]);\n  \n  const handleOverlayClick = (e: React.MouseEvent) => {\n    if (closeOnOverlayClick && e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n  \n  if (!isOpen) return null;\n  \n  return (\n    <Portal>\n      <div \n        className=\"modal-overlay\"\n        onClick={handleOverlayClick}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby={title ? 'modal-title' : undefined}\n      >\n        <div \n          ref={modalRef}\n          className={`modal-content modal-${size}`}\n          tabIndex={-1}\n        >\n          <div className=\"modal-header\">\n            {title && <h2 id=\"modal-title\">{title}</h2>}\n            <button \n              className=\"modal-close\"\n              onClick={onClose}\n              aria-label=\"Close modal\"\n            >\n              ×\n            </button>\n          </div>\n          \n          <div className=\"modal-body\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </Portal>\n  );\n};\n\n// 3. Tooltip Component using Portal\ninterface TooltipProps {\n  children: ReactNode;\n  content: ReactNode;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  trigger?: 'hover' | 'click';\n  delay?: number;\n}\n\nconst Tooltip: React.FC<TooltipProps> = ({\n  children,\n  content,\n  position = 'top',\n  trigger = 'hover',\n  delay = 200\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n  const triggerRef = useRef<HTMLDivElement>(null);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  \n  const showTooltip = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      if (triggerRef.current) {\n        const rect = triggerRef.current.getBoundingClientRect();\n        const scrollX = window.pageXOffset;\n        const scrollY = window.pageYOffset;\n        \n        let x = rect.left + scrollX + rect.width / 2;\n        let y = rect.top + scrollY;\n        \n        switch (position) {\n          case 'top':\n            y -= 10;\n            break;\n          case 'bottom':\n            y += rect.height + 10;\n            break;\n          case 'left':\n            x = rect.left + scrollX - 10;\n            y += rect.height / 2;\n            break;\n          case 'right':\n            x = rect.right + scrollX + 10;\n            y += rect.height / 2;\n            break;\n        }\n        \n        setTooltipPosition({ x, y });\n        setIsVisible(true);\n      }\n    }, delay);\n  };\n  \n  const hideTooltip = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setIsVisible(false);\n  };\n  \n  const handleMouseEnter = () => {\n    if (trigger === 'hover') {\n      showTooltip();\n    }\n  };\n  \n  const handleMouseLeave = () => {\n    if (trigger === 'hover') {\n      hideTooltip();\n    }\n  };\n  \n  const handleClick = () => {\n    if (trigger === 'click') {\n      if (isVisible) {\n        hideTooltip();\n      } else {\n        showTooltip();\n      }\n    }\n  };\n  \n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n  \n  return (\n    <>\n      <div\n        ref={triggerRef}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onClick={handleClick}\n        className=\"tooltip-trigger\"\n      >\n        {children}\n      </div>\n      \n      {isVisible && (\n        <Portal>\n          <div\n            className={`tooltip tooltip-${position}`}\n            style={{\n              position: 'absolute',\n              left: tooltipPosition.x,\n              top: tooltipPosition.y,\n              transform: position === 'top' || position === 'bottom' \n                ? 'translateX(-50%)' \n                : position === 'left' \n                  ? 'translateX(-100%)' \n                  : 'translateX(0)',\n              zIndex: 9999\n            }}\n          >\n            {content}\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n};\n\n// 4. Dropdown Component using Portal\ninterface DropdownProps {\n  trigger: ReactNode;\n  children: ReactNode;\n  position?: 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';\n  closeOnClickOutside?: boolean;\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({\n  trigger,\n  children,\n  position = 'bottom-left',\n  closeOnClickOutside = true\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [dropdownPosition, setDropdownPosition] = useState({ x: 0, y: 0 });\n  const triggerRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const updatePosition = () => {\n    if (triggerRef.current) {\n      const rect = triggerRef.current.getBoundingClientRect();\n      const scrollX = window.pageXOffset;\n      const scrollY = window.pageYOffset;\n      \n      let x = rect.left + scrollX;\n      let y = rect.bottom + scrollY;\n      \n      switch (position) {\n        case 'bottom-right':\n          x = rect.right + scrollX;\n          break;\n        case 'top-left':\n          y = rect.top + scrollY;\n          break;\n        case 'top-right':\n          x = rect.right + scrollX;\n          y = rect.top + scrollY;\n          break;\n      }\n      \n      setDropdownPosition({ x, y });\n    }\n  };\n  \n  const toggleDropdown = () => {\n    if (!isOpen) {\n      updatePosition();\n    }\n    setIsOpen(!isOpen);\n  };\n  \n  // Close on click outside\n  useEffect(() => {\n    if (!isOpen || !closeOnClickOutside) return;\n    \n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node) &&\n        triggerRef.current &&\n        !triggerRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [isOpen, closeOnClickOutside]);\n  \n  // Update position on scroll/resize\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    const handlePositionUpdate = () => {\n      updatePosition();\n    };\n    \n    window.addEventListener('scroll', handlePositionUpdate);\n    window.addEventListener('resize', handlePositionUpdate);\n    \n    return () => {\n      window.removeEventListener('scroll', handlePositionUpdate);\n      window.removeEventListener('resize', handlePositionUpdate);\n    };\n  }, [isOpen, position]);\n  \n  return (\n    <>\n      <div ref={triggerRef} onClick={toggleDropdown} className=\"dropdown-trigger\">\n        {trigger}\n      </div>\n      \n      {isOpen && (\n        <Portal>\n          <div\n            ref={dropdownRef}\n            className={`dropdown dropdown-${position}`}\n            style={{\n              position: 'absolute',\n              left: dropdownPosition.x,\n              top: dropdownPosition.y,\n              zIndex: 9999\n            }}\n          >\n            {children}\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n};\n\n// 5. Notification System using Portal\ninterface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message?: string;\n  duration?: number;\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  addNotification: (notification: Omit<Notification, 'id'>) => void;\n  removeNotification: (id: string) => void;\n}\n\nconst NotificationContext = React.createContext<NotificationContextType | null>(null);\n\nconst NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  \n  const addNotification = (notification: Omit<Notification, 'id'>) => {\n    const id = `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const newNotification = { ...notification, id };\n    \n    setNotifications(prev => [...prev, newNotification]);\n    \n    // Auto remove after duration\n    if (notification.duration !== 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, notification.duration || 5000);\n    }\n  };\n  \n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n  \n  return (\n    <NotificationContext.Provider value={{ notifications, addNotification, removeNotification }}>\n      {children}\n      <NotificationContainer />\n    </NotificationContext.Provider>\n  );\n};\n\nconst NotificationContainer: React.FC = () => {\n  const context = React.useContext(NotificationContext);\n  if (!context) return null;\n  \n  const { notifications, removeNotification } = context;\n  \n  if (notifications.length === 0) return null;\n  \n  return (\n    <Portal>\n      <div className=\"notification-container\">\n        {notifications.map(notification => (\n          <div\n            key={notification.id}\n            className={`notification notification-${notification.type}`}\n          >\n            <div className=\"notification-content\">\n              <h4>{notification.title}</h4>\n              {notification.message && <p>{notification.message}</p>}\n            </div>\n            <button\n              className=\"notification-close\"\n              onClick={() => removeNotification(notification.id)}\n            >\n              ×\n            </button>\n          </div>\n        ))}\n      </div>\n    </Portal>\n  );\n};\n\nconst useNotifications = () => {\n  const context = React.useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within NotificationProvider');\n  }\n  return context;\n};\n\n// 6. Portal Examples Component\nconst PortalExamples = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalSize, setModalSize] = useState<'small' | 'medium' | 'large'>('medium');\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const { addNotification } = useNotifications();\n  \n  const showNotification = (type: Notification['type']) => {\n    addNotification({\n      type,\n      title: `${type.charAt(0).toUpperCase() + type.slice(1)} Notification`,\n      message: `This is a ${type} notification message.`,\n      duration: 3000\n    });\n  };\n  \n  return (\n    <div className=\"portal-examples\">\n      <h2>Portal Examples</h2>\n      \n      {/* Modal Examples */}\n      <section className=\"example-section\">\n        <h3>1. Modal Portal</h3>\n        <div className=\"controls\">\n          <select \n            value={modalSize} \n            onChange={(e) => setModalSize(e.target.value as any)}\n          >\n            <option value=\"small\">Small Modal</option>\n            <option value=\"medium\">Medium Modal</option>\n            <option value=\"large\">Large Modal</option>\n          </select>\n          <button onClick={() => setIsModalOpen(true)}>\n            Open Modal\n          </button>\n        </div>\n        \n        <Modal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          title=\"Example Modal\"\n          size={modalSize}\n        >\n          <p>This modal is rendered using a Portal!</p>\n          <p>It's rendered outside the normal component tree but maintains React's event system.</p>\n          <div className=\"modal-actions\">\n            <button onClick={() => setIsModalOpen(false)}>Close</button>\n            <button onClick={() => alert('Action performed!')}>Perform Action</button>\n          </div>\n        </Modal>\n      </section>\n      \n      {/* Tooltip Examples */}\n      <section className=\"example-section\">\n        <h3>2. Tooltip Portal</h3>\n        <div className=\"tooltip-examples\">\n          <Tooltip content=\"This tooltip appears on top\" position=\"top\">\n            <button>Hover for top tooltip</button>\n          </Tooltip>\n          \n          <Tooltip content=\"This tooltip appears on the right\" position=\"right\">\n            <button>Hover for right tooltip</button>\n          </Tooltip>\n          \n          <Tooltip \n            content=\"Click tooltip with custom content\" \n            position=\"bottom\" \n            trigger=\"click\"\n          >\n            <button>Click for bottom tooltip</button>\n          </Tooltip>\n          \n          <Tooltip \n            content={\n              <div>\n                <strong>Rich Content Tooltip</strong>\n                <p>This tooltip can contain any React content!</p>\n                <button onClick={() => alert('Button in tooltip!')}>Click me</button>\n              </div>\n            } \n            position=\"left\"\n          >\n            <button>Rich content tooltip</button>\n          </Tooltip>\n        </div>\n      </section>\n      \n      {/* Dropdown Examples */}\n      <section className=\"example-section\">\n        <h3>3. Dropdown Portal</h3>\n        <div className=\"dropdown-examples\">\n          <Dropdown\n            trigger={<button>Dropdown Menu ▼</button>}\n            position=\"bottom-left\"\n          >\n            <div className=\"dropdown-menu\">\n              <div className=\"dropdown-item\" onClick={() => alert('Profile clicked')}>\n                👤 Profile\n              </div>\n              <div className=\"dropdown-item\" onClick={() => alert('Settings clicked')}>\n                ⚙️ Settings\n              </div>\n              <div className=\"dropdown-divider\"></div>\n              <div className=\"dropdown-item\" onClick={() => alert('Logout clicked')}>\n                🚪 Logout\n              </div>\n            </div>\n          </Dropdown>\n          \n          <Dropdown\n            trigger={<button>Actions ▼</button>}\n            position=\"bottom-right\"\n          >\n            <div className=\"dropdown-menu\">\n              <div className=\"dropdown-item\">📝 Edit</div>\n              <div className=\"dropdown-item\">📋 Copy</div>\n              <div className=\"dropdown-item\">🗑️ Delete</div>\n            </div>\n          </Dropdown>\n        </div>\n      </section>\n      \n      {/* Notification Examples */}\n      <section className=\"example-section\">\n        <h3>4. Notification Portal</h3>\n        <div className=\"notification-examples\">\n          <button onClick={() => showNotification('success')}>\n            Show Success\n          </button>\n          <button onClick={() => showNotification('error')}>\n            Show Error\n          </button>\n          <button onClick={() => showNotification('warning')}>\n            Show Warning\n          </button>\n          <button onClick={() => showNotification('info')}>\n            Show Info\n          </button>\n        </div>\n      </section>\n      \n      {/* Custom Portal */}\n      <section className=\"example-section\">\n        <h3>5. Custom Portal</h3>\n        <div className=\"custom-portal-example\">\n          <p>This content is in the normal flow.</p>\n          <Portal>\n            <div className=\"portal-content\">\n              <h4>🌟 This content is rendered via Portal!</h4>\n              <p>I'm rendered outside the normal component tree.</p>\n              <p>Check the DOM inspector to see where I'm actually located.</p>\n            </div>\n          </Portal>\n          <p>This content is also in the normal flow.</p>\n        </div>\n      </section>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <NotificationProvider>\n      <div className=\"app\">\n        <h1>React Portals</h1>\n        <p>Portals provide a way to render children into a DOM node outside of the parent component's DOM hierarchy.</p>\n        \n        <PortalExamples />\n      </div>\n    </NotificationProvider>\n  );\n};\n\nexport default App;",
    "tip": "Portals មានប្រយោជន៍សម្រាប់ modals, tooltips, dropdowns ដែលត្រូវការ render នៅខាងក្រៅ parent container"
  },
  {
    "id": 16,
    "category": "React",
    "path": "/react/lazy-suspense",
    "title": "មេរៀនទី១៦: Lazy Loading and Suspense",
    "explanation": "React.lazy និង Suspense អនុញ្ញាតឱ្យយើងធ្វើ code splitting និង lazy loading components ដើម្បីកាត់បន្ថយ bundle size និងធ្វើឱ្យ application load លឿនជាង។",
    "code": "import React, { Suspense, lazy, useState, useEffect } from 'react';\n\n// 1. Basic Lazy Loading\nconst LazyComponent = lazy(() => import('./LazyComponent'));\nconst LazyDashboard = lazy(() => import('./Dashboard'));\nconst LazyProfile = lazy(() => import('./Profile'));\n\n// Simulate lazy components (normally these would be in separate files)\nconst LazyComponentContent = () => {\n  useEffect(() => {\n    console.log('LazyComponent mounted');\n  }, []);\n  \n  return (\n    <div className=\"lazy-component\">\n      <h3>🚀 Lazy Loaded Component</h3>\n      <p>This component was loaded on demand!</p>\n      <p>Check the Network tab to see it being loaded separately.</p>\n    </div>\n  );\n};\n\nconst Dashboard = () => {\n  const [data, setData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    // Simulate data fetching\n    setTimeout(() => {\n      setData([\n        { id: 1, title: 'Dashboard Item 1', value: 100 },\n        { id: 2, title: 'Dashboard Item 2', value: 250 },\n        { id: 3, title: 'Dashboard Item 3', value: 180 }\n      ]);\n      setLoading(false);\n    }, 1000);\n  }, []);\n  \n  if (loading) {\n    return <div className=\"loading\">Loading dashboard data...</div>;\n  }\n  \n  return (\n    <div className=\"dashboard\">\n      <h3>📊 Dashboard</h3>\n      <div className=\"dashboard-grid\">\n        {data.map(item => (\n          <div key={item.id} className=\"dashboard-card\">\n            <h4>{item.title}</h4>\n            <p className=\"value\">{item.value}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Profile = () => {\n  const [user, setUser] = useState<any>(null);\n  \n  useEffect(() => {\n    // Simulate user data fetching\n    setTimeout(() => {\n      setUser({\n        name: 'John Doe',\n        email: 'john@example.com',\n        avatar: 'https://via.placeholder.com/100',\n        bio: 'Software developer with passion for React'\n      });\n    }, 800);\n  }, []);\n  \n  if (!user) {\n    return <div className=\"loading\">Loading profile...</div>;\n  }\n  \n  return (\n    <div className=\"profile\">\n      <h3>👤 Profile</h3>\n      <div className=\"profile-content\">\n        <img src={user.avatar} alt={user.name} className=\"avatar\" />\n        <div className=\"profile-info\">\n          <h4>{user.name}</h4>\n          <p>{user.email}</p>\n          <p>{user.bio}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 2. Loading Components\nconst SimpleLoader = () => (\n  <div className=\"simple-loader\">\n    <div className=\"spinner\"></div>\n    <p>Loading...</p>\n  </div>\n);\n\nconst SkeletonLoader = () => (\n  <div className=\"skeleton-loader\">\n    <div className=\"skeleton-header\"></div>\n    <div className=\"skeleton-content\">\n      <div className=\"skeleton-line\"></div>\n      <div className=\"skeleton-line\"></div>\n      <div className=\"skeleton-line short\"></div>\n    </div>\n  </div>\n);\n\nconst CustomLoader: React.FC<{ message?: string }> = ({ message = 'Loading...' }) => (\n  <div className=\"custom-loader\">\n    <div className=\"loader-animation\">\n      <div className=\"dot\"></div>\n      <div className=\"dot\"></div>\n      <div className=\"dot\"></div>\n    </div>\n    <p>{message}</p>\n  </div>\n);\n\n// 3. Error Boundary for Lazy Components\ninterface LazyErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\nclass LazyErrorBoundary extends React.Component<\n  { children: React.ReactNode; fallback?: React.ReactNode },\n  LazyErrorBoundaryState\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n  \n  static getDerivedStateFromError(error: Error): LazyErrorBoundaryState {\n    return { hasError: true, error };\n  }\n  \n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Lazy loading error:', error, errorInfo);\n  }\n  \n  render() {\n    if (this.state.hasError) {\n      return (\n        this.props.fallback || (\n          <div className=\"lazy-error\">\n            <h3>⚠️ Failed to load component</h3>\n            <p>Error: {this.state.error?.message}</p>\n            <button onClick={() => window.location.reload()}>\n              Reload Page\n            </button>\n          </div>\n        )\n      );\n    }\n    \n    return this.props.children;\n  }\n}\n\n// 4. Lazy Route Component\ninterface LazyRouteProps {\n  component: React.LazyExoticComponent<React.ComponentType<any>>;\n  fallback?: React.ReactNode;\n  errorFallback?: React.ReactNode;\n}\n\nconst LazyRoute: React.FC<LazyRouteProps> = ({ \n  component: Component, \n  fallback = <SimpleLoader />,\n  errorFallback\n}) => (\n  <LazyErrorBoundary fallback={errorFallback}>\n    <Suspense fallback={fallback}>\n      <Component />\n    </Suspense>\n  </LazyErrorBoundary>\n);\n\n// 5. Progressive Loading Example\nconst ProgressiveLoader = () => {\n  const [progress, setProgress] = useState(0);\n  \n  useEffect(() => {\n    const interval = setInterval(() => {\n      setProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          return 100;\n        }\n        return prev + Math.random() * 15;\n      });\n    }, 100);\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  return (\n    <div className=\"progressive-loader\">\n      <div className=\"progress-bar\">\n        <div \n          className=\"progress-fill\" \n          style={{ width: `${Math.min(progress, 100)}%` }}\n        ></div>\n      </div>\n      <p>Loading... {Math.round(Math.min(progress, 100))}%</p>\n    </div>\n  );\n};\n\n// 6. Lazy Image Component\ninterface LazyImageProps {\n  src: string;\n  alt: string;\n  placeholder?: string;\n  className?: string;\n}\n\nconst LazyImage: React.FC<LazyImageProps> = ({ \n  src, \n  alt, \n  placeholder = 'https://via.placeholder.com/300x200?text=Loading...',\n  className \n}) => {\n  const [imageSrc, setImageSrc] = useState(placeholder);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  \n  useEffect(() => {\n    const img = new Image();\n    \n    img.onload = () => {\n      setImageSrc(src);\n      setIsLoading(false);\n    };\n    \n    img.onerror = () => {\n      setHasError(true);\n      setIsLoading(false);\n    };\n    \n    img.src = src;\n  }, [src]);\n  \n  return (\n    <div className={`lazy-image-container ${className || ''}`}>\n      <img \n        src={imageSrc} \n        alt={alt}\n        className={`lazy-image ${isLoading ? 'loading' : ''}`}\n      />\n      {isLoading && (\n        <div className=\"image-loader\">\n          <div className=\"spinner\"></div>\n        </div>\n      )}\n      {hasError && (\n        <div className=\"image-error\">\n          <p>Failed to load image</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// 7. Lazy Data Component\nconst LazyDataComponent = lazy(() => {\n  // Simulate dynamic import with data fetching\n  return new Promise<{ default: React.ComponentType }>((resolve) => {\n    setTimeout(() => {\n      const Component = () => {\n        const [posts, setPosts] = useState<any[]>([]);\n        \n        useEffect(() => {\n          // Simulate API call\n          setTimeout(() => {\n            setPosts([\n              { id: 1, title: 'Post 1', content: 'Content for post 1' },\n              { id: 2, title: 'Post 2', content: 'Content for post 2' },\n              { id: 3, title: 'Post 3', content: 'Content for post 3' }\n            ]);\n          }, 500);\n        }, []);\n        \n        return (\n          <div className=\"lazy-data-component\">\n            <h3>📝 Lazy Data Component</h3>\n            {posts.length === 0 ? (\n              <p>Loading posts...</p>\n            ) : (\n              <div className=\"posts\">\n                {posts.map(post => (\n                  <div key={post.id} className=\"post\">\n                    <h4>{post.title}</h4>\n                    <p>{post.content}</p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      };\n      \n      resolve({ default: Component });\n    }, 1500); // Simulate slow loading\n  });\n});\n\n// 8. Main Application with Lazy Loading\nconst LazyLoadingApp = () => {\n  const [currentView, setCurrentView] = useState<string>('home');\n  const [showLazyComponent, setShowLazyComponent] = useState(false);\n  const [showLazyImages, setShowLazyImages] = useState(false);\n  \n  const renderView = () => {\n    switch (currentView) {\n      case 'dashboard':\n        return (\n          <LazyRoute \n            component={LazyDashboard}\n            fallback={<SkeletonLoader />}\n          />\n        );\n      \n      case 'profile':\n        return (\n          <LazyRoute \n            component={LazyProfile}\n            fallback={<CustomLoader message=\"Loading profile...\" />}\n          />\n        );\n      \n      case 'data':\n        return (\n          <LazyRoute \n            component={LazyDataComponent}\n            fallback={<ProgressiveLoader />}\n          />\n        );\n      \n      default:\n        return (\n          <div className=\"home\">\n            <h3>🏠 Home</h3>\n            <p>Welcome to the Lazy Loading Demo!</p>\n            <p>Click on the navigation buttons to load different components lazily.</p>\n            \n            <div className=\"home-actions\">\n              <button \n                onClick={() => setShowLazyComponent(!showLazyComponent)}\n                className=\"toggle-btn\"\n              >\n                {showLazyComponent ? 'Hide' : 'Show'} Lazy Component\n              </button>\n              \n              <button \n                onClick={() => setShowLazyImages(!showLazyImages)}\n                className=\"toggle-btn\"\n              >\n                {showLazyImages ? 'Hide' : 'Show'} Lazy Images\n              </button>\n            </div>\n            \n            {showLazyComponent && (\n              <Suspense fallback={<SimpleLoader />}>\n                <LazyComponent />\n              </Suspense>\n            )}\n            \n            {showLazyImages && (\n              <div className=\"lazy-images\">\n                <h4>Lazy Loaded Images</h4>\n                <div className=\"image-grid\">\n                  <LazyImage \n                    src=\"https://picsum.photos/300/200?random=1\"\n                    alt=\"Random image 1\"\n                    className=\"grid-image\"\n                  />\n                  <LazyImage \n                    src=\"https://picsum.photos/300/200?random=2\"\n                    alt=\"Random image 2\"\n                    className=\"grid-image\"\n                  />\n                  <LazyImage \n                    src=\"https://picsum.photos/300/200?random=3\"\n                    alt=\"Random image 3\"\n                    className=\"grid-image\"\n                  />\n                  <LazyImage \n                    src=\"https://picsum.photos/300/200?random=4\"\n                    alt=\"Random image 4\"\n                    className=\"grid-image\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        );\n    }\n  };\n  \n  return (\n    <div className=\"lazy-loading-app\">\n      <nav className=\"navigation\">\n        <button \n          onClick={() => setCurrentView('home')}\n          className={currentView === 'home' ? 'active' : ''}\n        >\n          🏠 Home\n        </button>\n        <button \n          onClick={() => setCurrentView('dashboard')}\n          className={currentView === 'dashboard' ? 'active' : ''}\n        >\n          📊 Dashboard\n        </button>\n        <button \n          onClick={() => setCurrentView('profile')}\n          className={currentView === 'profile' ? 'active' : ''}\n        >\n          👤 Profile\n        </button>\n        <button \n          onClick={() => setCurrentView('data')}\n          className={currentView === 'data' ? 'active' : ''}\n        >\n          📝 Data\n        </button>\n      </nav>\n      \n      <main className=\"main-content\">\n        {renderView()}\n      </main>\n      \n      <div className=\"loading-info\">\n        <h4>💡 Loading Information</h4>\n        <p>Open DevTools Network tab to see components being loaded on demand.</p>\n        <p>Each lazy component is loaded only when needed, reducing initial bundle size.</p>\n      </div>\n    </div>\n  );\n};\n\n// 9. Performance Monitoring\nconst PerformanceMonitor = () => {\n  const [metrics, setMetrics] = useState<any>({});\n  \n  useEffect(() => {\n    // Monitor performance\n    const observer = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach((entry) => {\n        if (entry.entryType === 'navigation') {\n          setMetrics((prev: any) => ({\n            ...prev,\n            loadTime: entry.loadEventEnd - entry.loadEventStart,\n            domContentLoaded: entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart\n          }));\n        }\n      });\n    });\n    \n    observer.observe({ entryTypes: ['navigation'] });\n    \n    return () => observer.disconnect();\n  }, []);\n  \n  return (\n    <div className=\"performance-monitor\">\n      <h4>⚡ Performance Metrics</h4>\n      <div className=\"metrics\">\n        <div className=\"metric\">\n          <span>Load Time:</span>\n          <span>{metrics.loadTime ? `${metrics.loadTime.toFixed(2)}ms` : 'N/A'}</span>\n        </div>\n        <div className=\"metric\">\n          <span>DOM Content Loaded:</span>\n          <span>{metrics.domContentLoaded ? `${metrics.domContentLoaded.toFixed(2)}ms` : 'N/A'}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>React Lazy Loading & Suspense</h1>\n      <p>Demonstrating code splitting and lazy loading for better performance.</p>\n      \n      <PerformanceMonitor />\n      <LazyLoadingApp />\n    </div>\n  );\n};\n\n// Mock the lazy components for this example\n// In a real app, these would be in separate files\nObject.defineProperty(window, 'LazyComponent', {\n  value: LazyComponentContent\n});\n\nObject.defineProperty(window, 'Dashboard', {\n  value: Dashboard\n});\n\nObject.defineProperty(window, 'Profile', {\n  value: Profile\n});\n\nexport default App;",
    "tip": "ប្រើ React.lazy និង Suspense ដើម្បីធ្វើ code splitting និងកាត់បន្ថយ initial bundle size"
  },
  {
    "id": 17,
    "category": "React",
    "path": "/react/higher-order-components",
    "title": "មេរៀនទី១៧: Higher-Order Components (HOCs)",
    "explanation": "Higher-Order Components គឺជា pattern នៅក្នុង React ដែលអនុញ្ញាតឱ្យយើង reuse component logic។ HOC គឺជា function ដែលទទួល component មួយ និង return component ថ្មីមួយ។",
    "code": "import React, { useState, useEffect, ComponentType } from 'react';\n\n// 1. Basic HOC Example - withLoading\ninterface WithLoadingProps {\n  isLoading: boolean;\n}\n\nconst withLoading = <P extends object>(\n  WrappedComponent: ComponentType<P>\n) => {\n  return (props: P & WithLoadingProps) => {\n    const { isLoading, ...restProps } = props;\n    \n    if (isLoading) {\n      return (\n        <div className=\"loading-container\">\n          <div className=\"spinner\"></div>\n          <p>Loading...</p>\n        </div>\n      );\n    }\n    \n    return <WrappedComponent {...(restProps as P)} />;\n  };\n};\n\n// Component to be wrapped\nconst UserList: React.FC<{ users: Array<{ id: number; name: string; email: string }> }> = ({ users }) => {\n  return (\n    <div className=\"user-list\">\n      <h3>User List</h3>\n      {users.map(user => (\n        <div key={user.id} className=\"user-item\">\n          <h4>{user.name}</h4>\n          <p>{user.email}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Enhanced component with loading\nconst UserListWithLoading = withLoading(UserList);\n\n// 2. Authentication HOC\ninterface WithAuthProps {\n  user?: { id: number; name: string; role: string } | null;\n  requiredRole?: string;\n}\n\nconst withAuth = <P extends object>(\n  WrappedComponent: ComponentType<P>,\n  requiredRole?: string\n) => {\n  return (props: P & WithAuthProps) => {\n    const { user, ...restProps } = props;\n    \n    if (!user) {\n      return (\n        <div className=\"auth-required\">\n          <h3>🔒 Authentication Required</h3>\n          <p>Please log in to access this content.</p>\n          <button onClick={() => alert('Login functionality would go here')}>\n            Login\n          </button>\n        </div>\n      );\n    }\n    \n    if (requiredRole && user.role !== requiredRole) {\n      return (\n        <div className=\"access-denied\">\n          <h3>🚫 Access Denied</h3>\n          <p>You don't have permission to access this content.</p>\n          <p>Required role: {requiredRole}</p>\n          <p>Your role: {user.role}</p>\n        </div>\n      );\n    }\n    \n    return <WrappedComponent {...(restProps as P)} user={user} />;\n  };\n};\n\n// Admin Panel Component\nconst AdminPanel: React.FC<{ user: { name: string; role: string } }> = ({ user }) => {\n  return (\n    <div className=\"admin-panel\">\n      <h3>👑 Admin Panel</h3>\n      <p>Welcome, {user.name}!</p>\n      <div className=\"admin-actions\">\n        <button>Manage Users</button>\n        <button>System Settings</button>\n        <button>View Reports</button>\n      </div>\n    </div>\n  );\n};\n\n// Protected Admin Panel\nconst ProtectedAdminPanel = withAuth(AdminPanel, 'admin');\n\n// 3. Data Fetching HOC\ninterface WithDataProps<T> {\n  data: T | null;\n  error: string | null;\n  refetch: () => void;\n}\n\nconst withData = <T, P extends object>(\n  WrappedComponent: ComponentType<P & WithDataProps<T>>,\n  fetchData: () => Promise<T>\n) => {\n  return (props: P) => {\n    const [data, setData] = useState<T | null>(null);\n    const [error, setError] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    \n    const fetchDataInternal = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const result = await fetchData();\n        setData(result);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'An error occurred');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    useEffect(() => {\n      fetchDataInternal();\n    }, []);\n    \n    if (isLoading) {\n      return (\n        <div className=\"data-loading\">\n          <div className=\"spinner\"></div>\n          <p>Fetching data...</p>\n        </div>\n      );\n    }\n    \n    if (error) {\n      return (\n        <div className=\"data-error\">\n          <h3>❌ Error Loading Data</h3>\n          <p>{error}</p>\n          <button onClick={fetchDataInternal}>Retry</button>\n        </div>\n      );\n    }\n    \n    return (\n      <WrappedComponent \n        {...props} \n        data={data} \n        error={error} \n        refetch={fetchDataInternal} \n      />\n    );\n  };\n};\n\n// Posts Component\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n}\n\nconst PostList: React.FC<WithDataProps<Post[]>> = ({ data, error, refetch }) => {\n  return (\n    <div className=\"post-list\">\n      <div className=\"post-header\">\n        <h3>📝 Posts</h3>\n        <button onClick={refetch}>Refresh</button>\n      </div>\n      \n      {data && data.map(post => (\n        <div key={post.id} className=\"post-item\">\n          <h4>{post.title}</h4>\n          <p>{post.body}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Mock data fetcher\nconst fetchPosts = async (): Promise<Post[]> => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  // Simulate random error\n  if (Math.random() > 0.8) {\n    throw new Error('Failed to fetch posts');\n  }\n  \n  return [\n    { id: 1, title: 'First Post', body: 'This is the content of the first post.' },\n    { id: 2, title: 'Second Post', body: 'This is the content of the second post.' },\n    { id: 3, title: 'Third Post', body: 'This is the content of the third post.' }\n  ];\n};\n\n// Enhanced PostList with data fetching\nconst PostListWithData = withData(PostList, fetchPosts);\n\n// 4. Theme HOC\ninterface WithThemeProps {\n  theme: 'light' | 'dark';\n}\n\nconst withTheme = <P extends object>(\n  WrappedComponent: ComponentType<P>\n) => {\n  return (props: P & WithThemeProps) => {\n    const { theme, ...restProps } = props;\n    \n    return (\n      <div className={`theme-wrapper theme-${theme}`}>\n        <WrappedComponent {...(restProps as P)} />\n      </div>\n    );\n  };\n};\n\n// Themed Card Component\nconst Card: React.FC<{ title: string; content: string }> = ({ title, content }) => {\n  return (\n    <div className=\"card\">\n      <h4>{title}</h4>\n      <p>{content}</p>\n    </div>\n  );\n};\n\nconst ThemedCard = withTheme(Card);\n\n// 5. Analytics HOC\ninterface WithAnalyticsProps {\n  trackEvent?: (event: string, data?: any) => void;\n}\n\nconst withAnalytics = <P extends object>(\n  WrappedComponent: ComponentType<P>,\n  componentName: string\n) => {\n  return (props: P & WithAnalyticsProps) => {\n    const { trackEvent, ...restProps } = props;\n    \n    useEffect(() => {\n      // Track component mount\n      trackEvent?.('component_mounted', { component: componentName });\n      \n      return () => {\n        // Track component unmount\n        trackEvent?.('component_unmounted', { component: componentName });\n      };\n    }, [trackEvent]);\n    \n    const enhancedProps = {\n      ...restProps,\n      trackEvent: (event: string, data?: any) => {\n        trackEvent?.(event, { ...data, component: componentName });\n      }\n    } as P;\n    \n    return <WrappedComponent {...enhancedProps} />;\n  };\n};\n\n// Button with analytics\nconst AnalyticsButton: React.FC<{ \n  label: string; \n  onClick: () => void;\n  trackEvent?: (event: string, data?: any) => void;\n}> = ({ label, onClick, trackEvent }) => {\n  const handleClick = () => {\n    trackEvent?.('button_clicked', { label });\n    onClick();\n  };\n  \n  return (\n    <button onClick={handleClick} className=\"analytics-button\">\n      {label}\n    </button>\n  );\n};\n\nconst TrackedButton = withAnalytics(AnalyticsButton, 'AnalyticsButton');\n\n// 6. Error Boundary HOC\ninterface WithErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\nconst withErrorBoundary = <P extends object>(\n  WrappedComponent: ComponentType<P>,\n  fallbackComponent?: ComponentType<{ error: Error; retry: () => void }>\n) => {\n  return class extends React.Component<P, WithErrorBoundaryState> {\n    constructor(props: P) {\n      super(props);\n      this.state = { hasError: false, error: null };\n    }\n    \n    static getDerivedStateFromError(error: Error): WithErrorBoundaryState {\n      return { hasError: true, error };\n    }\n    \n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n      console.error('Error caught by HOC:', error, errorInfo);\n    }\n    \n    retry = () => {\n      this.setState({ hasError: false, error: null });\n    };\n    \n    render() {\n      if (this.state.hasError && this.state.error) {\n        if (fallbackComponent) {\n          const FallbackComponent = fallbackComponent;\n          return <FallbackComponent error={this.state.error} retry={this.retry} />;\n        }\n        \n        return (\n          <div className=\"error-boundary\">\n            <h3>🚨 Something went wrong</h3>\n            <p>{this.state.error.message}</p>\n            <button onClick={this.retry}>Try Again</button>\n          </div>\n        );\n      }\n      \n      return <WrappedComponent {...this.props} />;\n    }\n  };\n};\n\n// Buggy component for testing\nconst BuggyComponent: React.FC<{ shouldThrow: boolean }> = ({ shouldThrow }) => {\n  if (shouldThrow) {\n    throw new Error('This component intentionally threw an error!');\n  }\n  \n  return (\n    <div className=\"buggy-component\">\n      <h4>✅ Component is working fine!</h4>\n      <p>No errors here.</p>\n    </div>\n  );\n};\n\nconst SafeBuggyComponent = withErrorBoundary(BuggyComponent);\n\n// 7. Composing Multiple HOCs\nconst enhance = <P extends object>(WrappedComponent: ComponentType<P>) => {\n  // Compose multiple HOCs\n  return withErrorBoundary(\n    withAnalytics(\n      withTheme(\n        withLoading(WrappedComponent)\n      ),\n      'EnhancedComponent'\n    )\n  );\n};\n\n// Enhanced component with multiple HOCs\nconst SimpleComponent: React.FC<{ message: string }> = ({ message }) => {\n  return (\n    <div className=\"simple-component\">\n      <h4>Enhanced Component</h4>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nconst FullyEnhancedComponent = enhance(SimpleComponent);\n\n// 8. HOC Examples Container\nconst HOCExamples = () => {\n  const [users, setUsers] = useState<Array<{ id: number; name: string; email: string }>>([]);\n  const [isLoadingUsers, setIsLoadingUsers] = useState(true);\n  const [currentUser, setCurrentUser] = useState<{ id: number; name: string; role: string } | null>(null);\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n  const [shouldThrow, setShouldThrow] = useState(false);\n  \n  // Mock analytics function\n  const trackEvent = (event: string, data?: any) => {\n    console.log('Analytics Event:', event, data);\n  };\n  \n  // Simulate user loading\n  useEffect(() => {\n    setTimeout(() => {\n      setUsers([\n        { id: 1, name: 'John Doe', email: 'john@example.com' },\n        { id: 2, name: 'Jane Smith', email: 'jane@example.com' },\n        { id: 3, name: 'Bob Johnson', email: 'bob@example.com' }\n      ]);\n      setIsLoadingUsers(false);\n    }, 2000);\n  }, []);\n  \n  const loginAsUser = () => {\n    setCurrentUser({ id: 1, name: 'John Doe', role: 'user' });\n  };\n  \n  const loginAsAdmin = () => {\n    setCurrentUser({ id: 2, name: 'Admin User', role: 'admin' });\n  };\n  \n  const logout = () => {\n    setCurrentUser(null);\n  };\n  \n  return (\n    <div className=\"hoc-examples\">\n      <h2>Higher-Order Components Examples</h2>\n      \n      {/* Controls */}\n      <div className=\"controls\">\n        <div className=\"auth-controls\">\n          <h4>Authentication:</h4>\n          <button onClick={loginAsUser}>Login as User</button>\n          <button onClick={loginAsAdmin}>Login as Admin</button>\n          <button onClick={logout}>Logout</button>\n          <p>Current user: {currentUser ? `${currentUser.name} (${currentUser.role})` : 'Not logged in'}</p>\n        </div>\n        \n        <div className=\"theme-controls\">\n          <h4>Theme:</h4>\n          <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n            Switch to {theme === 'light' ? 'Dark' : 'Light'} Theme\n          </button>\n        </div>\n        \n        <div className=\"error-controls\">\n          <h4>Error Testing:</h4>\n          <button onClick={() => setShouldThrow(!shouldThrow)}>\n            {shouldThrow ? 'Fix' : 'Break'} Component\n          </button>\n        </div>\n      </div>\n      \n      {/* HOC Examples */}\n      <div className=\"examples-grid\">\n        {/* Loading HOC */}\n        <section className=\"example-section\">\n          <h3>1. Loading HOC</h3>\n          <UserListWithLoading users={users} isLoading={isLoadingUsers} />\n        </section>\n        \n        {/* Auth HOC */}\n        <section className=\"example-section\">\n          <h3>2. Authentication HOC</h3>\n          <ProtectedAdminPanel user={currentUser} />\n        </section>\n        \n        {/* Data Fetching HOC */}\n        <section className=\"example-section\">\n          <h3>3. Data Fetching HOC</h3>\n          <PostListWithData />\n        </section>\n        \n        {/* Theme HOC */}\n        <section className=\"example-section\">\n          <h3>4. Theme HOC</h3>\n          <ThemedCard \n            title=\"Themed Card\" \n            content=\"This card adapts to the current theme.\" \n            theme={theme}\n          />\n        </section>\n        \n        {/* Analytics HOC */}\n        <section className=\"example-section\">\n          <h3>5. Analytics HOC</h3>\n          <TrackedButton \n            label=\"Track This Click\" \n            onClick={() => alert('Button clicked!')}\n            trackEvent={trackEvent}\n          />\n        </section>\n        \n        {/* Error Boundary HOC */}\n        <section className=\"example-section\">\n          <h3>6. Error Boundary HOC</h3>\n          <SafeBuggyComponent shouldThrow={shouldThrow} />\n        </section>\n        \n        {/* Composed HOCs */}\n        <section className=\"example-section\">\n          <h3>7. Composed HOCs</h3>\n          <FullyEnhancedComponent \n            message=\"This component uses multiple HOCs!\"\n            theme={theme}\n            isLoading={false}\n            trackEvent={trackEvent}\n          />\n        </section>\n      </div>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Higher-Order Components (HOCs)</h1>\n      <p>HOCs are a pattern for reusing component logic by wrapping components with additional functionality.</p>\n      \n      <HOCExamples />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "HOCs មានប្រយោជន៍សម្រាប់ reuse logic ប៉ុន្តែ custom hooks ជាញឹកញាប់ជាជម្រើសដ៏ល្អជាង"
  },
  {
    "id": 18,
    "category": "React",
    "path": "/react/render-props",
    "title": "មេរៀនទី១៨: Render Props Pattern",
    "explanation": "Render Props គឺជា pattern ដែលអនុញ្ញាតឱ្យយើងចែករំលែក code រវាង React components ដោយប្រើ prop ដែលមានតម្លៃជា function។ វាជាវិធីដ៏មានប្រសិទ្ធភាពក្នុងការ reuse component logic។",
    "code": "import React, { useState, useEffect, ReactNode } from 'react';\n\n// 1. Basic Render Props Example - Mouse Tracker\ninterface MousePosition {\n  x: number;\n  y: number;\n}\n\ninterface MouseTrackerProps {\n  render: (mouse: MousePosition) => ReactNode;\n}\n\nconst MouseTracker: React.FC<MouseTrackerProps> = ({ render }) => {\n  const [mouse, setMouse] = useState<MousePosition>({ x: 0, y: 0 });\n  \n  useEffect(() => {\n    const handleMouseMove = (event: MouseEvent) => {\n      setMouse({ x: event.clientX, y: event.clientY });\n    };\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    \n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n  \n  return <div>{render(mouse)}</div>;\n};\n\n// Components that use mouse position\nconst MouseDisplay: React.FC<{ mouse: MousePosition }> = ({ mouse }) => (\n  <div className=\"mouse-display\">\n    <h4>🖱️ Mouse Position</h4>\n    <p>X: {mouse.x}, Y: {mouse.y}</p>\n  </div>\n);\n\nconst MouseFollower: React.FC<{ mouse: MousePosition }> = ({ mouse }) => (\n  <div \n    className=\"mouse-follower\"\n    style={{\n      position: 'fixed',\n      left: mouse.x - 10,\n      top: mouse.y - 10,\n      width: 20,\n      height: 20,\n      backgroundColor: 'red',\n      borderRadius: '50%',\n      pointerEvents: 'none',\n      zIndex: 9999\n    }}\n  />\n);\n\n// 2. Data Fetcher with Render Props\ninterface DataFetcherState<T> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n}\n\ninterface DataFetcherProps<T> {\n  url: string;\n  render: (state: DataFetcherState<T>) => ReactNode;\n  children?: (state: DataFetcherState<T>) => ReactNode;\n}\n\nclass DataFetcher<T> extends React.Component<DataFetcherProps<T>, DataFetcherState<T>> {\n  constructor(props: DataFetcherProps<T>) {\n    super(props);\n    this.state = {\n      data: null,\n      loading: true,\n      error: null\n    };\n  }\n  \n  async componentDidMount() {\n    await this.fetchData();\n  }\n  \n  async componentDidUpdate(prevProps: DataFetcherProps<T>) {\n    if (prevProps.url !== this.props.url) {\n      await this.fetchData();\n    }\n  }\n  \n  fetchData = async () => {\n    this.setState({ loading: true, error: null });\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock data based on URL\n      let mockData: any;\n      if (this.props.url.includes('users')) {\n        mockData = [\n          { id: 1, name: 'John Doe', email: 'john@example.com' },\n          { id: 2, name: 'Jane Smith', email: 'jane@example.com' }\n        ];\n      } else if (this.props.url.includes('posts')) {\n        mockData = [\n          { id: 1, title: 'First Post', content: 'Content of first post' },\n          { id: 2, title: 'Second Post', content: 'Content of second post' }\n        ];\n      } else {\n        throw new Error('Unknown endpoint');\n      }\n      \n      // Simulate random error\n      if (Math.random() > 0.8) {\n        throw new Error('Random API error');\n      }\n      \n      this.setState({ data: mockData, loading: false });\n    } catch (error) {\n      this.setState({ \n        error: error instanceof Error ? error.message : 'Unknown error', \n        loading: false \n      });\n    }\n  };\n  \n  render() {\n    // Support both render prop and children as function\n    const renderFunction = this.props.render || this.props.children;\n    return renderFunction ? renderFunction(this.state) : null;\n  }\n}\n\n// 3. Form Validation with Render Props\ninterface FormField {\n  value: string;\n  error: string | null;\n  touched: boolean;\n}\n\ninterface FormState {\n  [key: string]: FormField;\n}\n\ninterface FormValidatorProps {\n  initialValues: { [key: string]: string };\n  validationRules: { [key: string]: (value: string) => string | null };\n  children: (formProps: {\n    values: FormState;\n    handleChange: (field: string, value: string) => void;\n    handleBlur: (field: string) => void;\n    handleSubmit: (onSubmit: (values: { [key: string]: string }) => void) => (e: React.FormEvent) => void;\n    isValid: boolean;\n    errors: { [key: string]: string | null };\n  }) => ReactNode;\n}\n\nconst FormValidator: React.FC<FormValidatorProps> = ({ \n  initialValues, \n  validationRules, \n  children \n}) => {\n  const [values, setValues] = useState<FormState>(() => {\n    const initialState: FormState = {};\n    Object.keys(initialValues).forEach(key => {\n      initialState[key] = {\n        value: initialValues[key],\n        error: null,\n        touched: false\n      };\n    });\n    return initialState;\n  });\n  \n  const validateField = (field: string, value: string): string | null => {\n    const rule = validationRules[field];\n    return rule ? rule(value) : null;\n  };\n  \n  const handleChange = (field: string, value: string) => {\n    const error = values[field].touched ? validateField(field, value) : null;\n    \n    setValues(prev => ({\n      ...prev,\n      [field]: {\n        ...prev[field],\n        value,\n        error\n      }\n    }));\n  };\n  \n  const handleBlur = (field: string) => {\n    const error = validateField(field, values[field].value);\n    \n    setValues(prev => ({\n      ...prev,\n      [field]: {\n        ...prev[field],\n        touched: true,\n        error\n      }\n    }));\n  };\n  \n  const handleSubmit = (onSubmit: (values: { [key: string]: string }) => void) => {\n    return (e: React.FormEvent) => {\n      e.preventDefault();\n      \n      // Validate all fields\n      const newValues = { ...values };\n      let hasErrors = false;\n      \n      Object.keys(newValues).forEach(field => {\n        const error = validateField(field, newValues[field].value);\n        newValues[field] = {\n          ...newValues[field],\n          touched: true,\n          error\n        };\n        if (error) hasErrors = true;\n      });\n      \n      setValues(newValues);\n      \n      if (!hasErrors) {\n        const submitValues: { [key: string]: string } = {};\n        Object.keys(newValues).forEach(key => {\n          submitValues[key] = newValues[key].value;\n        });\n        onSubmit(submitValues);\n      }\n    };\n  };\n  \n  const isValid = Object.values(values).every(field => !field.error);\n  const errors = Object.keys(values).reduce((acc, key) => {\n    acc[key] = values[key].error;\n    return acc;\n  }, {} as { [key: string]: string | null });\n  \n  return (\n    <>\n      {children({\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isValid,\n        errors\n      })}\n    </>\n  );\n};\n\n// 4. Toggle Component with Render Props\ninterface ToggleProps {\n  initial?: boolean;\n  children: (toggleProps: {\n    on: boolean;\n    toggle: () => void;\n    setOn: (value: boolean) => void;\n    setOff: () => void;\n  }) => ReactNode;\n}\n\nconst Toggle: React.FC<ToggleProps> = ({ initial = false, children }) => {\n  const [on, setOn] = useState(initial);\n  \n  const toggle = () => setOn(prev => !prev);\n  const setOnTrue = () => setOn(true);\n  const setOnFalse = () => setOn(false);\n  \n  return (\n    <>\n      {children({\n        on,\n        toggle,\n        setOn: setOnTrue,\n        setOff: setOnFalse\n      })}\n    </>\n  );\n};\n\n// 5. Window Size Tracker with Render Props\ninterface WindowSize {\n  width: number;\n  height: number;\n}\n\ninterface WindowSizeTrackerProps {\n  children: (size: WindowSize & {\n    isMobile: boolean;\n    isTablet: boolean;\n    isDesktop: boolean;\n  }) => ReactNode;\n}\n\nconst WindowSizeTracker: React.FC<WindowSizeTrackerProps> = ({ children }) => {\n  const [windowSize, setWindowSize] = useState<WindowSize>({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  \n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  const isMobile = windowSize.width < 768;\n  const isTablet = windowSize.width >= 768 && windowSize.width < 1024;\n  const isDesktop = windowSize.width >= 1024;\n  \n  return (\n    <>\n      {children({\n        ...windowSize,\n        isMobile,\n        isTablet,\n        isDesktop\n      })}\n    </>\n  );\n};\n\n// 6. Counter with Render Props\ninterface CounterProps {\n  initial?: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  children: (counterProps: {\n    count: number;\n    increment: () => void;\n    decrement: () => void;\n    reset: () => void;\n    canIncrement: boolean;\n    canDecrement: boolean;\n  }) => ReactNode;\n}\n\nconst Counter: React.FC<CounterProps> = ({ \n  initial = 0, \n  min = -Infinity, \n  max = Infinity, \n  step = 1, \n  children \n}) => {\n  const [count, setCount] = useState(initial);\n  \n  const increment = () => {\n    setCount(prev => Math.min(prev + step, max));\n  };\n  \n  const decrement = () => {\n    setCount(prev => Math.max(prev - step, min));\n  };\n  \n  const reset = () => {\n    setCount(initial);\n  };\n  \n  const canIncrement = count < max;\n  const canDecrement = count > min;\n  \n  return (\n    <>\n      {children({\n        count,\n        increment,\n        decrement,\n        reset,\n        canIncrement,\n        canDecrement\n      })}\n    </>\n  );\n};\n\n// 7. Examples Component\nconst RenderPropsExamples = () => {\n  const [selectedEndpoint, setSelectedEndpoint] = useState('/api/users');\n  \n  // Validation rules for form\n  const validationRules = {\n    name: (value: string) => {\n      if (!value.trim()) return 'Name is required';\n      if (value.length < 2) return 'Name must be at least 2 characters';\n      return null;\n    },\n    email: (value: string) => {\n      if (!value.trim()) return 'Email is required';\n      if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) return 'Invalid email format';\n      return null;\n    },\n    age: (value: string) => {\n      if (!value.trim()) return 'Age is required';\n      const age = parseInt(value);\n      if (isNaN(age) || age < 18 || age > 100) return 'Age must be between 18 and 100';\n      return null;\n    }\n  };\n  \n  return (\n    <div className=\"render-props-examples\">\n      <h2>Render Props Pattern Examples</h2>\n      \n      {/* Mouse Tracker */}\n      <section className=\"example-section\">\n        <h3>1. Mouse Tracker</h3>\n        <div className=\"mouse-tracker-demo\">\n          <MouseTracker\n            render={(mouse) => (\n              <div>\n                <MouseDisplay mouse={mouse} />\n                <p>Move your mouse around to see the coordinates change!</p>\n              </div>\n            )}\n          />\n          <MouseTracker render={(mouse) => <MouseFollower mouse={mouse} />} />\n        </div>\n      </section>\n      \n      {/* Data Fetcher */}\n      <section className=\"example-section\">\n        <h3>2. Data Fetcher</h3>\n        <div className=\"data-fetcher-demo\">\n          <div className=\"endpoint-selector\">\n            <label>Select Endpoint: </label>\n            <select \n              value={selectedEndpoint} \n              onChange={(e) => setSelectedEndpoint(e.target.value)}\n            >\n              <option value=\"/api/users\">Users</option>\n              <option value=\"/api/posts\">Posts</option>\n              <option value=\"/api/invalid\">Invalid Endpoint</option>\n            </select>\n          </div>\n          \n          <DataFetcher\n            url={selectedEndpoint}\n            render={({ data, loading, error }) => {\n              if (loading) return <div className=\"loading\">Loading data...</div>;\n              if (error) return <div className=\"error\">Error: {error}</div>;\n              \n              return (\n                <div className=\"data-display\">\n                  <h4>Fetched Data:</h4>\n                  <pre>{JSON.stringify(data, null, 2)}</pre>\n                </div>\n              );\n            }}\n          />\n        </div>\n      </section>\n      \n      {/* Form Validator */}\n      <section className=\"example-section\">\n        <h3>3. Form Validator</h3>\n        <FormValidator\n          initialValues={{ name: '', email: '', age: '' }}\n          validationRules={validationRules}\n        >\n          {({ values, handleChange, handleBlur, handleSubmit, isValid, errors }) => (\n            <form onSubmit={handleSubmit((values) => {\n              alert(`Form submitted with: ${JSON.stringify(values, null, 2)}`);\n            })}>\n              <div className=\"form-group\">\n                <label>Name:</label>\n                <input\n                  type=\"text\"\n                  value={values.name.value}\n                  onChange={(e) => handleChange('name', e.target.value)}\n                  onBlur={() => handleBlur('name')}\n                  className={errors.name ? 'error' : ''}\n                />\n                {errors.name && <span className=\"error-message\">{errors.name}</span>}\n              </div>\n              \n              <div className=\"form-group\">\n                <label>Email:</label>\n                <input\n                  type=\"email\"\n                  value={values.email.value}\n                  onChange={(e) => handleChange('email', e.target.value)}\n                  onBlur={() => handleBlur('email')}\n                  className={errors.email ? 'error' : ''}\n                />\n                {errors.email && <span className=\"error-message\">{errors.email}</span>}\n              </div>\n              \n              <div className=\"form-group\">\n                <label>Age:</label>\n                <input\n                  type=\"number\"\n                  value={values.age.value}\n                  onChange={(e) => handleChange('age', e.target.value)}\n                  onBlur={() => handleBlur('age')}\n                  className={errors.age ? 'error' : ''}\n                />\n                {errors.age && <span className=\"error-message\">{errors.age}</span>}\n              </div>\n              \n              <button type=\"submit\" disabled={!isValid}>\n                Submit Form\n              </button>\n            </form>\n          )}\n        </FormValidator>\n      </section>\n      \n      {/* Toggle */}\n      <section className=\"example-section\">\n        <h3>4. Toggle Component</h3>\n        <Toggle initial={false}>\n          {({ on, toggle, setOn, setOff }) => (\n            <div className=\"toggle-demo\">\n              <p>Toggle is: <strong>{on ? 'ON' : 'OFF'}</strong></p>\n              <div className=\"toggle-controls\">\n                <button onClick={toggle}>Toggle</button>\n                <button onClick={setOn}>Turn On</button>\n                <button onClick={setOff}>Turn Off</button>\n              </div>\n              \n              {on && (\n                <div className=\"toggle-content\">\n                  <h4>🎉 Content is visible!</h4>\n                  <p>This content only shows when toggle is ON.</p>\n                </div>\n              )}\n            </div>\n          )}\n        </Toggle>\n      </section>\n      \n      {/* Window Size Tracker */}\n      <section className=\"example-section\">\n        <h3>5. Window Size Tracker</h3>\n        <WindowSizeTracker>\n          {({ width, height, isMobile, isTablet, isDesktop }) => (\n            <div className=\"window-size-demo\">\n              <h4>Window Information</h4>\n              <p>Size: {width} x {height}</p>\n              <p>Device Type: \n                {isMobile && ' 📱 Mobile'}\n                {isTablet && ' 📱 Tablet'}\n                {isDesktop && ' 💻 Desktop'}\n              </p>\n              <p>Resize the window to see changes!</p>\n            </div>\n          )}\n        </WindowSizeTracker>\n      </section>\n      \n      {/* Counter */}\n      <section className=\"example-section\">\n        <h3>6. Counter with Limits</h3>\n        <Counter initial={5} min={0} max={10} step={1}>\n          {({ count, increment, decrement, reset, canIncrement, canDecrement }) => (\n            <div className=\"counter-demo\">\n              <h4>Count: {count}</h4>\n              <div className=\"counter-controls\">\n                <button onClick={decrement} disabled={!canDecrement}>\n                  - Decrement\n                </button>\n                <button onClick={increment} disabled={!canIncrement}>\n                  + Increment\n                </button>\n                <button onClick={reset}>\n                  Reset\n                </button>\n              </div>\n              <p>Range: 0 to 10</p>\n            </div>\n          )}\n        </Counter>\n      </section>\n      \n      {/* Multiple Render Props Composition */}\n      <section className=\"example-section\">\n        <h3>7. Composed Render Props</h3>\n        <Toggle>\n          {({ on: showCounter, toggle: toggleCounter }) => (\n            <WindowSizeTracker>\n              {({ isMobile }) => (\n                <div className=\"composed-demo\">\n                  <button onClick={toggleCounter}>\n                    {showCounter ? 'Hide' : 'Show'} Counter\n                  </button>\n                  \n                  {showCounter && (\n                    <Counter initial={0} max={isMobile ? 5 : 20}>\n                      {({ count, increment, decrement, canIncrement }) => (\n                        <div className=\"responsive-counter\">\n                          <h4>Responsive Counter: {count}</h4>\n                          <p>Max value: {isMobile ? '5 (Mobile)' : '20 (Desktop)'}</p>\n                          <div className=\"counter-controls\">\n                            <button onClick={decrement}>-</button>\n                            <button onClick={increment} disabled={!canIncrement}>+</button>\n                          </div>\n                        </div>\n                      )}\n                    </Counter>\n                  )}\n                </div>\n              )}\n            </WindowSizeTracker>\n          )}\n        </Toggle>\n      </section>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Render Props Pattern</h1>\n      <p>Render Props allow components to share logic by passing functions as props.</p>\n      \n      <RenderPropsExamples />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "Render Props pattern មានប្រយោជន៍សម្រាប់ sharing logic ប៉ុន្តែ custom hooks ជាញឹកញាប់ងាយស្រួលប្រើជាង"
  },
  {
    "id": 19,
    "category": "React",
    "path": "/react/compound-components",
    "title": "មេរៀនទី១៩: Compound Components Pattern",
    "explanation": "Compound Components pattern អនុញ្ញាតឱ្យយើងបង្កើត components ដែលធ្វើការជាមួយគ្នាដើម្បីបង្កើត UI ដែលស្មុគស្មាញ។ វាផ្តល់នូវ flexibility និង reusability ខ្ពស់។",
    "code": "import React, { createContext, useContext, useState, ReactNode, Children, cloneElement, isValidElement } from 'react';\n\n// 1. Basic Compound Component - Tabs\ninterface TabsContextType {\n  activeTab: string;\n  setActiveTab: (tab: string) => void;\n}\n\nconst TabsContext = createContext<TabsContextType | null>(null);\n\nconst useTabs = () => {\n  const context = useContext(TabsContext);\n  if (!context) {\n    throw new Error('Tabs compound components must be used within Tabs');\n  }\n  return context;\n};\n\n// Main Tabs component\ninterface TabsProps {\n  children: ReactNode;\n  defaultTab?: string;\n  onChange?: (tab: string) => void;\n}\n\nconst Tabs: React.FC<TabsProps> & {\n  List: typeof TabsList;\n  Tab: typeof Tab;\n  Panels: typeof TabsPanels;\n  Panel: typeof TabPanel;\n} = ({ children, defaultTab, onChange }) => {\n  const [activeTab, setActiveTab] = useState(defaultTab || '');\n  \n  const handleTabChange = (tab: string) => {\n    setActiveTab(tab);\n    onChange?.(tab);\n  };\n  \n  return (\n    <TabsContext.Provider value={{ activeTab, setActiveTab: handleTabChange }}>\n      <div className=\"tabs\">\n        {children}\n      </div>\n    </TabsContext.Provider>\n  );\n};\n\n// Tabs List component\ninterface TabsListProps {\n  children: ReactNode;\n}\n\nconst TabsList: React.FC<TabsListProps> = ({ children }) => {\n  return (\n    <div className=\"tabs-list\" role=\"tablist\">\n      {children}\n    </div>\n  );\n};\n\n// Individual Tab component\ninterface TabProps {\n  value: string;\n  children: ReactNode;\n  disabled?: boolean;\n}\n\nconst Tab: React.FC<TabProps> = ({ value, children, disabled = false }) => {\n  const { activeTab, setActiveTab } = useTabs();\n  const isActive = activeTab === value;\n  \n  const handleClick = () => {\n    if (!disabled) {\n      setActiveTab(value);\n    }\n  };\n  \n  return (\n    <button\n      className={`tab ${isActive ? 'active' : ''} ${disabled ? 'disabled' : ''}`}\n      onClick={handleClick}\n      disabled={disabled}\n      role=\"tab\"\n      aria-selected={isActive}\n      aria-controls={`panel-${value}`}\n    >\n      {children}\n    </button>\n  );\n};\n\n// Tabs Panels container\ninterface TabsPanelsProps {\n  children: ReactNode;\n}\n\nconst TabsPanels: React.FC<TabsPanelsProps> = ({ children }) => {\n  return (\n    <div className=\"tabs-panels\">\n      {children}\n    </div>\n  );\n};\n\n// Individual Tab Panel\ninterface TabPanelProps {\n  value: string;\n  children: ReactNode;\n}\n\nconst TabPanel: React.FC<TabPanelProps> = ({ value, children }) => {\n  const { activeTab } = useTabs();\n  const isActive = activeTab === value;\n  \n  if (!isActive) return null;\n  \n  return (\n    <div\n      className=\"tab-panel\"\n      role=\"tabpanel\"\n      id={`panel-${value}`}\n      aria-labelledby={`tab-${value}`}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Attach compound components\nTabs.List = TabsList;\nTabs.Tab = Tab;\nTabs.Panels = TabsPanels;\nTabs.Panel = TabPanel;\n\n// 2. Modal Compound Component\ninterface ModalContextType {\n  isOpen: boolean;\n  openModal: () => void;\n  closeModal: () => void;\n}\n\nconst ModalContext = createContext<ModalContextType | null>(null);\n\nconst useModal = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('Modal compound components must be used within Modal');\n  }\n  return context;\n};\n\n// Main Modal component\ninterface ModalProps {\n  children: ReactNode;\n  defaultOpen?: boolean;\n}\n\nconst Modal: React.FC<ModalProps> & {\n  Trigger: typeof ModalTrigger;\n  Content: typeof ModalContent;\n  Header: typeof ModalHeader;\n  Body: typeof ModalBody;\n  Footer: typeof ModalFooter;\n  Close: typeof ModalClose;\n} = ({ children, defaultOpen = false }) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n  \n  const openModal = () => setIsOpen(true);\n  const closeModal = () => setIsOpen(false);\n  \n  return (\n    <ModalContext.Provider value={{ isOpen, openModal, closeModal }}>\n      {children}\n    </ModalContext.Provider>\n  );\n};\n\n// Modal Trigger\ninterface ModalTriggerProps {\n  children: ReactNode;\n  asChild?: boolean;\n}\n\nconst ModalTrigger: React.FC<ModalTriggerProps> = ({ children, asChild = false }) => {\n  const { openModal } = useModal();\n  \n  if (asChild && isValidElement(children)) {\n    return cloneElement(children, {\n      onClick: (e: React.MouseEvent) => {\n        children.props.onClick?.(e);\n        openModal();\n      }\n    });\n  }\n  \n  return (\n    <button onClick={openModal} className=\"modal-trigger\">\n      {children}\n    </button>\n  );\n};\n\n// Modal Content\ninterface ModalContentProps {\n  children: ReactNode;\n  size?: 'small' | 'medium' | 'large';\n}\n\nconst ModalContent: React.FC<ModalContentProps> = ({ children, size = 'medium' }) => {\n  const { isOpen, closeModal } = useModal();\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"modal-overlay\" onClick={closeModal}>\n      <div \n        className={`modal-content modal-${size}`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\n// Modal Header\ninterface ModalHeaderProps {\n  children: ReactNode;\n}\n\nconst ModalHeader: React.FC<ModalHeaderProps> = ({ children }) => {\n  return (\n    <div className=\"modal-header\">\n      {children}\n    </div>\n  );\n};\n\n// Modal Body\ninterface ModalBodyProps {\n  children: ReactNode;\n}\n\nconst ModalBody: React.FC<ModalBodyProps> = ({ children }) => {\n  return (\n    <div className=\"modal-body\">\n      {children}\n    </div>\n  );\n};\n\n// Modal Footer\ninterface ModalFooterProps {\n  children: ReactNode;\n}\n\nconst ModalFooter: React.FC<ModalFooterProps> = ({ children }) => {\n  return (\n    <div className=\"modal-footer\">\n      {children}\n    </div>\n  );\n};\n\n// Modal Close\ninterface ModalCloseProps {\n  children?: ReactNode;\n  asChild?: boolean;\n}\n\nconst ModalClose: React.FC<ModalCloseProps> = ({ children, asChild = false }) => {\n  const { closeModal } = useModal();\n  \n  if (asChild && isValidElement(children)) {\n    return cloneElement(children, {\n      onClick: (e: React.MouseEvent) => {\n        children.props.onClick?.(e);\n        closeModal();\n      }\n    });\n  }\n  \n  return (\n    <button onClick={closeModal} className=\"modal-close\">\n      {children || '×'}\n    </button>\n  );\n};\n\n// Attach compound components\nModal.Trigger = ModalTrigger;\nModal.Content = ModalContent;\nModal.Header = ModalHeader;\nModal.Body = ModalBody;\nModal.Footer = ModalFooter;\nModal.Close = ModalClose;\n\n// 3. Accordion Compound Component\ninterface AccordionContextType {\n  openItems: string[];\n  toggleItem: (value: string) => void;\n  multiple: boolean;\n}\n\nconst AccordionContext = createContext<AccordionContextType | null>(null);\n\nconst useAccordion = () => {\n  const context = useContext(AccordionContext);\n  if (!context) {\n    throw new Error('Accordion compound components must be used within Accordion');\n  }\n  return context;\n};\n\n// Main Accordion component\ninterface AccordionProps {\n  children: ReactNode;\n  multiple?: boolean;\n  defaultOpen?: string[];\n}\n\nconst Accordion: React.FC<AccordionProps> & {\n  Item: typeof AccordionItem;\n  Trigger: typeof AccordionTrigger;\n  Content: typeof AccordionContent;\n} = ({ children, multiple = false, defaultOpen = [] }) => {\n  const [openItems, setOpenItems] = useState<string[]>(defaultOpen);\n  \n  const toggleItem = (value: string) => {\n    setOpenItems(prev => {\n      if (multiple) {\n        return prev.includes(value)\n          ? prev.filter(item => item !== value)\n          : [...prev, value];\n      } else {\n        return prev.includes(value) ? [] : [value];\n      }\n    });\n  };\n  \n  return (\n    <AccordionContext.Provider value={{ openItems, toggleItem, multiple }}>\n      <div className=\"accordion\">\n        {children}\n      </div>\n    </AccordionContext.Provider>\n  );\n};\n\n// Accordion Item\ninterface AccordionItemProps {\n  children: ReactNode;\n  value: string;\n}\n\nconst AccordionItem: React.FC<AccordionItemProps> = ({ children, value }) => {\n  return (\n    <div className=\"accordion-item\" data-value={value}>\n      {children}\n    </div>\n  );\n};\n\n// Accordion Trigger\ninterface AccordionTriggerProps {\n  children: ReactNode;\n  value: string;\n}\n\nconst AccordionTrigger: React.FC<AccordionTriggerProps> = ({ children, value }) => {\n  const { openItems, toggleItem } = useAccordion();\n  const isOpen = openItems.includes(value);\n  \n  return (\n    <button\n      className={`accordion-trigger ${isOpen ? 'open' : ''}`}\n      onClick={() => toggleItem(value)}\n      aria-expanded={isOpen}\n    >\n      {children}\n      <span className=\"accordion-icon\">{isOpen ? '−' : '+'}</span>\n    </button>\n  );\n};\n\n// Accordion Content\ninterface AccordionContentProps {\n  children: ReactNode;\n  value: string;\n}\n\nconst AccordionContent: React.FC<AccordionContentProps> = ({ children, value }) => {\n  const { openItems } = useAccordion();\n  const isOpen = openItems.includes(value);\n  \n  return (\n    <div className={`accordion-content ${isOpen ? 'open' : ''}`}>\n      <div className=\"accordion-content-inner\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\n// Attach compound components\nAccordion.Item = AccordionItem;\nAccordion.Trigger = AccordionTrigger;\nAccordion.Content = AccordionContent;\n\n// 4. Card Compound Component\ninterface CardContextType {\n  variant: 'default' | 'outlined' | 'elevated';\n}\n\nconst CardContext = createContext<CardContextType>({ variant: 'default' });\n\nconst useCard = () => useContext(CardContext);\n\n// Main Card component\ninterface CardProps {\n  children: ReactNode;\n  variant?: 'default' | 'outlined' | 'elevated';\n  className?: string;\n}\n\nconst Card: React.FC<CardProps> & {\n  Header: typeof CardHeader;\n  Body: typeof CardBody;\n  Footer: typeof CardFooter;\n  Image: typeof CardImage;\n  Title: typeof CardTitle;\n  Description: typeof CardDescription;\n} = ({ children, variant = 'default', className = '' }) => {\n  return (\n    <CardContext.Provider value={{ variant }}>\n      <div className={`card card-${variant} ${className}`}>\n        {children}\n      </div>\n    </CardContext.Provider>\n  );\n};\n\n// Card Header\ninterface CardHeaderProps {\n  children: ReactNode;\n}\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ children }) => {\n  return (\n    <div className=\"card-header\">\n      {children}\n    </div>\n  );\n};\n\n// Card Body\ninterface CardBodyProps {\n  children: ReactNode;\n}\n\nconst CardBody: React.FC<CardBodyProps> = ({ children }) => {\n  return (\n    <div className=\"card-body\">\n      {children}\n    </div>\n  );\n};\n\n// Card Footer\ninterface CardFooterProps {\n  children: ReactNode;\n}\n\nconst CardFooter: React.FC<CardFooterProps> = ({ children }) => {\n  return (\n    <div className=\"card-footer\">\n      {children}\n    </div>\n  );\n};\n\n// Card Image\ninterface CardImageProps {\n  src: string;\n  alt: string;\n  height?: string;\n}\n\nconst CardImage: React.FC<CardImageProps> = ({ src, alt, height = '200px' }) => {\n  return (\n    <div className=\"card-image\" style={{ height }}>\n      <img src={src} alt={alt} />\n    </div>\n  );\n};\n\n// Card Title\ninterface CardTitleProps {\n  children: ReactNode;\n  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nconst CardTitle: React.FC<CardTitleProps> = ({ children, as: Component = 'h3' }) => {\n  return (\n    <Component className=\"card-title\">\n      {children}\n    </Component>\n  );\n};\n\n// Card Description\ninterface CardDescriptionProps {\n  children: ReactNode;\n}\n\nconst CardDescription: React.FC<CardDescriptionProps> = ({ children }) => {\n  return (\n    <p className=\"card-description\">\n      {children}\n    </p>\n  );\n};\n\n// Attach compound components\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\nCard.Image = CardImage;\nCard.Title = CardTitle;\nCard.Description = CardDescription;\n\n// 5. Examples Component\nconst CompoundComponentsExamples = () => {\n  const [selectedTab, setSelectedTab] = useState('tab1');\n  \n  return (\n    <div className=\"compound-components-examples\">\n      <h2>Compound Components Pattern Examples</h2>\n      \n      {/* Tabs Example */}\n      <section className=\"example-section\">\n        <h3>1. Tabs Component</h3>\n        <Tabs defaultTab=\"tab1\" onChange={setSelectedTab}>\n          <Tabs.List>\n            <Tabs.Tab value=\"tab1\">Dashboard</Tabs.Tab>\n            <Tabs.Tab value=\"tab2\">Profile</Tabs.Tab>\n            <Tabs.Tab value=\"tab3\">Settings</Tabs.Tab>\n            <Tabs.Tab value=\"tab4\" disabled>Disabled</Tabs.Tab>\n          </Tabs.List>\n          \n          <Tabs.Panels>\n            <Tabs.Panel value=\"tab1\">\n              <h4>📊 Dashboard</h4>\n              <p>Welcome to your dashboard! Here you can see an overview of your account.</p>\n              <div className=\"dashboard-stats\">\n                <div className=\"stat\">Total Users: 1,234</div>\n                <div className=\"stat\">Revenue: $12,345</div>\n                <div className=\"stat\">Orders: 567</div>\n              </div>\n            </Tabs.Panel>\n            \n            <Tabs.Panel value=\"tab2\">\n              <h4>👤 Profile</h4>\n              <p>Manage your profile information here.</p>\n              <div className=\"profile-form\">\n                <input type=\"text\" placeholder=\"Full Name\" />\n                <input type=\"email\" placeholder=\"Email\" />\n                <button>Update Profile</button>\n              </div>\n            </Tabs.Panel>\n            \n            <Tabs.Panel value=\"tab3\">\n              <h4>⚙️ Settings</h4>\n              <p>Configure your application settings.</p>\n              <div className=\"settings-options\">\n                <label>\n                  <input type=\"checkbox\" /> Enable notifications\n                </label>\n                <label>\n                  <input type=\"checkbox\" /> Dark mode\n                </label>\n                <label>\n                  <input type=\"checkbox\" /> Auto-save\n                </label>\n              </div>\n            </Tabs.Panel>\n          </Tabs.Panels>\n        </Tabs>\n        \n        <p>Selected tab: <strong>{selectedTab}</strong></p>\n      </section>\n      \n      {/* Modal Example */}\n      <section className=\"example-section\">\n        <h3>2. Modal Component</h3>\n        <div className=\"modal-examples\">\n          <Modal>\n            <Modal.Trigger>\n              Open Basic Modal\n            </Modal.Trigger>\n            <Modal.Content size=\"medium\">\n              <Modal.Header>\n                <h3>Basic Modal</h3>\n                <Modal.Close />\n              </Modal.Header>\n              <Modal.Body>\n                <p>This is a basic modal example using compound components.</p>\n                <p>You can put any content here!</p>\n              </Modal.Body>\n              <Modal.Footer>\n                <Modal.Close asChild>\n                  <button className=\"btn-secondary\">Cancel</button>\n                </Modal.Close>\n                <button className=\"btn-primary\">Confirm</button>\n              </Modal.Footer>\n            </Modal.Content>\n          </Modal>\n          \n          <Modal>\n            <Modal.Trigger asChild>\n              <button className=\"btn-danger\">Delete Item</button>\n            </Modal.Trigger>\n            <Modal.Content size=\"small\">\n              <Modal.Header>\n                <h3>⚠️ Confirm Deletion</h3>\n                <Modal.Close />\n              </Modal.Header>\n              <Modal.Body>\n                <p>Are you sure you want to delete this item? This action cannot be undone.</p>\n              </Modal.Body>\n              <Modal.Footer>\n                <Modal.Close asChild>\n                  <button className=\"btn-secondary\">Cancel</button>\n                </Modal.Close>\n                <Modal.Close asChild>\n                  <button className=\"btn-danger\">Delete</button>\n                </Modal.Close>\n              </Modal.Footer>\n            </Modal.Content>\n          </Modal>\n        </div>\n      </section>\n      \n      {/* Accordion Example */}\n      <section className=\"example-section\">\n        <h3>3. Accordion Component</h3>\n        \n        <h4>Single Open (Default)</h4>\n        <Accordion defaultOpen={['item1']}>\n          <Accordion.Item value=\"item1\">\n            <Accordion.Trigger value=\"item1\">\n              What is React?\n            </Accordion.Trigger>\n            <Accordion.Content value=\"item1\">\n              <p>React is a JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called \"components\".</p>\n            </Accordion.Content>\n          </Accordion.Item>\n          \n          <Accordion.Item value=\"item2\">\n            <Accordion.Trigger value=\"item2\">\n              What are Compound Components?\n            </Accordion.Trigger>\n            <Accordion.Content value=\"item2\">\n              <p>Compound Components is a pattern where components work together to form a complete UI. They share an implicit state that lets them communicate with each other in the background.</p>\n            </Accordion.Content>\n          </Accordion.Item>\n          \n          <Accordion.Item value=\"item3\">\n            <Accordion.Trigger value=\"item3\">\n              Why use this pattern?\n            </Accordion.Trigger>\n            <Accordion.Content value=\"item3\">\n              <p>This pattern provides flexibility and reusability. It allows users to compose components in different ways while maintaining a clean and intuitive API.</p>\n            </Accordion.Content>\n          </Accordion.Item>\n        </Accordion>\n        \n        <h4>Multiple Open</h4>\n        <Accordion multiple defaultOpen={['faq1', 'faq2']}>\n          <Accordion.Item value=\"faq1\">\n            <Accordion.Trigger value=\"faq1\">\n              Can I open multiple items?\n            </Accordion.Trigger>\n            <Accordion.Content value=\"faq1\">\n              <p>Yes! When the multiple prop is set to true, you can have multiple accordion items open at the same time.</p>\n            </Accordion.Content>\n          </Accordion.Item>\n          \n          <Accordion.Item value=\"faq2\">\n            <Accordion.Trigger value=\"faq2\">\n              How does the state work?\n            </Accordion.Trigger>\n            <Accordion.Content value=\"faq2\">\n              <p>The accordion uses React Context to share state between all the compound components. Each item knows whether it should be open or closed.</p>\n            </Accordion.Content>\n          </Accordion.Item>\n          \n          <Accordion.Item value=\"faq3\">\n            <Accordion.Trigger value=\"faq3\">\n              Is it accessible?\n            </Accordion.Trigger>\n            <Accordion.Content value=\"faq3\">\n              <p>Yes! The accordion includes proper ARIA attributes like aria-expanded to ensure it's accessible to screen readers.</p>\n            </Accordion.Content>\n          </Accordion.Item>\n        </Accordion>\n      </section>\n      \n      {/* Card Example */}\n      <section className=\"example-section\">\n        <h3>4. Card Component</h3>\n        <div className=\"cards-grid\">\n          <Card variant=\"default\">\n            <Card.Image \n              src=\"https://picsum.photos/300/200?random=1\" \n              alt=\"Random image\" \n            />\n            <Card.Body>\n              <Card.Title>Default Card</Card.Title>\n              <Card.Description>\n                This is a default card with an image, title, and description.\n              </Card.Description>\n            </Card.Body>\n            <Card.Footer>\n              <button className=\"btn-primary\">Learn More</button>\n            </Card.Footer>\n          </Card>\n          \n          <Card variant=\"outlined\">\n            <Card.Header>\n              <Card.Title as=\"h4\">Outlined Card</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Description>\n                This card has an outlined variant with a header section.\n              </Card.Description>\n              <p>You can add any content here, including multiple paragraphs.</p>\n            </Card.Body>\n            <Card.Footer>\n              <button className=\"btn-secondary\">Action</button>\n              <button className=\"btn-primary\">Primary</button>\n            </Card.Footer>\n          </Card>\n          \n          <Card variant=\"elevated\">\n            <Card.Body>\n              <Card.Title>Elevated Card</Card.Title>\n              <Card.Description>\n                This elevated card has a shadow effect and contains only body content.\n              </Card.Description>\n              <div className=\"card-stats\">\n                <div className=\"stat\">\n                  <strong>123</strong>\n                  <span>Views</span>\n                </div>\n                <div className=\"stat\">\n                  <strong>45</strong>\n                  <span>Likes</span>\n                </div>\n                <div className=\"stat\">\n                  <strong>6</strong>\n                  <span>Comments</span>\n                </div>\n              </div>\n            </Card.Body>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Compound Components Pattern</h1>\n      <p>Compound components work together to form a complete UI while sharing implicit state.</p>\n      \n      <CompoundComponentsExamples />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "Compound Components pattern ផ្តល់នូវ flexibility ខ្ពស់ និងធ្វើឱ្យ API ងាយស្រួលប្រើ ប៉ុន្តែអាចស្មុគស្មាញក្នុងការ implement"
  },
  {
    "id": 20,
    "category": "React",
    "path": "/react/testing",
    "title": "មេរៀនទី២០: Testing React Components",
    "explanation": "Testing គឺជាផ្នែកសំខាន់នៃការអភិវឌ្ឍន៍ React applications។ យើងនឹងរៀនអំពី unit testing, integration testing, និង testing best practices ដោយប្រើ Jest និង React Testing Library។",
    "code": "import React, { useState, useEffect } from 'react';\n\n// Components to test\n\n// 1. Simple Button Component\ninterface ButtonProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n  disabled?: boolean;\n  variant?: 'primary' | 'secondary' | 'danger';\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  children,\n  onClick,\n  disabled = false,\n  variant = 'primary',\n  size = 'medium'\n}) => {\n  return (\n    <button\n      className={`btn btn-${variant} btn-${size}`}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid=\"button\"\n    >\n      {children}\n    </button>\n  );\n};\n\n// 2. Counter Component\ninterface CounterProps {\n  initialValue?: number;\n  min?: number;\n  max?: number;\n  onCountChange?: (count: number) => void;\n}\n\nexport const Counter: React.FC<CounterProps> = ({\n  initialValue = 0,\n  min = -Infinity,\n  max = Infinity,\n  onCountChange\n}) => {\n  const [count, setCount] = useState(initialValue);\n  \n  const increment = () => {\n    const newCount = Math.min(count + 1, max);\n    setCount(newCount);\n    onCountChange?.(newCount);\n  };\n  \n  const decrement = () => {\n    const newCount = Math.max(count - 1, min);\n    setCount(newCount);\n    onCountChange?.(newCount);\n  };\n  \n  const reset = () => {\n    setCount(initialValue);\n    onCountChange?.(initialValue);\n  };\n  \n  return (\n    <div className=\"counter\" data-testid=\"counter\">\n      <h3>Counter: <span data-testid=\"count-value\">{count}</span></h3>\n      <div className=\"counter-controls\">\n        <button \n          onClick={decrement} \n          disabled={count <= min}\n          data-testid=\"decrement-btn\"\n        >\n          -\n        </button>\n        <button \n          onClick={increment} \n          disabled={count >= max}\n          data-testid=\"increment-btn\"\n        >\n          +\n        </button>\n        <button onClick={reset} data-testid=\"reset-btn\">\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// 3. User List Component\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  active: boolean;\n}\n\ninterface UserListProps {\n  users: User[];\n  onUserToggle?: (userId: number) => void;\n  onUserDelete?: (userId: number) => void;\n  loading?: boolean;\n  error?: string | null;\n}\n\nexport const UserList: React.FC<UserListProps> = ({\n  users,\n  onUserToggle,\n  onUserDelete,\n  loading = false,\n  error = null\n}) => {\n  if (loading) {\n    return <div data-testid=\"loading\">Loading users...</div>;\n  }\n  \n  if (error) {\n    return <div data-testid=\"error\" className=\"error\">{error}</div>;\n  }\n  \n  if (users.length === 0) {\n    return <div data-testid=\"empty-state\">No users found</div>;\n  }\n  \n  return (\n    <div className=\"user-list\" data-testid=\"user-list\">\n      <h3>Users ({users.length})</h3>\n      {users.map(user => (\n        <div \n          key={user.id} \n          className={`user-item ${user.active ? 'active' : 'inactive'}`}\n          data-testid={`user-${user.id}`}\n        >\n          <div className=\"user-info\">\n            <h4>{user.name}</h4>\n            <p>{user.email}</p>\n            <span className={`status ${user.active ? 'active' : 'inactive'}`}>\n              {user.active ? 'Active' : 'Inactive'}\n            </span>\n          </div>\n          <div className=\"user-actions\">\n            <button \n              onClick={() => onUserToggle?.(user.id)}\n              data-testid={`toggle-${user.id}`}\n            >\n              {user.active ? 'Deactivate' : 'Activate'}\n            </button>\n            <button \n              onClick={() => onUserDelete?.(user.id)}\n              data-testid={`delete-${user.id}`}\n              className=\"btn-danger\"\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// 4. Search Component\ninterface SearchProps {\n  onSearch: (query: string) => void;\n  placeholder?: string;\n  debounceMs?: number;\n}\n\nexport const Search: React.FC<SearchProps> = ({\n  onSearch,\n  placeholder = 'Search...',\n  debounceMs = 300\n}) => {\n  const [query, setQuery] = useState('');\n  \n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onSearch(query);\n    }, debounceMs);\n    \n    return () => clearTimeout(timer);\n  }, [query, onSearch, debounceMs]);\n  \n  const handleClear = () => {\n    setQuery('');\n  };\n  \n  return (\n    <div className=\"search\" data-testid=\"search\">\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder={placeholder}\n        data-testid=\"search-input\"\n      />\n      {query && (\n        <button \n          onClick={handleClear}\n          data-testid=\"clear-btn\"\n          className=\"clear-btn\"\n        >\n          Clear\n        </button>\n      )}\n    </div>\n  );\n};\n\n// 5. Form Component\ninterface FormData {\n  name: string;\n  email: string;\n  message: string;\n}\n\ninterface ContactFormProps {\n  onSubmit: (data: FormData) => void;\n  loading?: boolean;\n}\n\nexport const ContactForm: React.FC<ContactFormProps> = ({ onSubmit, loading = false }) => {\n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    email: '',\n    message: ''\n  });\n  \n  const [errors, setErrors] = useState<Partial<FormData>>({});\n  \n  const validateForm = (): boolean => {\n    const newErrors: Partial<FormData> = {};\n    \n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    }\n    \n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = 'Invalid email format';\n    }\n    \n    if (!formData.message.trim()) {\n      newErrors.message = 'Message is required';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      onSubmit(formData);\n    }\n  };\n  \n  const handleChange = (field: keyof FormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} data-testid=\"contact-form\">\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          value={formData.name}\n          onChange={(e) => handleChange('name', e.target.value)}\n          data-testid=\"name-input\"\n          className={errors.name ? 'error' : ''}\n        />\n        {errors.name && (\n          <span className=\"error-message\" data-testid=\"name-error\">\n            {errors.name}\n          </span>\n        )}\n      </div>\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          value={formData.email}\n          onChange={(e) => handleChange('email', e.target.value)}\n          data-testid=\"email-input\"\n          className={errors.email ? 'error' : ''}\n        />\n        {errors.email && (\n          <span className=\"error-message\" data-testid=\"email-error\">\n            {errors.email}\n          </span>\n        )}\n      </div>\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"message\">Message:</label>\n        <textarea\n          id=\"message\"\n          value={formData.message}\n          onChange={(e) => handleChange('message', e.target.value)}\n          data-testid=\"message-input\"\n          className={errors.message ? 'error' : ''}\n          rows={4}\n        />\n        {errors.message && (\n          <span className=\"error-message\" data-testid=\"message-error\">\n            {errors.message}\n          </span>\n        )}\n      </div>\n      \n      <button \n        type=\"submit\" \n        disabled={loading}\n        data-testid=\"submit-btn\"\n      >\n        {loading ? 'Submitting...' : 'Submit'}\n      </button>\n    </form>\n  );\n};\n\n// 6. Async Data Component\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport const PostList: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Mock data\n        const mockPosts: Post[] = [\n          { id: 1, title: 'First Post', body: 'This is the first post content.' },\n          { id: 2, title: 'Second Post', body: 'This is the second post content.' },\n          { id: 3, title: 'Third Post', body: 'This is the third post content.' }\n        ];\n        \n        setPosts(mockPosts);\n      } catch (err) {\n        setError('Failed to fetch posts');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchPosts();\n  }, []);\n  \n  if (loading) {\n    return <div data-testid=\"posts-loading\">Loading posts...</div>;\n  }\n  \n  if (error) {\n    return <div data-testid=\"posts-error\" className=\"error\">{error}</div>;\n  }\n  \n  return (\n    <div className=\"post-list\" data-testid=\"post-list\">\n      <h3>Posts</h3>\n      {posts.map(post => (\n        <article key={post.id} data-testid={`post-${post.id}`} className=\"post\">\n          <h4>{post.title}</h4>\n          <p>{post.body}</p>\n        </article>\n      ))}\n    </div>\n  );\n};\n\n// Test Examples (These would normally be in separate .test.tsx files)\n\n/*\n// Button.test.tsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from './Button';\n\ndescribe('Button Component', () => {\n  test('renders button with text', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();\n  });\n  \n  test('calls onClick when clicked', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    fireEvent.click(screen.getByRole('button'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n  \n  test('is disabled when disabled prop is true', () => {\n    render(<Button disabled>Click me</Button>);\n    expect(screen.getByRole('button')).toBeDisabled();\n  });\n  \n  test('applies correct CSS classes', () => {\n    render(<Button variant=\"danger\" size=\"large\">Delete</Button>);\n    const button = screen.getByRole('button');\n    expect(button).toHaveClass('btn', 'btn-danger', 'btn-large');\n  });\n});\n\n// Counter.test.tsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Counter } from './Counter';\n\ndescribe('Counter Component', () => {\n  test('renders with initial value', () => {\n    render(<Counter initialValue={5} />);\n    expect(screen.getByTestId('count-value')).toHaveTextContent('5');\n  });\n  \n  test('increments count when increment button is clicked', () => {\n    render(<Counter initialValue={0} />);\n    \n    fireEvent.click(screen.getByTestId('increment-btn'));\n    expect(screen.getByTestId('count-value')).toHaveTextContent('1');\n  });\n  \n  test('decrements count when decrement button is clicked', () => {\n    render(<Counter initialValue={1} />);\n    \n    fireEvent.click(screen.getByTestId('decrement-btn'));\n    expect(screen.getByTestId('count-value')).toHaveTextContent('0');\n  });\n  \n  test('resets to initial value when reset is clicked', () => {\n    const onCountChange = jest.fn();\n    render(<Counter initialValue={10} onCountChange={onCountChange} />);\n    \n    // Change the count\n    fireEvent.click(screen.getByTestId('increment-btn'));\n    expect(screen.getByTestId('count-value')).toHaveTextContent('11');\n    \n    // Reset\n    fireEvent.click(screen.getByTestId('reset-btn'));\n    expect(screen.getByTestId('count-value')).toHaveTextContent('10');\n    expect(onCountChange).toHaveBeenLastCalledWith(10);\n  });\n  \n  test('respects min and max limits', () => {\n    render(<Counter initialValue={5} min={0} max={10} />);\n    \n    // Test max limit\n    for (let i = 0; i < 10; i++) {\n      fireEvent.click(screen.getByTestId('increment-btn'));\n    }\n    expect(screen.getByTestId('count-value')).toHaveTextContent('10');\n    expect(screen.getByTestId('increment-btn')).toBeDisabled();\n    \n    // Test min limit\n    for (let i = 0; i < 15; i++) {\n      fireEvent.click(screen.getByTestId('decrement-btn'));\n    }\n    expect(screen.getByTestId('count-value')).toHaveTextContent('0');\n    expect(screen.getByTestId('decrement-btn')).toBeDisabled();\n  });\n});\n\n// UserList.test.tsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { UserList } from './UserList';\n\nconst mockUsers = [\n  { id: 1, name: 'John Doe', email: 'john@example.com', active: true },\n  { id: 2, name: 'Jane Smith', email: 'jane@example.com', active: false }\n];\n\ndescribe('UserList Component', () => {\n  test('renders loading state', () => {\n    render(<UserList users={[]} loading={true} />);\n    expect(screen.getByTestId('loading')).toBeInTheDocument();\n  });\n  \n  test('renders error state', () => {\n    render(<UserList users={[]} error=\"Failed to load users\" />);\n    expect(screen.getByTestId('error')).toHaveTextContent('Failed to load users');\n  });\n  \n  test('renders empty state', () => {\n    render(<UserList users={[]} />);\n    expect(screen.getByTestId('empty-state')).toHaveTextContent('No users found');\n  });\n  \n  test('renders user list', () => {\n    render(<UserList users={mockUsers} />);\n    \n    expect(screen.getByText('Users (2)')).toBeInTheDocument();\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n    expect(screen.getByText('Jane Smith')).toBeInTheDocument();\n  });\n  \n  test('calls onUserToggle when toggle button is clicked', () => {\n    const onUserToggle = jest.fn();\n    render(<UserList users={mockUsers} onUserToggle={onUserToggle} />);\n    \n    fireEvent.click(screen.getByTestId('toggle-1'));\n    expect(onUserToggle).toHaveBeenCalledWith(1);\n  });\n  \n  test('calls onUserDelete when delete button is clicked', () => {\n    const onUserDelete = jest.fn();\n    render(<UserList users={mockUsers} onUserDelete={onUserDelete} />);\n    \n    fireEvent.click(screen.getByTestId('delete-2'));\n    expect(onUserDelete).toHaveBeenCalledWith(2);\n  });\n});\n\n// Search.test.tsx\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { Search } from './Search';\n\njest.useFakeTimers();\n\ndescribe('Search Component', () => {\n  test('renders search input', () => {\n    const onSearch = jest.fn();\n    render(<Search onSearch={onSearch} />);\n    \n    expect(screen.getByTestId('search-input')).toBeInTheDocument();\n  });\n  \n  test('calls onSearch with debounced value', async () => {\n    const onSearch = jest.fn();\n    render(<Search onSearch={onSearch} debounceMs={300} />);\n    \n    const input = screen.getByTestId('search-input');\n    fireEvent.change(input, { target: { value: 'test query' } });\n    \n    // Should not call immediately\n    expect(onSearch).not.toHaveBeenCalled();\n    \n    // Fast-forward time\n    jest.advanceTimersByTime(300);\n    \n    expect(onSearch).toHaveBeenCalledWith('test query');\n  });\n  \n  test('shows clear button when there is text', () => {\n    const onSearch = jest.fn();\n    render(<Search onSearch={onSearch} />);\n    \n    const input = screen.getByTestId('search-input');\n    fireEvent.change(input, { target: { value: 'test' } });\n    \n    expect(screen.getByTestId('clear-btn')).toBeInTheDocument();\n  });\n  \n  test('clears input when clear button is clicked', () => {\n    const onSearch = jest.fn();\n    render(<Search onSearch={onSearch} />);\n    \n    const input = screen.getByTestId('search-input');\n    fireEvent.change(input, { target: { value: 'test' } });\n    \n    fireEvent.click(screen.getByTestId('clear-btn'));\n    \n    expect(input).toHaveValue('');\n  });\n});\n\n// ContactForm.test.tsx\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { ContactForm } from './ContactForm';\n\ndescribe('ContactForm Component', () => {\n  test('renders form fields', () => {\n    const onSubmit = jest.fn();\n    render(<ContactForm onSubmit={onSubmit} />);\n    \n    expect(screen.getByLabelText(/name/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/message/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();\n  });\n  \n  test('shows validation errors for empty fields', async () => {\n    const onSubmit = jest.fn();\n    render(<ContactForm onSubmit={onSubmit} />);\n    \n    fireEvent.click(screen.getByRole('button', { name: /submit/i }));\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('name-error')).toHaveTextContent('Name is required');\n      expect(screen.getByTestId('email-error')).toHaveTextContent('Email is required');\n      expect(screen.getByTestId('message-error')).toHaveTextContent('Message is required');\n    });\n    \n    expect(onSubmit).not.toHaveBeenCalled();\n  });\n  \n  test('shows email validation error for invalid email', async () => {\n    const onSubmit = jest.fn();\n    render(<ContactForm onSubmit={onSubmit} />);\n    \n    fireEvent.change(screen.getByTestId('email-input'), {\n      target: { value: 'invalid-email' }\n    });\n    fireEvent.click(screen.getByRole('button', { name: /submit/i }));\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('email-error')).toHaveTextContent('Invalid email format');\n    });\n  });\n  \n  test('submits form with valid data', async () => {\n    const onSubmit = jest.fn();\n    render(<ContactForm onSubmit={onSubmit} />);\n    \n    fireEvent.change(screen.getByTestId('name-input'), {\n      target: { value: 'John Doe' }\n    });\n    fireEvent.change(screen.getByTestId('email-input'), {\n      target: { value: 'john@example.com' }\n    });\n    fireEvent.change(screen.getByTestId('message-input'), {\n      target: { value: 'Hello world' }\n    });\n    \n    fireEvent.click(screen.getByRole('button', { name: /submit/i }));\n    \n    await waitFor(() => {\n      expect(onSubmit).toHaveBeenCalledWith({\n        name: 'John Doe',\n        email: 'john@example.com',\n        message: 'Hello world'\n      });\n    });\n  });\n  \n  test('clears errors when user starts typing', async () => {\n    const onSubmit = jest.fn();\n    render(<ContactForm onSubmit={onSubmit} />);\n    \n    // Trigger validation errors\n    fireEvent.click(screen.getByRole('button', { name: /submit/i }));\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('name-error')).toBeInTheDocument();\n    });\n    \n    // Start typing in name field\n    fireEvent.change(screen.getByTestId('name-input'), {\n      target: { value: 'J' }\n    });\n    \n    expect(screen.queryByTestId('name-error')).not.toBeInTheDocument();\n  });\n});\n\n// PostList.test.tsx\nimport { render, screen, waitFor } from '@testing-library/react';\nimport { PostList } from './PostList';\n\n// Mock setTimeout for testing\njest.useFakeTimers();\n\ndescribe('PostList Component', () => {\n  test('shows loading state initially', () => {\n    render(<PostList />);\n    expect(screen.getByTestId('posts-loading')).toBeInTheDocument();\n  });\n  \n  test('shows posts after loading', async () => {\n    render(<PostList />);\n    \n    // Fast-forward time to complete the async operation\n    jest.advanceTimersByTime(1000);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('post-list')).toBeInTheDocument();\n      expect(screen.getByText('First Post')).toBeInTheDocument();\n      expect(screen.getByText('Second Post')).toBeInTheDocument();\n      expect(screen.getByText('Third Post')).toBeInTheDocument();\n    });\n  });\n});\n*/\n\n// Testing Best Practices Examples\nconst TestingExamples = () => {\n  const [users, setUsers] = useState([\n    { id: 1, name: 'John Doe', email: 'john@example.com', active: true },\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com', active: false }\n  ]);\n  \n  const [searchQuery, setSearchQuery] = useState('');\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  \n  const handleUserToggle = (userId: number) => {\n    setUsers(prev => prev.map(user => \n      user.id === userId ? { ...user, active: !user.active } : user\n    ));\n  };\n  \n  const handleUserDelete = (userId: number) => {\n    setUsers(prev => prev.filter(user => user.id !== userId));\n  };\n  \n  const handleFormSubmit = (data: FormData) => {\n    console.log('Form submitted:', data);\n    setFormSubmitted(true);\n    setTimeout(() => setFormSubmitted(false), 3000);\n  };\n  \n  return (\n    <div className=\"testing-examples\">\n      <h2>React Testing Examples</h2>\n      \n      <section className=\"example-section\">\n        <h3>1. Button Component</h3>\n        <div className=\"button-examples\">\n          <Button onClick={() => alert('Primary clicked!')}>Primary Button</Button>\n          <Button variant=\"secondary\" onClick={() => alert('Secondary clicked!')}>Secondary</Button>\n          <Button variant=\"danger\" disabled>Disabled Button</Button>\n          <Button size=\"small\">Small Button</Button>\n          <Button size=\"large\">Large Button</Button>\n        </div>\n      </section>\n      \n      <section className=\"example-section\">\n        <h3>2. Counter Component</h3>\n        <Counter \n          initialValue={5} \n          min={0} \n          max={10} \n          onCountChange={(count) => console.log('Count changed:', count)}\n        />\n      </section>\n      \n      <section className=\"example-section\">\n        <h3>3. User List Component</h3>\n        <UserList \n          users={users}\n          onUserToggle={handleUserToggle}\n          onUserDelete={handleUserDelete}\n        />\n      </section>\n      \n      <section className=\"example-section\">\n        <h3>4. Search Component</h3>\n        <Search \n          onSearch={setSearchQuery}\n          placeholder=\"Search users...\"\n        />\n        {searchQuery && <p>Searching for: <strong>{searchQuery}</strong></p>}\n      </section>\n      \n      <section className=\"example-section\">\n        <h3>5. Contact Form</h3>\n        <ContactForm onSubmit={handleFormSubmit} />\n        {formSubmitted && (\n          <div className=\"success-message\">\n            ✅ Form submitted successfully!\n          </div>\n        )}\n      </section>\n      \n      <section className=\"example-section\">\n        <h3>6. Async Data Component</h3>\n        <PostList />\n      </section>\n      \n      <section className=\"testing-info\">\n        <h3>Testing Best Practices</h3>\n        <div className=\"best-practices\">\n          <div className=\"practice\">\n            <h4>1. Test Behavior, Not Implementation</h4>\n            <p>Focus on what the user sees and does, not internal component details.</p>\n          </div>\n          \n          <div className=\"practice\">\n            <h4>2. Use data-testid Sparingly</h4>\n            <p>Prefer semantic queries like getByRole, getByLabelText, getByText.</p>\n          </div>\n          \n          <div className=\"practice\">\n            <h4>3. Test User Interactions</h4>\n            <p>Test clicking, typing, form submission, and other user actions.</p>\n          </div>\n          \n          <div className=\"practice\">\n            <h4>4. Mock External Dependencies</h4>\n            <p>Mock API calls, timers, and other external dependencies.</p>\n          </div>\n          \n          <div className=\"practice\">\n            <h4>5. Test Error States</h4>\n            <p>Test loading states, error states, and edge cases.</p>\n          </div>\n          \n          <div className=\"practice\">\n            <h4>6. Keep Tests Simple</h4>\n            <p>Each test should focus on one specific behavior or feature.</p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Testing React Components</h1>\n      <p>Learn how to test React components effectively with Jest and React Testing Library.</p>\n      \n      <TestingExamples />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "Test behavior មិនមែន implementation, ប្រើ semantic queries, និង test user interactions ដើម្បីធ្វើឱ្យ tests មានប្រយោជន៍"
  },
  {
    "id": 21,
    "category": "React",
    "path": "/react/performance-optimization",
    "title": "មេរៀនទី២១: Performance Optimization",
    "explanation": "Performance optimization គឺជាផ្នែកសំខាន់នៃការអភិវឌ្ឍន៍ React applications។ យើងនឹងរៀនអំពី techniques ផ្សេងៗដើម្បីធ្វើឱ្យ React apps រត់លឿន និងប្រើ memory កាន់តែតិច។",
    "code": "import React, { useState, useMemo, useCallback, memo, lazy, Suspense, useRef, useEffect } from 'react';\n\n// 1. React.memo for preventing unnecessary re-renders\ninterface ExpensiveComponentProps {\n  data: { id: number; name: string; value: number }[];\n  multiplier: number;\n  onItemClick: (id: number) => void;\n}\n\n// Without memo - will re-render on every parent update\nconst ExpensiveComponentWithoutMemo: React.FC<ExpensiveComponentProps> = ({ data, multiplier, onItemClick }) => {\n  console.log('ExpensiveComponent rendered without memo');\n  \n  // Simulate expensive calculation\n  const processedData = data.map(item => ({\n    ...item,\n    processedValue: item.value * multiplier * Math.random()\n  }));\n  \n  return (\n    <div className=\"expensive-component\">\n      <h4>Without Memo ({data.length} items)</h4>\n      {processedData.map(item => (\n        <div key={item.id} onClick={() => onItemClick(item.id)} className=\"item\">\n          {item.name}: {item.processedValue.toFixed(2)}\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// With memo - only re-renders when props actually change\nconst ExpensiveComponentWithMemo = memo<ExpensiveComponentProps>(({ data, multiplier, onItemClick }) => {\n  console.log('ExpensiveComponent rendered with memo');\n  \n  // Simulate expensive calculation\n  const processedData = data.map(item => ({\n    ...item,\n    processedValue: item.value * multiplier * Math.random()\n  }));\n  \n  return (\n    <div className=\"expensive-component\">\n      <h4>With Memo ({data.length} items)</h4>\n      {processedData.map(item => (\n        <div key={item.id} onClick={() => onItemClick(item.id)} className=\"item\">\n          {item.name}: {item.processedValue.toFixed(2)}\n        </div>\n      ))}\n    </div>\n  );\n});\n\n// 2. useMemo for expensive calculations\nconst DataProcessor: React.FC<{ numbers: number[]; operation: 'sum' | 'average' | 'max' }> = ({ numbers, operation }) => {\n  console.log('DataProcessor rendered');\n  \n  // Expensive calculation without useMemo\n  const calculateWithoutMemo = () => {\n    console.log('Calculating without memo...');\n    let result = 0;\n    \n    // Simulate expensive operation\n    for (let i = 0; i < 1000000; i++) {\n      result += Math.random();\n    }\n    \n    switch (operation) {\n      case 'sum':\n        return numbers.reduce((acc, num) => acc + num, 0);\n      case 'average':\n        return numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n      case 'max':\n        return Math.max(...numbers);\n      default:\n        return 0;\n    }\n  };\n  \n  // Expensive calculation with useMemo\n  const calculatedValue = useMemo(() => {\n    console.log('Calculating with memo...');\n    let result = 0;\n    \n    // Simulate expensive operation\n    for (let i = 0; i < 1000000; i++) {\n      result += Math.random();\n    }\n    \n    switch (operation) {\n      case 'sum':\n        return numbers.reduce((acc, num) => acc + num, 0);\n      case 'average':\n        return numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n      case 'max':\n        return Math.max(...numbers);\n      default:\n        return 0;\n    }\n  }, [numbers, operation]);\n  \n  return (\n    <div className=\"data-processor\">\n      <h4>Data Processor</h4>\n      <p>Operation: {operation}</p>\n      <p>Numbers: [{numbers.join(', ')}]</p>\n      <p>Result (without memo): {calculateWithoutMemo()}</p>\n      <p>Result (with memo): {calculatedValue}</p>\n    </div>\n  );\n};\n\n// 3. useCallback for stable function references\ninterface TodoItemProps {\n  todo: { id: number; text: string; completed: boolean };\n  onToggle: (id: number) => void;\n  onDelete: (id: number) => void;\n}\n\nconst TodoItem = memo<TodoItemProps>(({ todo, onToggle, onDelete }) => {\n  console.log(`TodoItem ${todo.id} rendered`);\n  \n  return (\n    <div className={`todo-item ${todo.completed ? 'completed' : ''}`}>\n      <span onClick={() => onToggle(todo.id)}>{todo.text}</span>\n      <button onClick={() => onDelete(todo.id)}>Delete</button>\n    </div>\n  );\n});\n\nconst TodoList: React.FC = () => {\n  const [todos, setTodos] = useState([\n    { id: 1, text: 'Learn React', completed: false },\n    { id: 2, text: 'Build an app', completed: false },\n    { id: 3, text: 'Optimize performance', completed: false }\n  ]);\n  const [newTodo, setNewTodo] = useState('');\n  const [renderCount, setRenderCount] = useState(0);\n  \n  // Without useCallback - new function on every render\n  const handleToggleWithoutCallback = (id: number) => {\n    setTodos(prev => prev.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n  \n  const handleDeleteWithoutCallback = (id: number) => {\n    setTodos(prev => prev.filter(todo => todo.id !== id));\n  };\n  \n  // With useCallback - stable function reference\n  const handleToggleWithCallback = useCallback((id: number) => {\n    setTodos(prev => prev.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  }, []);\n  \n  const handleDeleteWithCallback = useCallback((id: number) => {\n    setTodos(prev => prev.filter(todo => todo.id !== id));\n  }, []);\n  \n  const addTodo = useCallback(() => {\n    if (newTodo.trim()) {\n      setTodos(prev => [...prev, {\n        id: Date.now(),\n        text: newTodo,\n        completed: false\n      }]);\n      setNewTodo('');\n    }\n  }, [newTodo]);\n  \n  return (\n    <div className=\"todo-list\">\n      <h4>Todo List</h4>\n      <div className=\"todo-controls\">\n        <input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          placeholder=\"Add new todo\"\n        />\n        <button onClick={addTodo}>Add</button>\n        <button onClick={() => setRenderCount(prev => prev + 1)}>\n          Force Re-render ({renderCount})\n        </button>\n      </div>\n      \n      <div className=\"todo-sections\">\n        <div className=\"section\">\n          <h5>Without useCallback</h5>\n          {todos.map(todo => (\n            <TodoItem\n              key={`without-${todo.id}`}\n              todo={todo}\n              onToggle={handleToggleWithoutCallback}\n              onDelete={handleDeleteWithoutCallback}\n            />\n          ))}\n        </div>\n        \n        <div className=\"section\">\n          <h5>With useCallback</h5>\n          {todos.map(todo => (\n            <TodoItem\n              key={`with-${todo.id}`}\n              todo={todo}\n              onToggle={handleToggleWithCallback}\n              onDelete={handleDeleteWithCallback}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 4. Lazy Loading and Code Splitting\nconst HeavyComponent = lazy(() => {\n  // Simulate loading delay\n  return new Promise<{ default: React.ComponentType }>(resolve => {\n    setTimeout(() => {\n      const Component = () => {\n        const [data, setData] = useState<number[]>([]);\n        \n        useEffect(() => {\n          // Simulate heavy data processing\n          const heavyData = Array.from({ length: 10000 }, (_, i) => i * Math.random());\n          setData(heavyData);\n        }, []);\n        \n        return (\n          <div className=\"heavy-component\">\n            <h4>Heavy Component Loaded!</h4>\n            <p>Processed {data.length} items</p>\n            <p>Sum: {data.reduce((acc, num) => acc + num, 0).toFixed(2)}</p>\n          </div>\n        );\n      };\n      \n      resolve({ default: Component });\n    }, 2000);\n  });\n});\n\nconst LazyLoadingExample: React.FC = () => {\n  const [showHeavyComponent, setShowHeavyComponent] = useState(false);\n  \n  return (\n    <div className=\"lazy-loading-example\">\n      <h4>Lazy Loading Example</h4>\n      <button onClick={() => setShowHeavyComponent(!showHeavyComponent)}>\n        {showHeavyComponent ? 'Hide' : 'Load'} Heavy Component\n      </button>\n      \n      {showHeavyComponent && (\n        <Suspense fallback={\n          <div className=\"loading\">\n            <div className=\"spinner\"></div>\n            <p>Loading heavy component...</p>\n          </div>\n        }>\n          <HeavyComponent />\n        </Suspense>\n      )}\n    </div>\n  );\n};\n\n// 5. Virtual Scrolling for Large Lists\ninterface VirtualScrollProps {\n  items: string[];\n  itemHeight: number;\n  containerHeight: number;\n}\n\nconst VirtualScroll: React.FC<VirtualScrollProps> = ({ items, itemHeight, containerHeight }) => {\n  const [scrollTop, setScrollTop] = useState(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  const visibleCount = Math.ceil(containerHeight / itemHeight);\n  const startIndex = Math.floor(scrollTop / itemHeight);\n  const endIndex = Math.min(startIndex + visibleCount + 1, items.length);\n  \n  const visibleItems = items.slice(startIndex, endIndex);\n  \n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    setScrollTop(e.currentTarget.scrollTop);\n  };\n  \n  return (\n    <div className=\"virtual-scroll\">\n      <h4>Virtual Scroll ({items.length} items)</h4>\n      <div\n        ref={containerRef}\n        className=\"virtual-scroll-container\"\n        style={{ height: containerHeight, overflow: 'auto' }}\n        onScroll={handleScroll}\n      >\n        <div style={{ height: items.length * itemHeight, position: 'relative' }}>\n          {visibleItems.map((item, index) => {\n            const actualIndex = startIndex + index;\n            return (\n              <div\n                key={actualIndex}\n                className=\"virtual-scroll-item\"\n                style={{\n                  position: 'absolute',\n                  top: actualIndex * itemHeight,\n                  height: itemHeight,\n                  width: '100%',\n                  display: 'flex',\n                  alignItems: 'center',\n                  padding: '0 10px',\n                  borderBottom: '1px solid #eee'\n                }}\n              >\n                Item {actualIndex + 1}: {item}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <p>Rendering {visibleItems.length} of {items.length} items</p>\n    </div>\n  );\n};\n\n// 6. Debounced Search\nconst useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n  \n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    \n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  \n  return debouncedValue;\n};\n\nconst SearchExample: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState<string[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  \n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n  \n  // Mock data\n  const allItems = useMemo(() => \n    Array.from({ length: 1000 }, (_, i) => `Item ${i + 1} - ${Math.random().toString(36).substr(2, 9)}`),\n    []\n  );\n  \n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      setIsSearching(true);\n      \n      // Simulate API call delay\n      setTimeout(() => {\n        const results = allItems.filter(item => \n          item.toLowerCase().includes(debouncedSearchTerm.toLowerCase())\n        );\n        setSearchResults(results);\n        setIsSearching(false);\n      }, 300);\n    } else {\n      setSearchResults([]);\n      setIsSearching(false);\n    }\n  }, [debouncedSearchTerm, allItems]);\n  \n  return (\n    <div className=\"search-example\">\n      <h4>Debounced Search</h4>\n      <input\n        type=\"text\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        placeholder=\"Search items...\"\n        className=\"search-input\"\n      />\n      \n      <div className=\"search-info\">\n        <p>Search term: \"{searchTerm}\"</p>\n        <p>Debounced term: \"{debouncedSearchTerm}\"</p>\n        {isSearching && <p>Searching...</p>}\n      </div>\n      \n      <div className=\"search-results\">\n        <p>Found {searchResults.length} results</p>\n        {searchResults.slice(0, 10).map((result, index) => (\n          <div key={index} className=\"search-result\">\n            {result}\n          </div>\n        ))}\n        {searchResults.length > 10 && (\n          <p>... and {searchResults.length - 10} more results</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// 7. Image Lazy Loading\nconst LazyImage: React.FC<{ src: string; alt: string; width: number; height: number }> = ({ src, alt, width, height }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const imgRef = useRef<HTMLImageElement>(null);\n  \n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          observer.disconnect();\n        }\n      },\n      { threshold: 0.1 }\n    );\n    \n    if (imgRef.current) {\n      observer.observe(imgRef.current);\n    }\n    \n    return () => observer.disconnect();\n  }, []);\n  \n  return (\n    <div \n      className=\"lazy-image-container\"\n      style={{ width, height, backgroundColor: '#f0f0f0', position: 'relative' }}\n    >\n      {!isInView ? (\n        <div \n          ref={imgRef}\n          className=\"lazy-image-placeholder\"\n          style={{ \n            width: '100%', \n            height: '100%', \n            display: 'flex', \n            alignItems: 'center', \n            justifyContent: 'center' \n          }}\n        >\n          📷 Loading...\n        </div>\n      ) : (\n        <img\n          src={src}\n          alt={alt}\n          style={{ \n            width: '100%', \n            height: '100%', \n            objectFit: 'cover',\n            opacity: isLoaded ? 1 : 0,\n            transition: 'opacity 0.3s'\n          }}\n          onLoad={() => setIsLoaded(true)}\n        />\n      )}\n    </div>\n  );\n};\n\nconst ImageGallery: React.FC = () => {\n  const images = useMemo(() => \n    Array.from({ length: 20 }, (_, i) => ({\n      id: i + 1,\n      src: `https://picsum.photos/300/200?random=${i + 1}`,\n      alt: `Random image ${i + 1}`\n    })),\n    []\n  );\n  \n  return (\n    <div className=\"image-gallery\">\n      <h4>Lazy Loading Images</h4>\n      <div className=\"gallery-grid\">\n        {images.map(image => (\n          <LazyImage\n            key={image.id}\n            src={image.src}\n            alt={image.alt}\n            width={300}\n            height={200}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// 8. Performance Monitor\nconst PerformanceMonitor: React.FC = () => {\n  const [metrics, setMetrics] = useState<{\n    renderCount: number;\n    lastRenderTime: number;\n    averageRenderTime: number;\n  }>({ renderCount: 0, lastRenderTime: 0, averageRenderTime: 0 });\n  \n  const renderTimes = useRef<number[]>([]);\n  const startTime = useRef<number>(0);\n  \n  useEffect(() => {\n    startTime.current = performance.now();\n  });\n  \n  useEffect(() => {\n    const endTime = performance.now();\n    const renderTime = endTime - startTime.current;\n    \n    renderTimes.current.push(renderTime);\n    if (renderTimes.current.length > 100) {\n      renderTimes.current.shift();\n    }\n    \n    const averageTime = renderTimes.current.reduce((acc, time) => acc + time, 0) / renderTimes.current.length;\n    \n    setMetrics(prev => ({\n      renderCount: prev.renderCount + 1,\n      lastRenderTime: renderTime,\n      averageRenderTime: averageTime\n    }));\n  });\n  \n  return (\n    <div className=\"performance-monitor\">\n      <h4>Performance Monitor</h4>\n      <div className=\"metrics\">\n        <div className=\"metric\">\n          <span>Render Count:</span>\n          <span>{metrics.renderCount}</span>\n        </div>\n        <div className=\"metric\">\n          <span>Last Render Time:</span>\n          <span>{metrics.lastRenderTime.toFixed(2)}ms</span>\n        </div>\n        <div className=\"metric\">\n          <span>Average Render Time:</span>\n          <span>{metrics.averageRenderTime.toFixed(2)}ms</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Main Performance Examples Component\nconst PerformanceExamples = () => {\n  const [data, setData] = useState([\n    { id: 1, name: 'Item 1', value: 10 },\n    { id: 2, name: 'Item 2', value: 20 },\n    { id: 3, name: 'Item 3', value: 30 }\n  ]);\n  const [multiplier, setMultiplier] = useState(1);\n  const [numbers, setNumbers] = useState([1, 2, 3, 4, 5]);\n  const [operation, setOperation] = useState<'sum' | 'average' | 'max'>('sum');\n  const [forceRender, setForceRender] = useState(0);\n  \n  // Generate large list for virtual scrolling\n  const largeList = useMemo(() => \n    Array.from({ length: 10000 }, (_, i) => `Large list item ${i + 1}`),\n    []\n  );\n  \n  const handleItemClick = useCallback((id: number) => {\n    console.log('Item clicked:', id);\n  }, []);\n  \n  return (\n    <div className=\"performance-examples\">\n      <h2>React Performance Optimization</h2>\n      \n      <PerformanceMonitor />\n      \n      <div className=\"controls\">\n        <button onClick={() => setForceRender(prev => prev + 1)}>\n          Force Re-render ({forceRender})\n        </button>\n        <button onClick={() => setMultiplier(prev => prev + 1)}>\n          Change Multiplier ({multiplier})\n        </button>\n        <button onClick={() => setNumbers(prev => [...prev, Math.floor(Math.random() * 100)])}>\n          Add Number\n        </button>\n      </div>\n      \n      {/* React.memo Example */}\n      <section className=\"example-section\">\n        <h3>1. React.memo Comparison</h3>\n        <div className=\"memo-comparison\">\n          <ExpensiveComponentWithoutMemo \n            data={data} \n            multiplier={multiplier} \n            onItemClick={handleItemClick}\n          />\n          <ExpensiveComponentWithMemo \n            data={data} \n            multiplier={multiplier} \n            onItemClick={handleItemClick}\n          />\n        </div>\n      </section>\n      \n      {/* useMemo Example */}\n      <section className=\"example-section\">\n        <h3>2. useMemo for Expensive Calculations</h3>\n        <div className=\"operation-controls\">\n          <select value={operation} onChange={(e) => setOperation(e.target.value as any)}>\n            <option value=\"sum\">Sum</option>\n            <option value=\"average\">Average</option>\n            <option value=\"max\">Maximum</option>\n          </select>\n        </div>\n        <DataProcessor numbers={numbers} operation={operation} />\n      </section>\n      \n      {/* useCallback Example */}\n      <section className=\"example-section\">\n        <h3>3. useCallback for Stable References</h3>\n        <TodoList />\n      </section>\n      \n      {/* Lazy Loading Example */}\n      <section className=\"example-section\">\n        <h3>4. Lazy Loading and Code Splitting</h3>\n        <LazyLoadingExample />\n      </section>\n      \n      {/* Virtual Scrolling Example */}\n      <section className=\"example-section\">\n        <h3>5. Virtual Scrolling</h3>\n        <VirtualScroll \n          items={largeList} \n          itemHeight={50} \n          containerHeight={300} \n        />\n      </section>\n      \n      {/* Debounced Search Example */}\n      <section className=\"example-section\">\n        <h3>6. Debounced Search</h3>\n        <SearchExample />\n      </section>\n      \n      {/* Image Lazy Loading Example */}\n      <section className=\"example-section\">\n        <h3>7. Image Lazy Loading</h3>\n        <ImageGallery />\n      </section>\n      \n      {/* Performance Tips */}\n      <section className=\"performance-tips\">\n        <h3>Performance Optimization Tips</h3>\n        <div className=\"tips-grid\">\n          <div className=\"tip\">\n            <h4>1. Use React.memo</h4>\n            <p>Prevent unnecessary re-renders of components when props haven't changed.</p>\n          </div>\n          <div className=\"tip\">\n            <h4>2. Optimize with useMemo</h4>\n            <p>Cache expensive calculations that don't need to run on every render.</p>\n          </div>\n          <div className=\"tip\">\n            <h4>3. Stabilize with useCallback</h4>\n            <p>Prevent child re-renders by keeping function references stable.</p>\n          </div>\n          <div className=\"tip\">\n            <h4>4. Code Splitting</h4>\n            <p>Use React.lazy and Suspense to load components only when needed.</p>\n          </div>\n          <div className=\"tip\">\n            <h4>5. Virtual Scrolling</h4>\n            <p>Render only visible items in large lists to improve performance.</p>\n          </div>\n          <div className=\"tip\">\n            <h4>6. Debounce User Input</h4>\n            <p>Reduce API calls and expensive operations with debounced inputs.</p>\n          </div>\n          <div className=\"tip\">\n            <h4>7. Lazy Load Images</h4>\n            <p>Load images only when they're about to enter the viewport.</p>\n          </div>\n          <div className=\"tip\">\n            <h4>8. Monitor Performance</h4>\n            <p>Use React DevTools Profiler and performance monitoring to identify bottlenecks.</p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>React Performance Optimization</h1>\n      <p>Learn techniques to make your React applications faster and more efficient.</p>\n      \n      <PerformanceExamples />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "Performance optimization ត្រូវធ្វើតាម needs ពិតប្រាកដ - measure first, optimize second, និងកុំ premature optimize"
  },
  {
    "id": 22,
    "category": "React",
    "path": "/react/state-management",
    "title": "មេរៀនទី២២: Advanced State Management",
    "explanation": "Advanced State Management រួមមាន patterns និង techniques ផ្សេងៗសម្រាប់គ្រប់គ្រង complex state នៅក្នុង React applications។ យើងនឹងរៀនអំពី useReducer, Context API, និង state management patterns។",
    "code": "import React, { createContext, useContext, useReducer, useState, useEffect, ReactNode, useCallback } from 'react';\n\n// 1. Complex State with useReducer\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  role: 'admin' | 'user' | 'moderator';\n  active: boolean;\n}\n\ninterface AppState {\n  users: User[];\n  currentUser: User | null;\n  loading: boolean;\n  error: string | null;\n  filters: {\n    role: string;\n    active: boolean | null;\n    search: string;\n  };\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n  };\n}\n\ntype AppAction =\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_USERS'; payload: User[] }\n  | { type: 'ADD_USER'; payload: User }\n  | { type: 'UPDATE_USER'; payload: User }\n  | { type: 'DELETE_USER'; payload: number }\n  | { type: 'SET_CURRENT_USER'; payload: User | null }\n  | { type: 'SET_FILTER'; payload: { key: keyof AppState['filters']; value: any } }\n  | { type: 'SET_PAGE'; payload: number }\n  | { type: 'RESET_FILTERS' }\n  | { type: 'RESET_STATE' };\n\nconst initialState: AppState = {\n  users: [],\n  currentUser: null,\n  loading: false,\n  error: null,\n  filters: {\n    role: 'all',\n    active: null,\n    search: ''\n  },\n  pagination: {\n    page: 1,\n    limit: 10,\n    total: 0\n  }\n};\n\nconst appReducer = (state: AppState, action: AppAction): AppState => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    \n    case 'SET_ERROR':\n      return { ...state, error: action.payload, loading: false };\n    \n    case 'SET_USERS':\n      return {\n        ...state,\n        users: action.payload,\n        loading: false,\n        error: null,\n        pagination: {\n          ...state.pagination,\n          total: action.payload.length\n        }\n      };\n    \n    case 'ADD_USER':\n      return {\n        ...state,\n        users: [...state.users, action.payload],\n        pagination: {\n          ...state.pagination,\n          total: state.pagination.total + 1\n        }\n      };\n    \n    case 'UPDATE_USER':\n      return {\n        ...state,\n        users: state.users.map(user =>\n          user.id === action.payload.id ? action.payload : user\n        ),\n        currentUser: state.currentUser?.id === action.payload.id ? action.payload : state.currentUser\n      };\n    \n    case 'DELETE_USER':\n      return {\n        ...state,\n        users: state.users.filter(user => user.id !== action.payload),\n        currentUser: state.currentUser?.id === action.payload ? null : state.currentUser,\n        pagination: {\n          ...state.pagination,\n          total: state.pagination.total - 1\n        }\n      };\n    \n    case 'SET_CURRENT_USER':\n      return { ...state, currentUser: action.payload };\n    \n    case 'SET_FILTER':\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.payload.key]: action.payload.value\n        },\n        pagination: {\n          ...state.pagination,\n          page: 1 // Reset to first page when filtering\n        }\n      };\n    \n    case 'SET_PAGE':\n      return {\n        ...state,\n        pagination: {\n          ...state.pagination,\n          page: action.payload\n        }\n      };\n    \n    case 'RESET_FILTERS':\n      return {\n        ...state,\n        filters: initialState.filters,\n        pagination: {\n          ...state.pagination,\n          page: 1\n        }\n      };\n    \n    case 'RESET_STATE':\n      return initialState;\n    \n    default:\n      return state;\n  }\n};\n\n// 2. Context for Global State Management\ninterface AppContextType {\n  state: AppState;\n  dispatch: React.Dispatch<AppAction>;\n  actions: {\n    setLoading: (loading: boolean) => void;\n    setError: (error: string | null) => void;\n    setUsers: (users: User[]) => void;\n    addUser: (user: User) => void;\n    updateUser: (user: User) => void;\n    deleteUser: (id: number) => void;\n    setCurrentUser: (user: User | null) => void;\n    setFilter: (key: keyof AppState['filters'], value: any) => void;\n    setPage: (page: number) => void;\n    resetFilters: () => void;\n    resetState: () => void;\n  };\n}\n\nconst AppContext = createContext<AppContextType | null>(null);\n\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within AppProvider');\n  }\n  return context;\n};\n\n// 3. Context Provider with Actions\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  \n  // Action creators\n  const actions = {\n    setLoading: useCallback((loading: boolean) => {\n      dispatch({ type: 'SET_LOADING', payload: loading });\n    }, []),\n    \n    setError: useCallback((error: string | null) => {\n      dispatch({ type: 'SET_ERROR', payload: error });\n    }, []),\n    \n    setUsers: useCallback((users: User[]) => {\n      dispatch({ type: 'SET_USERS', payload: users });\n    }, []),\n    \n    addUser: useCallback((user: User) => {\n      dispatch({ type: 'ADD_USER', payload: user });\n    }, []),\n    \n    updateUser: useCallback((user: User) => {\n      dispatch({ type: 'UPDATE_USER', payload: user });\n    }, []),\n    \n    deleteUser: useCallback((id: number) => {\n      dispatch({ type: 'DELETE_USER', payload: id });\n    }, []),\n    \n    setCurrentUser: useCallback((user: User | null) => {\n      dispatch({ type: 'SET_CURRENT_USER', payload: user });\n    }, []),\n    \n    setFilter: useCallback((key: keyof AppState['filters'], value: any) => {\n      dispatch({ type: 'SET_FILTER', payload: { key, value } });\n    }, []),\n    \n    setPage: useCallback((page: number) => {\n      dispatch({ type: 'SET_PAGE', payload: page });\n    }, []),\n    \n    resetFilters: useCallback(() => {\n      dispatch({ type: 'RESET_FILTERS' });\n    }, []),\n    \n    resetState: useCallback(() => {\n      dispatch({ type: 'RESET_STATE' });\n    }, [])\n  };\n  \n  return (\n    <AppContext.Provider value={{ state, dispatch, actions }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// 4. Custom Hooks for Specific Features\nexport const useUsers = () => {\n  const { state, actions } = useAppContext();\n  \n  const filteredUsers = React.useMemo(() => {\n    let filtered = state.users;\n    \n    // Filter by role\n    if (state.filters.role !== 'all') {\n      filtered = filtered.filter(user => user.role === state.filters.role);\n    }\n    \n    // Filter by active status\n    if (state.filters.active !== null) {\n      filtered = filtered.filter(user => user.active === state.filters.active);\n    }\n    \n    // Filter by search term\n    if (state.filters.search) {\n      const searchTerm = state.filters.search.toLowerCase();\n      filtered = filtered.filter(user => \n        user.name.toLowerCase().includes(searchTerm) ||\n        user.email.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    return filtered;\n  }, [state.users, state.filters]);\n  \n  const paginatedUsers = React.useMemo(() => {\n    const startIndex = (state.pagination.page - 1) * state.pagination.limit;\n    const endIndex = startIndex + state.pagination.limit;\n    return filteredUsers.slice(startIndex, endIndex);\n  }, [filteredUsers, state.pagination.page, state.pagination.limit]);\n  \n  const totalPages = Math.ceil(filteredUsers.length / state.pagination.limit);\n  \n  return {\n    users: paginatedUsers,\n    allUsers: state.users,\n    filteredUsers,\n    totalUsers: filteredUsers.length,\n    totalPages,\n    currentPage: state.pagination.page,\n    loading: state.loading,\n    error: state.error,\n    filters: state.filters,\n    actions: {\n      addUser: actions.addUser,\n      updateUser: actions.updateUser,\n      deleteUser: actions.deleteUser,\n      setFilter: actions.setFilter,\n      setPage: actions.setPage,\n      resetFilters: actions.resetFilters\n    }\n  };\n};\n\nexport const useAuth = () => {\n  const { state, actions } = useAppContext();\n  \n  const login = useCallback(async (email: string, password: string) => {\n    actions.setLoading(true);\n    actions.setError(null);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock authentication\n      const user = state.users.find(u => u.email === email);\n      if (user && password === 'password') {\n        actions.setCurrentUser(user);\n        return true;\n      } else {\n        actions.setError('Invalid credentials');\n        return false;\n      }\n    } catch (error) {\n      actions.setError('Login failed');\n      return false;\n    } finally {\n      actions.setLoading(false);\n    }\n  }, [state.users, actions]);\n  \n  const logout = useCallback(() => {\n    actions.setCurrentUser(null);\n  }, [actions]);\n  \n  return {\n    currentUser: state.currentUser,\n    loading: state.loading,\n    error: state.error,\n    login,\n    logout,\n    isAuthenticated: !!state.currentUser\n  };\n};\n\n// 5. Components using the state management\nconst UserList: React.FC = () => {\n  const { users, totalUsers, totalPages, currentPage, loading, error, filters, actions } = useUsers();\n  \n  if (loading) {\n    return <div className=\"loading\">Loading users...</div>;\n  }\n  \n  if (error) {\n    return <div className=\"error\">Error: {error}</div>;\n  }\n  \n  return (\n    <div className=\"user-list\">\n      <div className=\"user-list-header\">\n        <h3>Users ({totalUsers})</h3>\n        <div className=\"filters\">\n          <select \n            value={filters.role} \n            onChange={(e) => actions.setFilter('role', e.target.value)}\n          >\n            <option value=\"all\">All Roles</option>\n            <option value=\"admin\">Admin</option>\n            <option value=\"user\">User</option>\n            <option value=\"moderator\">Moderator</option>\n          </select>\n          \n          <select \n            value={filters.active === null ? 'all' : filters.active.toString()} \n            onChange={(e) => {\n              const value = e.target.value === 'all' ? null : e.target.value === 'true';\n              actions.setFilter('active', value);\n            }}\n          >\n            <option value=\"all\">All Status</option>\n            <option value=\"true\">Active</option>\n            <option value=\"false\">Inactive</option>\n          </select>\n          \n          <input\n            type=\"text\"\n            placeholder=\"Search users...\"\n            value={filters.search}\n            onChange={(e) => actions.setFilter('search', e.target.value)}\n          />\n          \n          <button onClick={actions.resetFilters}>Reset Filters</button>\n        </div>\n      </div>\n      \n      <div className=\"user-grid\">\n        {users.map(user => (\n          <div key={user.id} className={`user-card ${user.active ? 'active' : 'inactive'}`}>\n            <h4>{user.name}</h4>\n            <p>{user.email}</p>\n            <span className={`role role-${user.role}`}>{user.role}</span>\n            <span className={`status ${user.active ? 'active' : 'inactive'}`}>\n              {user.active ? 'Active' : 'Inactive'}\n            </span>\n            <div className=\"user-actions\">\n              <button onClick={() => actions.updateUser({ ...user, active: !user.active })}>\n                {user.active ? 'Deactivate' : 'Activate'}\n              </button>\n              <button onClick={() => actions.deleteUser(user.id)} className=\"danger\">\n                Delete\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {totalPages > 1 && (\n        <div className=\"pagination\">\n          <button \n            onClick={() => actions.setPage(currentPage - 1)}\n            disabled={currentPage === 1}\n          >\n            Previous\n          </button>\n          \n          {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n            <button\n              key={page}\n              onClick={() => actions.setPage(page)}\n              className={page === currentPage ? 'active' : ''}\n            >\n              {page}\n            </button>\n          ))}\n          \n          <button \n            onClick={() => actions.setPage(currentPage + 1)}\n            disabled={currentPage === totalPages}\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst UserForm: React.FC = () => {\n  const { actions } = useUsers();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    role: 'user' as User['role']\n  });\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.name && formData.email) {\n      const newUser: User = {\n        id: Date.now(),\n        name: formData.name,\n        email: formData.email,\n        role: formData.role,\n        active: true\n      };\n      \n      actions.addUser(newUser);\n      setFormData({ name: '', email: '', role: 'user' });\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"user-form\">\n      <h3>Add New User</h3>\n      \n      <div className=\"form-group\">\n        <label>Name:</label>\n        <input\n          type=\"text\"\n          value={formData.name}\n          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n          required\n        />\n      </div>\n      \n      <div className=\"form-group\">\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          value={formData.email}\n          onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n          required\n        />\n      </div>\n      \n      <div className=\"form-group\">\n        <label>Role:</label>\n        <select\n          value={formData.role}\n          onChange={(e) => setFormData({ ...formData, role: e.target.value as User['role'] })}\n        >\n          <option value=\"user\">User</option>\n          <option value=\"moderator\">Moderator</option>\n          <option value=\"admin\">Admin</option>\n        </select>\n      </div>\n      \n      <button type=\"submit\">Add User</button>\n    </form>\n  );\n};\n\nconst AuthComponent: React.FC = () => {\n  const { currentUser, loading, error, login, logout, isAuthenticated } = useAuth();\n  const [credentials, setCredentials] = useState({ email: '', password: '' });\n  \n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await login(credentials.email, credentials.password);\n  };\n  \n  if (isAuthenticated) {\n    return (\n      <div className=\"auth-component\">\n        <div className=\"user-info\">\n          <h3>Welcome, {currentUser?.name}!</h3>\n          <p>Role: {currentUser?.role}</p>\n          <p>Email: {currentUser?.email}</p>\n          <button onClick={logout}>Logout</button>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"auth-component\">\n      <form onSubmit={handleLogin} className=\"login-form\">\n        <h3>Login</h3>\n        \n        {error && <div className=\"error\">{error}</div>}\n        \n        <div className=\"form-group\">\n          <label>Email:</label>\n          <input\n            type=\"email\"\n            value={credentials.email}\n            onChange={(e) => setCredentials({ ...credentials, email: e.target.value })}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label>Password:</label>\n          <input\n            type=\"password\"\n            value={credentials.password}\n            onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\n            required\n          />\n        </div>\n        \n        <button type=\"submit\" disabled={loading}>\n          {loading ? 'Logging in...' : 'Login'}\n        </button>\n        \n        <p className=\"hint\">Hint: Use any email from the user list with password \"password\"</p>\n      </form>\n    </div>\n  );\n};\n\n// 6. State Inspector for Debugging\nconst StateInspector: React.FC = () => {\n  const { state, actions } = useAppContext();\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  return (\n    <div className=\"state-inspector\">\n      <div className=\"inspector-header\">\n        <h3>State Inspector</h3>\n        <button onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? 'Collapse' : 'Expand'}\n        </button>\n        <button onClick={actions.resetState} className=\"danger\">\n          Reset State\n        </button>\n      </div>\n      \n      {isExpanded && (\n        <div className=\"inspector-content\">\n          <pre>{JSON.stringify(state, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// 7. Main Application Component\nconst StateManagementApp: React.FC = () => {\n  const { actions } = useAppContext();\n  \n  // Initialize with mock data\n  useEffect(() => {\n    const mockUsers: User[] = [\n      { id: 1, name: 'John Doe', email: 'john@example.com', role: 'admin', active: true },\n      { id: 2, name: 'Jane Smith', email: 'jane@example.com', role: 'user', active: true },\n      { id: 3, name: 'Bob Johnson', email: 'bob@example.com', role: 'moderator', active: false },\n      { id: 4, name: 'Alice Brown', email: 'alice@example.com', role: 'user', active: true },\n      { id: 5, name: 'Charlie Wilson', email: 'charlie@example.com', role: 'user', active: false }\n    ];\n    \n    actions.setUsers(mockUsers);\n  }, [actions]);\n  \n  return (\n    <div className=\"state-management-app\">\n      <h2>Advanced State Management</h2>\n      \n      <div className=\"app-layout\">\n        <div className=\"sidebar\">\n          <AuthComponent />\n          <UserForm />\n          <StateInspector />\n        </div>\n        \n        <div className=\"main-content\">\n          <UserList />\n        </div>\n      </div>\n      \n      <div className=\"state-patterns\">\n        <h3>State Management Patterns Used</h3>\n        <div className=\"patterns-grid\">\n          <div className=\"pattern\">\n            <h4>1. useReducer</h4>\n            <p>Complex state logic with multiple actions and state updates.</p>\n          </div>\n          <div className=\"pattern\">\n            <h4>2. Context API</h4>\n            <p>Global state sharing across components without prop drilling.</p>\n          </div>\n          <div className=\"pattern\">\n            <h4>3. Custom Hooks</h4>\n            <p>Encapsulated logic for specific features like users and auth.</p>\n          </div>\n          <div className=\"pattern\">\n            <h4>4. Action Creators</h4>\n            <p>Consistent and reusable functions for dispatching actions.</p>\n          </div>\n          <div className=\"pattern\">\n            <h4>5. Derived State</h4>\n            <p>Computed values like filtered and paginated data using useMemo.</p>\n          </div>\n          <div className=\"pattern\">\n            <h4>6. State Normalization</h4>\n            <p>Organized state structure for efficient updates and queries.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Main App with Provider\nconst App = () => {\n  return (\n    <AppProvider>\n      <div className=\"app\">\n        <h1>Advanced State Management in React</h1>\n        <p>Comprehensive state management using useReducer, Context API, and custom hooks.</p>\n        \n        <StateManagementApp />\n      </div>\n    </AppProvider>\n  );\n};\n\nexport default App;",
    "tip": "ប្រើ useReducer សម្រាប់ complex state logic, Context API សម្រាប់ global state, និង custom hooks សម្រាប់ encapsulated logic"
  },
  {
    "id": 23,
    "category": "React",
    "path": "/react/routing",
    "title": "មេរៀនទី២៣: React Router",
    "explanation": "React Router គឺជា library សម្រាប់ handling navigation និង routing នៅក្នុង React applications។ វាអនុញ្ញាតឱ្យយើងបង្កើត single-page applications ដែលមាន multiple views។",
    "code": "import React, { useState, useEffect, Suspense, lazy } from 'react';\n\n// Mock React Router functionality for demonstration\n// In a real app, you would install and import from 'react-router-dom'\n\n// 1. Mock Router Components and Hooks\ninterface RouteProps {\n  path: string;\n  element: React.ReactElement;\n  children?: RouteProps[];\n}\n\ninterface RouterContextType {\n  currentPath: string;\n  navigate: (path: string) => void;\n  params: Record<string, string>;\n}\n\nconst RouterContext = React.createContext<RouterContextType | null>(null);\n\nconst useNavigate = () => {\n  const context = React.useContext(RouterContext);\n  if (!context) throw new Error('useNavigate must be used within Router');\n  return context.navigate;\n};\n\nconst useLocation = () => {\n  const context = React.useContext(RouterContext);\n  if (!context) throw new Error('useLocation must be used within Router');\n  return { pathname: context.currentPath };\n};\n\nconst useParams = () => {\n  const context = React.useContext(RouterContext);\n  if (!context) throw new Error('useParams must be used within Router');\n  return context.params;\n};\n\n// Mock Router Component\nconst Router: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [currentPath, setCurrentPath] = useState(window.location.hash.slice(1) || '/');\n  const [params, setParams] = useState<Record<string, string>>({});\n  \n  const navigate = (path: string) => {\n    setCurrentPath(path);\n    window.location.hash = path;\n  };\n  \n  useEffect(() => {\n    const handleHashChange = () => {\n      setCurrentPath(window.location.hash.slice(1) || '/');\n    };\n    \n    window.addEventListener('hashchange', handleHashChange);\n    return () => window.removeEventListener('hashchange', handleHashChange);\n  }, []);\n  \n  return (\n    <RouterContext.Provider value={{ currentPath, navigate, params }}>\n      {children}\n    </RouterContext.Provider>\n  );\n};\n\n// Mock Routes Component\nconst Routes: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { currentPath } = React.useContext(RouterContext)!;\n  \n  const findMatchingRoute = (routes: React.ReactNode, path: string): React.ReactElement | null => {\n    const routeArray = React.Children.toArray(routes);\n    \n    for (const route of routeArray) {\n      if (React.isValidElement(route) && route.type === Route) {\n        const routePath = route.props.path;\n        \n        // Simple path matching (in real router, this would be more sophisticated)\n        if (routePath === path || \n            (routePath.includes(':') && matchesParameterizedPath(routePath, path))) {\n          return route.props.element;\n        }\n      }\n    }\n    \n    return null;\n  };\n  \n  const matchesParameterizedPath = (routePath: string, actualPath: string): boolean => {\n    const routeParts = routePath.split('/');\n    const actualParts = actualPath.split('/');\n    \n    if (routeParts.length !== actualParts.length) return false;\n    \n    const newParams: Record<string, string> = {};\n    \n    for (let i = 0; i < routeParts.length; i++) {\n      if (routeParts[i].startsWith(':')) {\n        const paramName = routeParts[i].slice(1);\n        newParams[paramName] = actualParts[i];\n      } else if (routeParts[i] !== actualParts[i]) {\n        return false;\n      }\n    }\n    \n    // Update params in context (simplified)\n    return true;\n  };\n  \n  const matchedRoute = findMatchingRoute(children, currentPath);\n  \n  return matchedRoute || <div>404 - Page Not Found</div>;\n};\n\n// Mock Route Component\nconst Route: React.FC<{ path: string; element: React.ReactElement }> = () => {\n  return null; // This component doesn't render anything directly\n};\n\n// Mock Link Component\nconst Link: React.FC<{ to: string; children: React.ReactNode; className?: string }> = ({ to, children, className }) => {\n  const navigate = useNavigate();\n  \n  const handleClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigate(to);\n  };\n  \n  return (\n    <a href={`#${to}`} onClick={handleClick} className={className}>\n      {children}\n    </a>\n  );\n};\n\n// Mock NavLink Component\nconst NavLink: React.FC<{ \n  to: string; \n  children: React.ReactNode; \n  className?: string;\n  activeClassName?: string;\n}> = ({ to, children, className = '', activeClassName = 'active' }) => {\n  const { currentPath } = React.useContext(RouterContext)!;\n  const navigate = useNavigate();\n  \n  const isActive = currentPath === to;\n  const finalClassName = `${className} ${isActive ? activeClassName : ''}`.trim();\n  \n  const handleClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigate(to);\n  };\n  \n  return (\n    <a href={`#${to}`} onClick={handleClick} className={finalClassName}>\n      {children}\n    </a>\n  );\n};\n\n// 2. Page Components\nconst HomePage: React.FC = () => {\n  return (\n    <div className=\"page home-page\">\n      <h2>🏠 Home Page</h2>\n      <p>Welcome to our React Router demonstration!</p>\n      \n      <div className=\"home-content\">\n        <div className=\"feature-grid\">\n          <div className=\"feature\">\n            <h3>📄 About</h3>\n            <p>Learn more about our application</p>\n            <Link to=\"/about\" className=\"btn btn-primary\">Visit About</Link>\n          </div>\n          \n          <div className=\"feature\">\n            <h3>📞 Contact</h3>\n            <p>Get in touch with us</p>\n            <Link to=\"/contact\" className=\"btn btn-primary\">Contact Us</Link>\n          </div>\n          \n          <div className=\"feature\">\n            <h3>📝 Blog</h3>\n            <p>Read our latest articles</p>\n            <Link to=\"/blog\" className=\"btn btn-primary\">Read Blog</Link>\n          </div>\n          \n          <div className=\"feature\">\n            <h3>👤 Profile</h3>\n            <p>Manage your account</p>\n            <Link to=\"/profile\" className=\"btn btn-primary\">View Profile</Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst AboutPage: React.FC = () => {\n  return (\n    <div className=\"page about-page\">\n      <h2>📄 About Us</h2>\n      <p>This is the about page of our application.</p>\n      \n      <div className=\"about-content\">\n        <section>\n          <h3>Our Mission</h3>\n          <p>We strive to create amazing React applications with excellent user experience.</p>\n        </section>\n        \n        <section>\n          <h3>Our Team</h3>\n          <div className=\"team-grid\">\n            <div className=\"team-member\">\n              <h4>John Doe</h4>\n              <p>Frontend Developer</p>\n            </div>\n            <div className=\"team-member\">\n              <h4>Jane Smith</h4>\n              <p>UI/UX Designer</p>\n            </div>\n          </div>\n        </section>\n        \n        <div className=\"navigation-links\">\n          <Link to=\"/\" className=\"btn btn-secondary\">← Back to Home</Link>\n          <Link to=\"/contact\" className=\"btn btn-primary\">Contact Us →</Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ContactPage: React.FC = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    alert(`Message sent from ${formData.name}!`);\n    setFormData({ name: '', email: '', message: '' });\n  };\n  \n  return (\n    <div className=\"page contact-page\">\n      <h2>📞 Contact Us</h2>\n      <p>Get in touch with us using the form below.</p>\n      \n      <div className=\"contact-content\">\n        <form onSubmit={handleSubmit} className=\"contact-form\">\n          <div className=\"form-group\">\n            <label>Name:</label>\n            <input\n              type=\"text\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              required\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Email:</label>\n            <input\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n              required\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Message:</label>\n            <textarea\n              value={formData.message}\n              onChange={(e) => setFormData({ ...formData, message: e.target.value })}\n              rows={4}\n              required\n            />\n          </div>\n          \n          <button type=\"submit\" className=\"btn btn-primary\">Send Message</button>\n        </form>\n        \n        <div className=\"contact-info\">\n          <h3>Other Ways to Reach Us</h3>\n          <div className=\"contact-methods\">\n            <div className=\"contact-method\">\n              <strong>📧 Email:</strong>\n              <span>contact@example.com</span>\n            </div>\n            <div className=\"contact-method\">\n              <strong>📱 Phone:</strong>\n              <span>+1 (555) 123-4567</span>\n            </div>\n            <div className=\"contact-method\">\n              <strong>📍 Address:</strong>\n              <span>123 Main St, City, State 12345</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 3. Blog Components with Dynamic Routing\ninterface BlogPost {\n  id: number;\n  title: string;\n  excerpt: string;\n  content: string;\n  author: string;\n  date: string;\n  tags: string[];\n}\n\nconst blogPosts: BlogPost[] = [\n  {\n    id: 1,\n    title: \"Getting Started with React Router\",\n    excerpt: \"Learn the basics of routing in React applications.\",\n    content: \"React Router is a powerful library for handling navigation in React applications. It allows you to create single-page applications with multiple views...\",\n    author: \"John Doe\",\n    date: \"2024-01-15\",\n    tags: [\"React\", \"Routing\", \"JavaScript\"]\n  },\n  {\n    id: 2,\n    title: \"Advanced State Management\",\n    excerpt: \"Deep dive into complex state management patterns.\",\n    content: \"Managing state in large React applications can be challenging. In this post, we'll explore advanced patterns and techniques...\",\n    author: \"Jane Smith\",\n    date: \"2024-01-10\",\n    tags: [\"React\", \"State Management\", \"Hooks\"]\n  },\n  {\n    id: 3,\n    title: \"Performance Optimization Tips\",\n    excerpt: \"Make your React apps faster and more efficient.\",\n    content: \"Performance is crucial for user experience. Here are some proven techniques to optimize your React applications...\",\n    author: \"Bob Johnson\",\n    date: \"2024-01-05\",\n    tags: [\"React\", \"Performance\", \"Optimization\"]\n  }\n];\n\nconst BlogPage: React.FC = () => {\n  return (\n    <div className=\"page blog-page\">\n      <h2>📝 Blog</h2>\n      <p>Read our latest articles and tutorials.</p>\n      \n      <div className=\"blog-posts\">\n        {blogPosts.map(post => (\n          <article key={post.id} className=\"blog-post-preview\">\n            <h3>\n              <Link to={`/blog/${post.id}`} className=\"post-title-link\">\n                {post.title}\n              </Link>\n            </h3>\n            <div className=\"post-meta\">\n              <span>By {post.author}</span>\n              <span>•</span>\n              <span>{post.date}</span>\n            </div>\n            <p className=\"post-excerpt\">{post.excerpt}</p>\n            <div className=\"post-tags\">\n              {post.tags.map(tag => (\n                <span key={tag} className=\"tag\">{tag}</span>\n              ))}\n            </div>\n            <Link to={`/blog/${post.id}`} className=\"read-more\">\n              Read More →\n            </Link>\n          </article>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst BlogPostPage: React.FC = () => {\n  const { currentPath } = React.useContext(RouterContext)!;\n  const navigate = useNavigate();\n  \n  // Extract post ID from path (simplified)\n  const postId = parseInt(currentPath.split('/').pop() || '0');\n  const post = blogPosts.find(p => p.id === postId);\n  \n  if (!post) {\n    return (\n      <div className=\"page\">\n        <h2>Post Not Found</h2>\n        <p>The blog post you're looking for doesn't exist.</p>\n        <Link to=\"/blog\" className=\"btn btn-primary\">← Back to Blog</Link>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"page blog-post-page\">\n      <article className=\"blog-post\">\n        <header className=\"post-header\">\n          <h1>{post.title}</h1>\n          <div className=\"post-meta\">\n            <span>By {post.author}</span>\n            <span>•</span>\n            <span>{post.date}</span>\n          </div>\n          <div className=\"post-tags\">\n            {post.tags.map(tag => (\n              <span key={tag} className=\"tag\">{tag}</span>\n            ))}\n          </div>\n        </header>\n        \n        <div className=\"post-content\">\n          <p>{post.content}</p>\n          <p>This is where the full blog post content would be displayed. In a real application, this would be much longer and could include images, code examples, and other rich content.</p>\n        </div>\n        \n        <footer className=\"post-footer\">\n          <div className=\"post-navigation\">\n            <button onClick={() => navigate('/blog')} className=\"btn btn-secondary\">\n              ← Back to Blog\n            </button>\n            \n            <div className=\"post-actions\">\n              <button className=\"btn btn-outline\">Share</button>\n              <button className=\"btn btn-outline\">Like</button>\n            </div>\n          </div>\n        </footer>\n      </article>\n    </div>\n  );\n};\n\n// 4. Protected Route Component\nconst ProtectedRoute: React.FC<{ children: React.ReactElement }> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    // Simulate authentication check\n    const authStatus = localStorage.getItem('isAuthenticated') === 'true';\n    setIsAuthenticated(authStatus);\n    \n    if (!authStatus) {\n      // In a real app, you might redirect to login\n      console.log('User not authenticated');\n    }\n  }, []);\n  \n  if (!isAuthenticated) {\n    return (\n      <div className=\"page auth-required\">\n        <h2>🔒 Authentication Required</h2>\n        <p>You need to be logged in to access this page.</p>\n        <button \n          onClick={() => {\n            localStorage.setItem('isAuthenticated', 'true');\n            setIsAuthenticated(true);\n          }}\n          className=\"btn btn-primary\"\n        >\n          Login (Demo)\n        </button>\n        <Link to=\"/\" className=\"btn btn-secondary\">← Back to Home</Link>\n      </div>\n    );\n  }\n  \n  return children;\n};\n\nconst ProfilePage: React.FC = () => {\n  const navigate = useNavigate();\n  \n  const handleLogout = () => {\n    localStorage.removeItem('isAuthenticated');\n    navigate('/');\n  };\n  \n  return (\n    <div className=\"page profile-page\">\n      <h2>👤 Profile</h2>\n      <p>Welcome to your profile page!</p>\n      \n      <div className=\"profile-content\">\n        <div className=\"profile-info\">\n          <h3>User Information</h3>\n          <div className=\"info-grid\">\n            <div className=\"info-item\">\n              <strong>Name:</strong>\n              <span>John Doe</span>\n            </div>\n            <div className=\"info-item\">\n              <strong>Email:</strong>\n              <span>john@example.com</span>\n            </div>\n            <div className=\"info-item\">\n              <strong>Member Since:</strong>\n              <span>January 2024</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"profile-actions\">\n          <button className=\"btn btn-primary\">Edit Profile</button>\n          <button className=\"btn btn-secondary\">Change Password</button>\n          <button onClick={handleLogout} className=\"btn btn-danger\">Logout</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 5. Navigation Component\nconst Navigation: React.FC = () => {\n  const { currentPath } = React.useContext(RouterContext)!;\n  \n  return (\n    <nav className=\"navigation\">\n      <div className=\"nav-brand\">\n        <Link to=\"/\" className=\"brand-link\">React Router Demo</Link>\n      </div>\n      \n      <div className=\"nav-links\">\n        <NavLink to=\"/\" className=\"nav-link\" activeClassName=\"active\">\n          Home\n        </NavLink>\n        <NavLink to=\"/about\" className=\"nav-link\" activeClassName=\"active\">\n          About\n        </NavLink>\n        <NavLink to=\"/blog\" className=\"nav-link\" activeClassName=\"active\">\n          Blog\n        </NavLink>\n        <NavLink to=\"/contact\" className=\"nav-link\" activeClassName=\"active\">\n          Contact\n        </NavLink>\n        <NavLink to=\"/profile\" className=\"nav-link\" activeClassName=\"active\">\n          Profile\n        </NavLink>\n      </div>\n      \n      <div className=\"nav-info\">\n        <span className=\"current-path\">Current: {currentPath}</span>\n      </div>\n    </nav>\n  );\n};\n\n// 6. Breadcrumb Component\nconst Breadcrumb: React.FC = () => {\n  const { currentPath } = React.useContext(RouterContext)!;\n  \n  const pathSegments = currentPath.split('/').filter(segment => segment !== '');\n  \n  const breadcrumbItems = [\n    { path: '/', label: 'Home' },\n    ...pathSegments.map((segment, index) => {\n      const path = '/' + pathSegments.slice(0, index + 1).join('/');\n      const label = segment.charAt(0).toUpperCase() + segment.slice(1);\n      return { path, label };\n    })\n  ];\n  \n  if (currentPath === '/') {\n    return null;\n  }\n  \n  return (\n    <div className=\"breadcrumb\">\n      {breadcrumbItems.map((item, index) => (\n        <span key={item.path} className=\"breadcrumb-item\">\n          {index < breadcrumbItems.length - 1 ? (\n            <Link to={item.path} className=\"breadcrumb-link\">{item.label}</Link>\n          ) : (\n            <span className=\"breadcrumb-current\">{item.label}</span>\n          )}\n          {index < breadcrumbItems.length - 1 && (\n            <span className=\"breadcrumb-separator\"> / </span>\n          )}\n        </span>\n      ))}\n    </div>\n  );\n};\n\n// 7. 404 Page\nconst NotFoundPage: React.FC = () => {\n  const navigate = useNavigate();\n  \n  return (\n    <div className=\"page not-found-page\">\n      <div className=\"not-found-content\">\n        <h1 className=\"not-found-title\">404</h1>\n        <h2>Page Not Found</h2>\n        <p>The page you're looking for doesn't exist.</p>\n        \n        <div className=\"not-found-actions\">\n          <button onClick={() => navigate('/')} className=\"btn btn-primary\">\n            Go Home\n          </button>\n          <button onClick={() => window.history.back()} className=\"btn btn-secondary\">\n            Go Back\n          </button>\n        </div>\n        \n        <div className=\"helpful-links\">\n          <h3>You might be looking for:</h3>\n          <ul>\n            <li><Link to=\"/\">Home Page</Link></li>\n            <li><Link to=\"/about\">About Us</Link></li>\n            <li><Link to=\"/blog\">Blog</Link></li>\n            <li><Link to=\"/contact\">Contact</Link></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 8. Main App Component\nconst RouterApp: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"router-app\">\n        <Navigation />\n        <Breadcrumb />\n        \n        <main className=\"main-content\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/about\" element={<AboutPage />} />\n            <Route path=\"/contact\" element={<ContactPage />} />\n            <Route path=\"/blog\" element={<BlogPage />} />\n            <Route path=\"/blog/1\" element={<BlogPostPage />} />\n            <Route path=\"/blog/2\" element={<BlogPostPage />} />\n            <Route path=\"/blog/3\" element={<BlogPostPage />} />\n            <Route \n              path=\"/profile\" \n              element={\n                <ProtectedRoute>\n                  <ProfilePage />\n                </ProtectedRoute>\n              } \n            />\n          </Routes>\n        </main>\n        \n        <footer className=\"app-footer\">\n          <div className=\"footer-content\">\n            <p>&copy; 2024 React Router Demo. All rights reserved.</p>\n            <div className=\"footer-links\">\n              <Link to=\"/about\">About</Link>\n              <Link to=\"/contact\">Contact</Link>\n              <Link to=\"/blog\">Blog</Link>\n            </div>\n          </div>\n        </footer>\n      </div>\n    </Router>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>React Router Tutorial</h1>\n      <p>Learn how to implement routing in React applications.</p>\n      \n      <div className=\"router-info\">\n        <h3>Features Demonstrated:</h3>\n        <ul>\n          <li>✅ Basic routing with multiple pages</li>\n          <li>✅ Navigation with Link and NavLink components</li>\n          <li>✅ Dynamic routing with parameters</li>\n          <li>✅ Protected routes with authentication</li>\n          <li>✅ Breadcrumb navigation</li>\n          <li>✅ 404 error handling</li>\n          <li>✅ Programmatic navigation</li>\n        </ul>\n      </div>\n      \n      <RouterApp />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "React Router ធ្វើឱ្យ navigation ងាយស្រួល - ប្រើ Link សម្រាប់ navigation, useNavigate សម្រាប់ programmatic routing"
  },
  {
    "id": 24,
    "category": "React",
    "path": "/react/forms-validation",
    "title": "មេរៀនទី២៤: Forms and Validation",
    "explanation": "Forms និង Validation គឺជាផ្នែកសំខាន់នៃ web applications។ យើងនឹងរៀនអំពីការបង្កើត forms, handling user input, validation, និង error handling នៅក្នុង React។",
    "code": "import React, { useState, useEffect, useRef } from 'react';\n\n// 1. Basic Form with Controlled Components\nconst BasicForm: React.FC = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    age: '',\n    gender: '',\n    country: '',\n    newsletter: false,\n    comments: ''\n  });\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target;\n    const checked = (e.target as HTMLInputElement).checked;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Form submitted:', formData);\n    alert('Form submitted! Check console for data.');\n  };\n  \n  const handleReset = () => {\n    setFormData({\n      name: '',\n      email: '',\n      age: '',\n      gender: '',\n      country: '',\n      newsletter: false,\n      comments: ''\n    });\n  };\n  \n  return (\n    <div className=\"basic-form\">\n      <h3>Basic Form</h3>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleInputChange}\n            placeholder=\"Enter your name\"\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleInputChange}\n            placeholder=\"Enter your email\"\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"age\">Age:</label>\n          <input\n            type=\"number\"\n            id=\"age\"\n            name=\"age\"\n            value={formData.age}\n            onChange={handleInputChange}\n            min=\"1\"\n            max=\"120\"\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"gender\">Gender:</label>\n          <select\n            id=\"gender\"\n            name=\"gender\"\n            value={formData.gender}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">Select gender</option>\n            <option value=\"male\">Male</option>\n            <option value=\"female\">Female</option>\n            <option value=\"other\">Other</option>\n          </select>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"country\">Country:</label>\n          <select\n            id=\"country\"\n            name=\"country\"\n            value={formData.country}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">Select country</option>\n            <option value=\"cambodia\">Cambodia</option>\n            <option value=\"thailand\">Thailand</option>\n            <option value=\"vietnam\">Vietnam</option>\n            <option value=\"usa\">United States</option>\n            <option value=\"uk\">United Kingdom</option>\n          </select>\n        </div>\n        \n        <div className=\"form-group checkbox-group\">\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"newsletter\"\n              checked={formData.newsletter}\n              onChange={handleInputChange}\n            />\n            Subscribe to newsletter\n          </label>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"comments\">Comments:</label>\n          <textarea\n            id=\"comments\"\n            name=\"comments\"\n            value={formData.comments}\n            onChange={handleInputChange}\n            placeholder=\"Enter your comments\"\n            rows={4}\n          />\n        </div>\n        \n        <div className=\"form-actions\">\n          <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n          <button type=\"button\" onClick={handleReset} className=\"btn btn-secondary\">Reset</button>\n        </div>\n      </form>\n      \n      <div className=\"form-data-preview\">\n        <h4>Form Data Preview:</h4>\n        <pre>{JSON.stringify(formData, null, 2)}</pre>\n      </div>\n    </div>\n  );\n};\n\n// 2. Form with Validation\ninterface ValidationErrors {\n  [key: string]: string;\n}\n\nconst ValidatedForm: React.FC = () => {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    phone: '',\n    website: '',\n    birthDate: '',\n    terms: false\n  });\n  \n  const [errors, setErrors] = useState<ValidationErrors>({});\n  const [touched, setTouched] = useState<{ [key: string]: boolean }>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  // Validation rules\n  const validateField = (name: string, value: any): string => {\n    switch (name) {\n      case 'firstName':\n        if (!value.trim()) return 'First name is required';\n        if (value.length < 2) return 'First name must be at least 2 characters';\n        if (!/^[a-zA-Z\\s]+$/.test(value)) return 'First name can only contain letters';\n        return '';\n      \n      case 'lastName':\n        if (!value.trim()) return 'Last name is required';\n        if (value.length < 2) return 'Last name must be at least 2 characters';\n        if (!/^[a-zA-Z\\s]+$/.test(value)) return 'Last name can only contain letters';\n        return '';\n      \n      case 'email':\n        if (!value.trim()) return 'Email is required';\n        if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) return 'Please enter a valid email address';\n        return '';\n      \n      case 'password':\n        if (!value) return 'Password is required';\n        if (value.length < 8) return 'Password must be at least 8 characters';\n        if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(value)) {\n          return 'Password must contain at least one uppercase letter, one lowercase letter, and one number';\n        }\n        return '';\n      \n      case 'confirmPassword':\n        if (!value) return 'Please confirm your password';\n        if (value !== formData.password) return 'Passwords do not match';\n        return '';\n      \n      case 'phone':\n        if (!value.trim()) return 'Phone number is required';\n        if (!/^[\\+]?[1-9][\\d]{0,15}$/.test(value.replace(/[\\s\\-\\(\\)]/g, ''))) {\n          return 'Please enter a valid phone number';\n        }\n        return '';\n      \n      case 'website':\n        if (value && !/^https?:\\/\\/.+\\..+/.test(value)) {\n          return 'Please enter a valid URL (including http:// or https://)';\n        }\n        return '';\n      \n      case 'birthDate':\n        if (!value) return 'Birth date is required';\n        const birthDate = new Date(value);\n        const today = new Date();\n        const age = today.getFullYear() - birthDate.getFullYear();\n        if (age < 13) return 'You must be at least 13 years old';\n        if (age > 120) return 'Please enter a valid birth date';\n        return '';\n      \n      case 'terms':\n        if (!value) return 'You must accept the terms and conditions';\n        return '';\n      \n      default:\n        return '';\n    }\n  };\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    const fieldValue = type === 'checkbox' ? checked : value;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: fieldValue\n    }));\n    \n    // Validate field if it has been touched\n    if (touched[name]) {\n      const error = validateField(name, fieldValue);\n      setErrors(prev => ({\n        ...prev,\n        [name]: error\n      }));\n    }\n  };\n  \n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    const fieldValue = type === 'checkbox' ? checked : value;\n    \n    setTouched(prev => ({\n      ...prev,\n      [name]: true\n    }));\n    \n    const error = validateField(name, fieldValue);\n    setErrors(prev => ({\n      ...prev,\n      [name]: error\n    }));\n  };\n  \n  const validateForm = (): boolean => {\n    const newErrors: ValidationErrors = {};\n    let isValid = true;\n    \n    Object.keys(formData).forEach(key => {\n      const error = validateField(key, formData[key as keyof typeof formData]);\n      if (error) {\n        newErrors[key] = error;\n        isValid = false;\n      }\n    });\n    \n    setErrors(newErrors);\n    setTouched(Object.keys(formData).reduce((acc, key) => ({ ...acc, [key]: true }), {}));\n    \n    return isValid;\n  };\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      alert('Form submitted successfully!');\n      console.log('Submitted data:', formData);\n      \n      // Reset form\n      setFormData({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        phone: '',\n        website: '',\n        birthDate: '',\n        terms: false\n      });\n      setErrors({});\n      setTouched({});\n    } catch (error) {\n      alert('Submission failed. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  const getFieldClassName = (fieldName: string): string => {\n    const baseClass = 'form-input';\n    if (errors[fieldName] && touched[fieldName]) {\n      return `${baseClass} error`;\n    }\n    if (!errors[fieldName] && touched[fieldName] && formData[fieldName as keyof typeof formData]) {\n      return `${baseClass} valid`;\n    }\n    return baseClass;\n  };\n  \n  return (\n    <div className=\"validated-form\">\n      <h3>Form with Validation</h3>\n      <form onSubmit={handleSubmit} noValidate>\n        <div className=\"form-row\">\n          <div className=\"form-group\">\n            <label htmlFor=\"firstName\">First Name *</label>\n            <input\n              type=\"text\"\n              id=\"firstName\"\n              name=\"firstName\"\n              value={formData.firstName}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              className={getFieldClassName('firstName')}\n              placeholder=\"Enter your first name\"\n            />\n            {errors.firstName && touched.firstName && (\n              <span className=\"error-message\">{errors.firstName}</span>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"lastName\">Last Name *</label>\n            <input\n              type=\"text\"\n              id=\"lastName\"\n              name=\"lastName\"\n              value={formData.lastName}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              className={getFieldClassName('lastName')}\n              placeholder=\"Enter your last name\"\n            />\n            {errors.lastName && touched.lastName && (\n              <span className=\"error-message\">{errors.lastName}</span>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email Address *</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            className={getFieldClassName('email')}\n            placeholder=\"Enter your email address\"\n          />\n          {errors.email && touched.email && (\n            <span className=\"error-message\">{errors.email}</span>\n          )}\n        </div>\n        \n        <div className=\"form-row\">\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password *</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              className={getFieldClassName('password')}\n              placeholder=\"Enter your password\"\n            />\n            {errors.password && touched.password && (\n              <span className=\"error-message\">{errors.password}</span>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"confirmPassword\">Confirm Password *</label>\n            <input\n              type=\"password\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              value={formData.confirmPassword}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              className={getFieldClassName('confirmPassword')}\n              placeholder=\"Confirm your password\"\n            />\n            {errors.confirmPassword && touched.confirmPassword && (\n              <span className=\"error-message\">{errors.confirmPassword}</span>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"phone\">Phone Number *</label>\n          <input\n            type=\"tel\"\n            id=\"phone\"\n            name=\"phone\"\n            value={formData.phone}\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            className={getFieldClassName('phone')}\n            placeholder=\"Enter your phone number\"\n          />\n          {errors.phone && touched.phone && (\n            <span className=\"error-message\">{errors.phone}</span>\n          )}\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"website\">Website (Optional)</label>\n          <input\n            type=\"url\"\n            id=\"website\"\n            name=\"website\"\n            value={formData.website}\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            className={getFieldClassName('website')}\n            placeholder=\"https://example.com\"\n          />\n          {errors.website && touched.website && (\n            <span className=\"error-message\">{errors.website}</span>\n          )}\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"birthDate\">Birth Date *</label>\n          <input\n            type=\"date\"\n            id=\"birthDate\"\n            name=\"birthDate\"\n            value={formData.birthDate}\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            className={getFieldClassName('birthDate')}\n          />\n          {errors.birthDate && touched.birthDate && (\n            <span className=\"error-message\">{errors.birthDate}</span>\n          )}\n        </div>\n        \n        <div className=\"form-group checkbox-group\">\n          <label className=\"checkbox-label\">\n            <input\n              type=\"checkbox\"\n              name=\"terms\"\n              checked={formData.terms}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n            />\n            <span className=\"checkmark\"></span>\n            I agree to the terms and conditions *\n          </label>\n          {errors.terms && touched.terms && (\n            <span className=\"error-message\">{errors.terms}</span>\n          )}\n        </div>\n        \n        <div className=\"form-actions\">\n          <button \n            type=\"submit\" \n            className=\"btn btn-primary\"\n            disabled={isSubmitting}\n          >\n            {isSubmitting ? 'Submitting...' : 'Submit Form'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\n// 3. Dynamic Form Builder\ninterface FormField {\n  id: string;\n  type: 'text' | 'email' | 'number' | 'select' | 'checkbox' | 'textarea' | 'radio';\n  label: string;\n  placeholder?: string;\n  required?: boolean;\n  options?: string[];\n  validation?: {\n    min?: number;\n    max?: number;\n    pattern?: string;\n    message?: string;\n  };\n}\n\nconst DynamicForm: React.FC = () => {\n  const [formFields, setFormFields] = useState<FormField[]>([\n    {\n      id: 'name',\n      type: 'text',\n      label: 'Full Name',\n      placeholder: 'Enter your full name',\n      required: true\n    },\n    {\n      id: 'email',\n      type: 'email',\n      label: 'Email Address',\n      placeholder: 'Enter your email',\n      required: true\n    },\n    {\n      id: 'age',\n      type: 'number',\n      label: 'Age',\n      required: true,\n      validation: { min: 18, max: 100, message: 'Age must be between 18 and 100' }\n    },\n    {\n      id: 'country',\n      type: 'select',\n      label: 'Country',\n      required: true,\n      options: ['Cambodia', 'Thailand', 'Vietnam', 'USA', 'UK']\n    },\n    {\n      id: 'interests',\n      type: 'checkbox',\n      label: 'Interested in newsletter',\n      required: false\n    },\n    {\n      id: 'gender',\n      type: 'radio',\n      label: 'Gender',\n      required: true,\n      options: ['Male', 'Female', 'Other']\n    },\n    {\n      id: 'bio',\n      type: 'textarea',\n      label: 'Bio',\n      placeholder: 'Tell us about yourself',\n      required: false\n    }\n  ]);\n  \n  const [formData, setFormData] = useState<{ [key: string]: any }>({});\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n  \n  const handleFieldChange = (fieldId: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [fieldId]: value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors[fieldId]) {\n      setErrors(prev => ({\n        ...prev,\n        [fieldId]: ''\n      }));\n    }\n  };\n  \n  const validateDynamicForm = (): boolean => {\n    const newErrors: { [key: string]: string } = {};\n    \n    formFields.forEach(field => {\n      const value = formData[field.id];\n      \n      if (field.required && (!value || (typeof value === 'string' && !value.trim()))) {\n        newErrors[field.id] = `${field.label} is required`;\n      }\n      \n      if (field.validation && value) {\n        const { min, max, pattern, message } = field.validation;\n        \n        if (min !== undefined && value < min) {\n          newErrors[field.id] = message || `${field.label} must be at least ${min}`;\n        }\n        \n        if (max !== undefined && value > max) {\n          newErrors[field.id] = message || `${field.label} must be at most ${max}`;\n        }\n        \n        if (pattern && !new RegExp(pattern).test(value)) {\n          newErrors[field.id] = message || `${field.label} format is invalid`;\n        }\n      }\n    });\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (validateDynamicForm()) {\n      console.log('Dynamic form submitted:', formData);\n      alert('Dynamic form submitted successfully!');\n    }\n  };\n  \n  const renderField = (field: FormField) => {\n    const value = formData[field.id] || '';\n    const error = errors[field.id];\n    \n    switch (field.type) {\n      case 'text':\n      case 'email':\n      case 'number':\n        return (\n          <input\n            type={field.type}\n            value={value}\n            onChange={(e) => handleFieldChange(field.id, e.target.value)}\n            placeholder={field.placeholder}\n            className={error ? 'error' : ''}\n          />\n        );\n      \n      case 'select':\n        return (\n          <select\n            value={value}\n            onChange={(e) => handleFieldChange(field.id, e.target.value)}\n            className={error ? 'error' : ''}\n          >\n            <option value=\"\">Select {field.label}</option>\n            {field.options?.map(option => (\n              <option key={option} value={option}>{option}</option>\n            ))}\n          </select>\n        );\n      \n      case 'checkbox':\n        return (\n          <label className=\"checkbox-label\">\n            <input\n              type=\"checkbox\"\n              checked={!!value}\n              onChange={(e) => handleFieldChange(field.id, e.target.checked)}\n            />\n            {field.label}\n          </label>\n        );\n      \n      case 'radio':\n        return (\n          <div className=\"radio-group\">\n            {field.options?.map(option => (\n              <label key={option} className=\"radio-label\">\n                <input\n                  type=\"radio\"\n                  name={field.id}\n                  value={option}\n                  checked={value === option}\n                  onChange={(e) => handleFieldChange(field.id, e.target.value)}\n                />\n                {option}\n              </label>\n            ))}\n          </div>\n        );\n      \n      case 'textarea':\n        return (\n          <textarea\n            value={value}\n            onChange={(e) => handleFieldChange(field.id, e.target.value)}\n            placeholder={field.placeholder}\n            className={error ? 'error' : ''}\n            rows={4}\n          />\n        );\n      \n      default:\n        return null;\n    }\n  };\n  \n  const addField = () => {\n    const newField: FormField = {\n      id: `field_${Date.now()}`,\n      type: 'text',\n      label: 'New Field',\n      required: false\n    };\n    setFormFields([...formFields, newField]);\n  };\n  \n  const removeField = (fieldId: string) => {\n    setFormFields(formFields.filter(field => field.id !== fieldId));\n    const newFormData = { ...formData };\n    delete newFormData[fieldId];\n    setFormData(newFormData);\n  };\n  \n  return (\n    <div className=\"dynamic-form\">\n      <h3>Dynamic Form Builder</h3>\n      \n      <div className=\"form-builder-controls\">\n        <button onClick={addField} className=\"btn btn-secondary\">\n          Add Field\n        </button>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        {formFields.map(field => (\n          <div key={field.id} className=\"dynamic-form-group\">\n            <div className=\"field-header\">\n              <label>\n                {field.label}\n                {field.required && <span className=\"required\">*</span>}\n              </label>\n              <button\n                type=\"button\"\n                onClick={() => removeField(field.id)}\n                className=\"remove-field-btn\"\n              >\n                ×\n              </button>\n            </div>\n            \n            {renderField(field)}\n            \n            {errors[field.id] && (\n              <span className=\"error-message\">{errors[field.id]}</span>\n            )}\n          </div>\n        ))}\n        \n        <div className=\"form-actions\">\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit Dynamic Form\n          </button>\n        </div>\n      </form>\n      \n      <div className=\"form-data-preview\">\n        <h4>Form Data:</h4>\n        <pre>{JSON.stringify(formData, null, 2)}</pre>\n      </div>\n    </div>\n  );\n};\n\n// 4. File Upload Form\nconst FileUploadForm: React.FC = () => {\n  const [files, setFiles] = useState<File[]>([]);\n  const [uploadProgress, setUploadProgress] = useState<{ [key: string]: number }>({});\n  const [uploadStatus, setUploadStatus] = useState<{ [key: string]: 'pending' | 'uploading' | 'success' | 'error' }>({});\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFiles = Array.from(e.target.files || []);\n    setFiles(prev => [...prev, ...selectedFiles]);\n    \n    // Initialize status for new files\n    const newStatus: { [key: string]: 'pending' } = {};\n    selectedFiles.forEach(file => {\n      newStatus[file.name] = 'pending';\n    });\n    setUploadStatus(prev => ({ ...prev, ...newStatus }));\n  };\n  \n  const removeFile = (fileName: string) => {\n    setFiles(prev => prev.filter(file => file.name !== fileName));\n    const newProgress = { ...uploadProgress };\n    const newStatus = { ...uploadStatus };\n    delete newProgress[fileName];\n    delete newStatus[fileName];\n    setUploadProgress(newProgress);\n    setUploadStatus(newStatus);\n  };\n  \n  const simulateUpload = async (file: File) => {\n    setUploadStatus(prev => ({ ...prev, [file.name]: 'uploading' }));\n    \n    // Simulate upload progress\n    for (let progress = 0; progress <= 100; progress += 10) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      setUploadProgress(prev => ({ ...prev, [file.name]: progress }));\n    }\n    \n    // Simulate random success/failure\n    const success = Math.random() > 0.2;\n    setUploadStatus(prev => ({ \n      ...prev, \n      [file.name]: success ? 'success' : 'error' \n    }));\n  };\n  \n  const uploadFiles = async () => {\n    const pendingFiles = files.filter(file => uploadStatus[file.name] === 'pending');\n    \n    // Upload files concurrently\n    await Promise.all(pendingFiles.map(file => simulateUpload(file)));\n  };\n  \n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n  \n  return (\n    <div className=\"file-upload-form\">\n      <h3>File Upload Form</h3>\n      \n      <div className=\"upload-area\">\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          onChange={handleFileSelect}\n          style={{ display: 'none' }}\n          accept=\".jpg,.jpeg,.png,.gif,.pdf,.doc,.docx\"\n        />\n        \n        <div \n          className=\"drop-zone\"\n          onClick={() => fileInputRef.current?.click()}\n          onDragOver={(e) => e.preventDefault()}\n          onDrop={(e) => {\n            e.preventDefault();\n            const droppedFiles = Array.from(e.dataTransfer.files);\n            setFiles(prev => [...prev, ...droppedFiles]);\n          }}\n        >\n          <div className=\"drop-zone-content\">\n            <p>📁 Click to select files or drag and drop</p>\n            <p className=\"file-types\">Supported: JPG, PNG, GIF, PDF, DOC, DOCX</p>\n          </div>\n        </div>\n      </div>\n      \n      {files.length > 0 && (\n        <div className=\"file-list\">\n          <h4>Selected Files ({files.length})</h4>\n          \n          {files.map(file => {\n            const status = uploadStatus[file.name];\n            const progress = uploadProgress[file.name] || 0;\n            \n            return (\n              <div key={file.name} className={`file-item ${status}`}>\n                <div className=\"file-info\">\n                  <span className=\"file-name\">{file.name}</span>\n                  <span className=\"file-size\">{formatFileSize(file.size)}</span>\n                </div>\n                \n                <div className=\"file-status\">\n                  {status === 'pending' && (\n                    <span className=\"status-pending\">Pending</span>\n                  )}\n                  {status === 'uploading' && (\n                    <div className=\"upload-progress\">\n                      <div className=\"progress-bar\">\n                        <div \n                          className=\"progress-fill\" \n                          style={{ width: `${progress}%` }}\n                        ></div>\n                      </div>\n                      <span className=\"progress-text\">{progress}%</span>\n                    </div>\n                  )}\n                  {status === 'success' && (\n                    <span className=\"status-success\">✅ Uploaded</span>\n                  )}\n                  {status === 'error' && (\n                    <span className=\"status-error\">❌ Failed</span>\n                  )}\n                </div>\n                \n                <button \n                  onClick={() => removeFile(file.name)}\n                  className=\"remove-file-btn\"\n                  disabled={status === 'uploading'}\n                >\n                  ×\n                </button>\n              </div>\n            );\n          })}\n          \n          <div className=\"upload-actions\">\n            <button \n              onClick={uploadFiles}\n              className=\"btn btn-primary\"\n              disabled={files.every(file => uploadStatus[file.name] !== 'pending')}\n            >\n              Upload Files\n            </button>\n            <button \n              onClick={() => {\n                setFiles([]);\n                setUploadProgress({});\n                setUploadStatus({});\n              }}\n              className=\"btn btn-secondary\"\n            >\n              Clear All\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Main Forms Examples Component\nconst FormsExamples = () => {\n  const [activeTab, setActiveTab] = useState('basic');\n  \n  const tabs = [\n    { id: 'basic', label: 'Basic Form', component: <BasicForm /> },\n    { id: 'validated', label: 'Validated Form', component: <ValidatedForm /> },\n    { id: 'dynamic', label: 'Dynamic Form', component: <DynamicForm /> },\n    { id: 'upload', label: 'File Upload', component: <FileUploadForm /> }\n  ];\n  \n  return (\n    <div className=\"forms-examples\">\n      <h2>Forms and Validation in React</h2>\n      \n      <div className=\"tabs\">\n        <div className=\"tab-list\">\n          {tabs.map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`tab ${activeTab === tab.id ? 'active' : ''}`}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </div>\n        \n        <div className=\"tab-content\">\n          {tabs.find(tab => tab.id === activeTab)?.component}\n        </div>\n      </div>\n      \n      <div className=\"form-best-practices\">\n        <h3>Form Best Practices</h3>\n        <div className=\"practices-grid\">\n          <div className=\"practice\">\n            <h4>1. Controlled Components</h4>\n            <p>Use controlled components for form inputs to maintain single source of truth.</p>\n          </div>\n          <div className=\"practice\">\n            <h4>2. Real-time Validation</h4>\n            <p>Provide immediate feedback as users type or leave fields.</p>\n          </div>\n          <div className=\"practice\">\n            <h4>3. Clear Error Messages</h4>\n            <p>Show specific, actionable error messages near the relevant fields.</p>\n          </div>\n          <div className=\"practice\">\n            <h4>4. Accessibility</h4>\n            <p>Use proper labels, ARIA attributes, and keyboard navigation support.</p>\n          </div>\n          <div className=\"practice\">\n            <h4>5. Progressive Enhancement</h4>\n            <p>Ensure forms work without JavaScript and enhance with React.</p>\n          </div>\n          <div className=\"practice\">\n            <h4>6. Loading States</h4>\n            <p>Show loading indicators during form submission and disable submit buttons.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Main App\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>React Forms and Validation</h1>\n      <p>Learn how to create and validate forms effectively in React applications.</p>\n      \n      <FormsExamples />\n    </div>\n  );\n};\n\nexport default App;",
    "tip": "ប្រើ controlled components, validate នៅពេល user type, និងផ្តល់ clear error messages ដើម្បីធ្វើឱ្យ forms user-friendly"
  },
  {
    "id": 25,
    "category": "React",
    "path": "/react/best-practices",
    "title": "មេរៀនទី២៥: React Best Practices",
    "explanation": "React Best Practices ជួយធ្វើឱ្យកូដ React មានគុណភាពល្អ រក្សាបានងាយ និងដំណើរការបានល្អ។ នេះរួមមានការរៀបចំ components ការប្រើ custom hooks ការធ្វើ performance optimization និងការគ្រប់គ្រង state ប្រកបដោយប្រសិទ្ធភាព។",
    "code": "// 1. Component Organization\n// ✅ Good: Functional Component with proper structure\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { User, Settings } from 'lucide-react';\n\n// 2. TypeScript Interfaces\ninterface UserProps {\n  id: number;\n  name: string;\n  email: string;\n  isActive?: boolean;\n}\n\ninterface UserCardProps {\n  user: UserProps;\n  onEdit: (user: UserProps) => void;\n  onDelete: (id: number) => void;\n}\n\n// 3. Custom Hooks\nconst useLocalStorage = (key: string, initialValue: any) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error('Error reading localStorage:', error);\n      return initialValue;\n    }\n  });\n\n  const setValue = useCallback((value: any) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error('Error setting localStorage:', error);\n    }\n  }, [key]);\n\n  return [storedValue, setValue];\n};\n\n// 4. Error Boundary\nclass ErrorBoundary extends React.Component {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: any) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded\">\n          <h2 className=\"text-red-800\">Something went wrong!</h2>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\n// 5. Memoized Component\nconst UserCard = React.memo<UserCardProps>(({ user, onEdit, onDelete }) => {\n  // Memoized handlers to prevent unnecessary re-renders\n  const handleEdit = useCallback(() => {\n    onEdit(user);\n  }, [onEdit, user]);\n\n  const handleDelete = useCallback(() => {\n    onDelete(user.id);\n  }, [onDelete, user.id]);\n\n  return (\n    <div className=\"bg-white p-4 rounded-lg shadow-sm border\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <User className=\"w-10 h-10 text-gray-400\" />\n          <div>\n            <h3 className=\"font-medium text-gray-900\">{user.name}</h3>\n            <p className=\"text-sm text-gray-500\">{user.email}</p>\n          </div>\n        </div>\n        <div className=\"flex space-x-2\">\n          <button\n            onClick={handleEdit}\n            className=\"px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200\"\n          >\n            Edit\n          </button>\n          <button\n            onClick={handleDelete}\n            className=\"px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200\"\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n});\n\n// 6. Context for Global State\nconst UserContext = React.createContext<{\n  users: UserProps[];\n  addUser: (user: UserProps) => void;\n  updateUser: (user: UserProps) => void;\n  deleteUser: (id: number) => void;\n} | null>(null);\n\n// 7. Context Provider\nconst UserProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [users, setUsers] = useLocalStorage('users', []);\n\n  const addUser = useCallback((user: UserProps) => {\n    setUsers((prev: UserProps[]) => [...prev, user]);\n  }, [setUsers]);\n\n  const updateUser = useCallback((updatedUser: UserProps) => {\n    setUsers((prev: UserProps[]) =>\n      prev.map(user => user.id === updatedUser.id ? updatedUser : user)\n    );\n  }, [setUsers]);\n\n  const deleteUser = useCallback((id: number) => {\n    setUsers((prev: UserProps[]) => prev.filter(user => user.id !== id));\n  }, [setUsers]);\n\n  const value = useMemo(() => ({\n    users,\n    addUser,\n    updateUser,\n    deleteUser\n  }), [users, addUser, updateUser, deleteUser]);\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\n// 8. Custom Hook for Context\nconst useUsers = () => {\n  const context = React.useContext(UserContext);\n  if (!context) {\n    throw new Error('useUsers must be used within UserProvider');\n  }\n  return context;\n};\n\n// 9. Main Component with Best Practices\nconst UserManagement: React.FC = () => {\n  const { users, updateUser, deleteUser } = useUsers();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Memoized filtered users\n  const filteredUsers = useMemo(() => {\n    return users.filter(user =>\n      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [users, searchTerm]);\n\n  // Effect for data fetching\n  useEffect(() => {\n    const fetchUsers = async () => {\n      setIsLoading(true);\n      try {\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (users.length === 0) {\n      fetchUsers();\n    }\n  }, [users.length]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <h1 className=\"text-2xl font-bold mb-6\">User Management</h1>\n      \n      {/* Search Input */}\n      <div className=\"mb-6\">\n        <input\n          type=\"text\"\n          placeholder=\"Search users...\"\n          value={searchTerm}\n          onChange={handleSearch}\n          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n\n      {/* Users List */}\n      <div className=\"space-y-4\">\n        {filteredUsers.length > 0 ? (\n          filteredUsers.map(user => (\n            <UserCard\n              key={user.id}\n              user={user}\n              onEdit={updateUser}\n              onDelete={deleteUser}\n            />\n          ))\n        ) : (\n          <p className=\"text-gray-500 text-center py-8\">\n            No users found\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// 10. Main App with Error Boundary and Context\nconst App: React.FC = () => {\n  return (\n    <ErrorBoundary>\n      <UserProvider>\n        <div className=\"min-h-screen bg-gray-50\">\n          <UserManagement />\n        </div>\n      </UserProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;\n\n// 11. Additional Utility Functions\n// Debounce hook for performance\nconst useDebounce = (value: any, delay: number) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\n// API utility\nconst api = {\n  get: async (url: string) => {\n    const response = await fetch(url);\n    if (!response.ok) throw new Error('Network error');\n    return response.json();\n  },\n  \n  post: async (url: string, data: any) => {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) throw new Error('Network error');\n    return response.json();\n  }\n};",
    "tip": "ប្រើ React.memo, useCallback, និង useMemo ដើម្បីធ្វើ performance optimization និងគ្រប់គ្រង state ជាមួយ Context API"
  },
  
  {
    "id": 1,
    "category": "C#",
    "path": "/csharp/introduction",
    "title": "មេរៀនទី១: បុព្វហេតុ C# (Introduction to C#)",
    "explanation": "C# (C Sharp) គឺជាភាសាកម្មវិធីដែលបង្កើតឡើងដោយក្រុមហ៊ុន Microsoft។ វាជាភាសាដែលមានលក្ខណៈ Object-Oriented Programming និងត្រូវបានប្រើប្រាស់យ៉ាងទូលំទូលាយក្នុងការបង្កើតកម្មវិធីផ្សេងៗ។ C# ដំណើរការលើ .NET Framework ហើយមានសុវត្ថិភាពខ្ពស់។",
    "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"សួស្តីពិភពលោក!\");\n        Console.WriteLine(\"នេះគឺជាកម្មវិធី C# ដំបូងរបស់ខ្ញុំ\");\n    }\n}",
    "tip": "ត្រូវតែមាន using System; នៅផ្នែកខាងលើដើម្បីប្រើប្រាស់ Console.WriteLine()"
  },
  {
    "id": 2,
    "category": "C#",
    "path": "/csharp/variables",
    "title": "មេរៀនទី២: អថេរ (Variables)",
    "explanation": "អថេរគឺជាកន្លែងផ្ទុកទិន្នន័យក្នុងកម្មវិធី។ នៅក្នុង C# យើងត្រូវកំណត់ប្រភេទទិន្នន័យ (Data Type) មុនពេលប្រើប្រាស់អថេរ។ ប្រភេទទិន្នន័យមូលដ្ឋានរួមមាន int, string, double, bool។",
    "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // អថេរចំនួនគត់\n        int age = 25;\n        \n        // អថេរអក្សរ\n        string name = \"សុខា\";\n        \n        // អថេរទសភាគ\n        double price = 15.50;\n        \n        // អថេរ Boolean\n        bool isStudent = true;\n        \n        Console.WriteLine($\"ឈ្មោះ: {name}\");\n        Console.WriteLine($\"អាយុ: {age} ឆ្នាំ\");\n        Console.WriteLine($\"តម្លៃ: ${price}\");\n        Console.WriteLine($\"សិស្ស: {isStudent}\");\n    }\n}",
    "tip": "ប្រើ $ មុនអក្សរដើម្បីធ្វើ String Interpolation និងដាក់អថេរក្នុង {}"
  },
  {
    "id": 3,
    "category": "C#",
    "path": "/csharp/data-types",
    "title": "មេរៀនទី៣: ប្រភេទទិន្នន័យ (Data Types)",
    "explanation": "C# មានប្រភេទទិន្នន័យជាច្រើនប្រភេទ។ Value Types រួមមាន int, double, bool, char។ Reference Types រួមមាន string, array, class។ ការយល់ដឹងអំពីប្រភេទទិន្នន័យជួយក្នុងការប្រើប្រាស់អថេរឱ្យបានត្រឹមត្រូវ។",
    "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // ចំនួនគត់\n        int studentCount = 30;\n        long population = 16000000L;\n        \n        // ចំនួនទសភាគ\n        float temperature = 32.5f;\n        double distance = 384400.0;\n        \n        // តួអក្សរ\n        char grade = 'A';\n        string message = \"ជោគជ័យ!\";\n        \n        // Boolean\n        bool isPassed = true;\n        \n        Console.WriteLine($\"ចំនួនសិស្ស: {studentCount}\");\n        Console.WriteLine($\"ប្រជាជន: {population:N0}\");\n        Console.WriteLine($\"សីតុណ្ហភាព: {temperature}°C\");\n        Console.WriteLine($\"ចម្ងាយ: {distance:N0} km\");\n        Console.WriteLine($\"ពិន្ទុ: {grade}\");\n        Console.WriteLine($\"សារ: {message}\");\n        Console.WriteLine($\"ជាប់: {isPassed}\");\n    }\n}",
    "tip": "ប្រើ :N0 ដើម្បីបង្ហាញចំនួនជាមួយសញ្ញាក្បៀស (comma separator)"
  },
  {
    "id": 4,
    "category": "C#",
    "path": "/csharp/operators",
    "title": "មេរៀនទី៤: សញ្ញាប្រមាណវិធី (Operators)",
    "explanation": "សញ្ញាប្រមាណវិធីគឺជាសញ្ញាដែលប្រើសម្រាប់ធ្វើប្រមាណវិធីលើទិន្នន័យ។ មានសញ្ញាគណិតវិទ្យា (+, -, *, /), សញ្ញាប្រៀបធៀប (==, !=, <, >), និងសញ្ញាតក្កវិទ្យា (&&, ||, !)។",
    "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int a = 10;\n        int b = 3;\n        \n        // សញ្ញាគណិតវិទ្យា\n        Console.WriteLine($\"បូក: {a} + {b} = {a + b}\");\n        Console.WriteLine($\"ដក: {a} - {b} = {a - b}\");\n        Console.WriteLine($\"គុណ: {a} * {b} = {a * b}\");\n        Console.WriteLine($\"ចែក: {a} / {b} = {a / b}\");\n        Console.WriteLine($\"សំណល់: {a} % {b} = {a % b}\");\n        \n        // សញ្ញាប្រៀបធៀប\n        Console.WriteLine($\"{a} == {b}: {a == b}\");\n        Console.WriteLine($\"{a} > {b}: {a > b}\");\n        Console.WriteLine($\"{a} < {b}: {a < b}\");\n        \n        // សញ្ញាតក្កវិទ្យា\n        bool x = true;\n        bool y = false;\n        Console.WriteLine($\"x && y: {x && y}\");\n        Console.WriteLine($\"x || y: {x || y}\");\n        Console.WriteLine($\"!x: {!x}\");\n    }\n}",
    "tip": "សញ្ញា % ប្រើសម្រាប់រកសំណល់នៃការចែក (modulo operator)"
  },
  {
    "id": 5,
    "category": "C#",
    "path": "/csharp/input-output",
    "title": "មេរៀនទី៥: ការបញ្ចូលនិងបង្ហាញទិន្នន័យ (Input/Output)",
    "explanation": "ការទទួលទិន្នន័យពីអ្នកប្រើប្រាស់និងបង្ហាញលទ្ធផលគឺជាមុខងារសំខាន់។ Console.ReadLine() ប្រើសម្រាប់ទទួលទិន្នន័យ ហើយ Console.WriteLine() ប្រើសម្រាប់បង្ហាញទិន្នន័យ។",
    "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // ទទួលទិន្នន័យពីអ្នកប្រើប្រាស់\n        Console.Write(\"សូមបញ្ចូលឈ្មោះរបស់អ្នក: \");\n        string name = Console.ReadLine();\n        \n        Console.Write(\"សូមបញ្ចូលអាយុរបស់អ្នក: \");\n        string ageInput = Console.ReadLine();\n        int age = int.Parse(ageInput);\n        \n        Console.Write(\"សូមបញ្ចូលកម្ពស់របស់អ្នក (ម៉ែត្រ): \");\n        double height = double.Parse(Console.ReadLine());\n        \n        // បង្ហាញលទ្ធផល\n        Console.WriteLine(\"\\n--- ព័ត៌មានរបស់អ្នក ---\");\n        Console.WriteLine($\"ឈ្មោះ: {name}\");\n        Console.WriteLine($\"អាយុ: {age} ឆ្នាំ\");\n        Console.WriteLine($\"កម្ពស់: {height:F2} ម៉ែត្រ\");\n        \n        // គណនាឆ្នាំកំណើត\n        int birthYear = DateTime.Now.Year - age;\n        Console.WriteLine($\"ឆ្នាំកំណើត: {birthYear}\");\n    }\n}",
    "tip": "ប្រើ int.Parse() ឬ double.Parse() ដើម្បីបំលែងអក្សរទៅជាចំនួន"
  },
  {
    "id": 6,
    "category": "C#",
    "path": "/csharp/conditional-statements",
    "title": "មេរៀនទី៦: សេចក្តីថ្លែងការណ៍លក្ខខណ្ឌ (Conditional Statements)",
    "explanation": "សេចក្តីថ្លែងការណ៍លក្ខខណ្ឌអនុញ្ញាតឱ្យកម្មវិធីធ្វើការសម្រេចចិត្ត។ if-else ប្រើសម្រាប់ពិនិត្យលក្ខខណ្ឌ។ switch ប្រើសម្រាប់ពិនិត្យតម្លៃជាច្រើន។",
    "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.Write(\"សូមបញ្ចូលពិន្ទុរបស់អ្នក (0-100): \");\n        int score = int.Parse(Console.ReadLine());\n        \n        // if-else statement\n        string grade;\n        if (score >= 90)\n        {\n            grade = \"A\";\n        }\n        else if (score >= 80)\n        {\n            grade = \"B\";\n        }\n        else if (score >= 70)\n        {\n            grade = \"C\";\n        }\n        else if (score >= 60)\n        {\n            grade = \"D\";\n        }\n        else\n        {\n            grade = \"F\";\n        }\n        \n        Console.WriteLine($\"ពិន្ទុ: {score}\");\n        Console.WriteLine($\"ថ្នាក់: {grade}\");\n        \n        // switch statement\n        switch (grade)\n        {\n            case \"A\":\n                Console.WriteLine(\"ល្អប្រសើរ!\");\n                break;\n            case \"B\":\n                Console.WriteLine(\"ល្អ!\");\n                break;\n            case \"C\":\n                Console.WriteLine(\"មធ្យម!\");\n                break;\n            case \"D\":\n                Console.WriteLine(\"ត្រូវការកែលម្អ!\");\n                break;\n            case \"F\":\n                Console.WriteLine(\"មិនជាប់!\");\n                break;\n        }\n    }\n}",
    "tip": "កុំភ្លេច break; នៅចុងបញ្ចប់នៃ case នីមួយៗក្នុង switch statement"
  },
  {
    "id": 7,
    "category": "C#",
    "path": "/csharp/loops",
    "title": "មេរៀនទី៧: រង្វិលជុំ (Loops)",
    "explanation": "រង្វិលជុំអនុញ្ញាតឱ្យកម្មវិធីធ្វើការម្តងហើយម្តងទៀត។ for loop ប្រើសម្រាប់ចំនួនដងកំណត់។ while loop ប្រើសម្រាប់លក្ខខណ្ឌ។ foreach loop ប្រើសម្រាប់ collection។",
    "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== For Loop ===\");\n        // for loop - រាប់ពី 1 ដល់ 5\n        for (int i = 1; i <= 5; i++)\n        {\n            Console.WriteLine($\"លេខ: {i}\");\n        }\n        \n        Console.WriteLine(\"\\n=== While Loop ===\");\n        // while loop - រាប់ថយក្រោយ\n        int count = 5;\n        while (count > 0)\n        {\n            Console.WriteLine($\"នៅសល់: {count}\");\n            count--;\n        }\n        \n        Console.WriteLine(\"\\n=== Do-While Loop ===\");\n        // do-while loop - ធ្វើយ៉ាងហោចណាស់ម្តង\n        int number;\n        do\n        {\n            Console.Write(\"បញ្ចូលលេខ 0 ដើម្បីចេញ: \");\n            number = int.Parse(Console.ReadLine());\n            if (number != 0)\n            {\n                Console.WriteLine($\"អ្នកបានបញ្ចូល: {number}\");\n            }\n        } while (number != 0);\n        \n        Console.WriteLine(\"\\n=== Foreach Loop ===\");\n        // foreach loop - ជាមួយ array\n        string[] fruits = {\"ស្វាយ\", \"ចេក\", \"ល្ហុង\", \"ម្នាស់\"};\n        foreach (string fruit in fruits)\n        {\n            Console.WriteLine($\"ផ្លែឈើ: {fruit}\");\n        }\n    }\n}",
    "tip": "ប្រើ break; ដើម្បីចេញពី loop និង continue; ដើម្បីរំលងទៅ iteration បន្ទាប់"
  },
  {
    "id": 8,
    "category": "C#",
    "path": "/csharp/arrays",
    "title": "មេរៀនទី៨: អារេ (Arrays)",
    "explanation": "អារេគឺជាការប្រមូលផ្តុំនៃធាតុដែលមានប្រភេទដូចគ្នា។ វាអនុញ្ញាតឱ្យយើងរក្សាទុកតម្លៃជាច្រើនក្នុងអថេរតែមួយ។ អារេក្នុង C# មានទំហំថេរ និងចាប់ផ្តើមពី index 0។",
    "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // បង្កើតអារេ\n        int[] numbers = {10, 20, 30, 40, 50};\n        string[] students = new string[3];\n        \n        // បំពេញអារេ\n        students[0] = \"សុខា\";\n        students[1] = \"ចន្ទា\";\n        students[2] = \"វិចិត្រ\";\n        \n        // បង្ហាញធាតុអារេ\n        Console.WriteLine(\"=== លេខ ===\");\n        for (int i = 0; i < numbers.Length; i++)\n        {\n            Console.WriteLine($\"numbers[{i}] = {numbers[i]}\");\n        }\n        \n        Console.WriteLine(\"\\n=== ឈ្មោះសិស្ស ===\");\n        foreach (string student in students)\n        {\n            Console.WriteLine($\"សិស្ស: {student}\");\n        }\n        \n        // គណនាផលបូក និងមធ្យម\n        int sum = 0;\n        foreach (int num in numbers)\n        {\n            sum += num;\n        }\n        double average = (double)sum / numbers.Length;\n        \n        Console.WriteLine($\"\\nផលបូក: {sum}\");\n        Console.WriteLine($\"មធ្យម: {average:F2}\");\n        Console.WriteLine($\"ចំនួនធាតុ: {numbers.Length}\");\n        \n        // រកតម្លៃធំបំផុត\n        int max = numbers[0];\n        foreach (int num in numbers)\n        {\n            if (num > max)\n                max = num;\n        }\n        Console.WriteLine($\"តម្លៃធំបំផុត: {max}\");\n    }\n}",
    "tip": "ប្រើ .Length ដើម្បីទទួលបានចំនួនធាតុក្នុងអារេ"
  },
  {
    "id": 9,
    "category": "C#",
    "path": "/csharp/methods",
    "title": "មេរៀនទី៩: វិធីសាស្ត្រ (Methods)",
    "explanation": "វិធីសាស្ត្រគឺជាប្លុកកូដដែលអាចហៅប្រើបាន។ វាជួយធ្វើឱ្យកូដមានការរៀបចំល្អ និងអាចប្រើប្រាស់ឡើងវិញបាន។ វិធីសាស្ត្រអាចទទួលប៉ារ៉ាម៉ែត្រ និងត្រឡប់តម្លៃ។",
    "code": "using System;\n\nclass Program\n{\n    // វិធីសាស្ត្រមិនត្រឡប់តម្លៃ (void)\n    static void SayHello(string name)\n    {\n        Console.WriteLine($\"សួស្តី {name}!\");\n    }\n    \n    // វិធីសាស្ត្រត្រឡប់តម្លៃ\n    static int Add(int a, int b)\n    {\n        return a + b;\n    }\n    \n    // វិធីសាស្ត្រគណនាផ្ទៃក្រឡាចតុកោណ\n    static double CalculateRectangleArea(double width, double height)\n    {\n        return width * height;\n    }\n    \n    // វិធីសាស្ត្រពិនិត្យលេខគូ-សេស\n    static bool IsEven(int number)\n    {\n        return number % 2 == 0;\n    }\n    \n    // វិធីសាស្ត្ររកតម្លៃធំបំផុត\n    static int FindMax(int[] numbers)\n    {\n        int max = numbers[0];\n        foreach (int num in numbers)\n        {\n            if (num > max)\n                max = num;\n        }\n        return max;\n    }\n    \n    static void Main()\n    {\n        // ហៅវិធីសាស្ត្រ\n        SayHello(\"សុខា\");\n        \n        int result = Add(15, 25);\n        Console.WriteLine($\"15 + 25 = {result}\");\n        \n        double area = CalculateRectangleArea(5.5, 3.2);\n        Console.WriteLine($\"ផ្ទៃក្រឡា: {area:F2} ម៉ែត្រការ៉េ\");\n        \n        int testNumber = 8;\n        if (IsEven(testNumber))\n        {\n            Console.WriteLine($\"{testNumber} គឺជាលេខគូ\");\n        }\n        else\n        {\n            Console.WriteLine($\"{testNumber} គឺជាលេខសេស\");\n        }\n        \n        int[] scores = {85, 92, 78, 96, 88};\n        int maxScore = FindMax(scores);\n        Console.WriteLine($\"ពិន្ទុខ្ពស់បំផុត: {maxScore}\");\n    }\n}",
    "tip": "ប្រើ static សម្រាប់វិធីសាស្ត្រដែលមិនត្រូវការ object instance"
  },
  {
    "id": 10,
    "category": "C#",
    "path": "/csharp/classes-objects",
    "title": "មេរៀនទី១០: ថ្នាក់និងវត្ថុ (Classes and Objects)",
    "explanation": "ថ្នាក់ (Class) គឺជាគំរូសម្រាប់បង្កើតវត្ថុ (Object)។ វត្ថុគឺជា instance នៃថ្នាក់។ ថ្នាក់មានលក្ខណៈ (Properties) និងវិធីសាស្ត្រ (Methods) ដែលកំណត់អាកប្បកិរិយារបស់វត្ថុ។",
    "code": "using System;\n\n// កំណត់ថ្នាក់ Student\nclass Student\n{\n    // លក្ខណៈ (Properties)\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Grade { get; set; }\n    public double[] Scores { get; set; }\n    \n    // Constructor\n    public Student(string name, int age, string grade)\n    {\n        Name = name;\n        Age = age;\n        Grade = grade;\n        Scores = new double[0];\n    }\n    \n    // វិធីសាស្ត្របង្ហាញព័ត៌មាន\n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"ឈ្មោះ: {Name}\");\n        Console.WriteLine($\"អាយុ: {Age} ឆ្នាំ\");\n        Console.WriteLine($\"ថ្នាក់: {Grade}\");\n    }\n    \n    // វិធីសាស្ត្រកំណត់ពិន្ទុ\n    public void SetScores(params double[] scores)\n    {\n        Scores = scores;\n    }\n    \n    // វិធីសាស្ត្រគណនាមធ្យម\n    public double CalculateAverage()\n    {\n        if (Scores.Length == 0) return 0;\n        \n        double sum = 0;\n        foreach (double score in Scores)\n        {\n            sum += score;\n        }\n        return sum / Scores.Length;\n    }\n    \n    // វិធីសាស្ត្រពិនិត្យជាប់ឬអត់\n    public bool IsPassed()\n    {\n        return CalculateAverage() >= 60;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // បង្កើតវត្ថុ Student\n        Student student1 = new Student(\"សុខា\", 16, \"ថ្នាក់ទី១០\");\n        Student student2 = new Student(\"ចន្ទា\", 17, \"ថ្នាក់ទី១១\");\n        \n        // កំណត់ពិន្ទុ\n        student1.SetScores(85.5, 92.0, 78.5, 88.0, 91.5);\n        student2.SetScores(72.0, 68.5, 75.0, 70.5, 73.5);\n        \n        // បង្ហាញព័ត៌មានសិស្ស\n        Console.WriteLine(\"=== ព័ត៌មានសិស្សទី១ ===\");\n        student1.DisplayInfo();\n        Console.WriteLine($\"មធ្យម: {student1.CalculateAverage():F2}\");\n        Console.WriteLine($\"ស្ថានភាព: {(student1.IsPassed() ? \"ជាប់\" : \"ធ្លាក់\")}\");\n        \n        Console.WriteLine(\"\\n=== ព័ត៌មានសិស្សទី២ ===\");\n        student2.DisplayInfo();\n        Console.WriteLine($\"មធ្យម: {student2.CalculateAverage():F2}\");\n        Console.WriteLine($\"ស្ថានភាព: {(student2.IsPassed() ? \"ជាប់\" : \"ធ្លាក់\")}\");\n    }\n}",
    "tip": "ប្រើ public ដើម្បីអនុញ្ញាតឱ្យ access ពីខាងក្រៅថ្នាក់"
  },
  {
    "id": 11,
    "category": "C#",
    "path": "/csharp/inheritance",
    "title": "មេរៀនទី១១: ការទទួលមរតក (Inheritance)",
    "explanation": "ការទទួលមរតកអនុញ្ញាតឱ្យថ្នាក់មួយទទួលបានលក្ខណៈនិងវិធីសាស្ត្រពីថ្នាក់ផ្សេង។ ថ្នាក់ដែលផ្តល់មរតកហៅថា Base Class ឬ Parent Class។ ថ្នាក់ដែលទទួលមរតកហៅថា Derived Class ឬ Child Class។",
    "code": "using System;\n\n// ថ្នាក់មូលដ្ឋាន (Base Class)\nclass Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Address { get; set; }\n    \n    public Person(string name, int age, string address)\n    {\n        Name = name;\n        Age = age;\n        Address = address;\n    }\n    \n    public virtual void DisplayInfo()\n    {\n        Console.WriteLine($\"ឈ្មោះ: {Name}\");\n        Console.WriteLine($\"អាយុ: {Age} ឆ្នាំ\");\n        Console.WriteLine($\"អាសយដ្ឋាន: {Address}\");\n    }\n    \n    public void Greet()\n    {\n        Console.WriteLine($\"សួស្តី! ខ្ញុំឈ្មោះ {Name}\");\n    }\n}\n\n// ថ្នាក់កូន (Derived Class) - សិស្ស\nclass Student : Person\n{\n    public string StudentId { get; set; }\n    public string School { get; set; }\n    public double GPA { get; set; }\n    \n    public Student(string name, int age, string address, string studentId, string school) \n        : base(name, age, address)\n    {\n        StudentId = studentId;\n        School = school;\n        GPA = 0.0;\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo(); // ហៅវិធីសាស្ត្រពីថ្នាក់មាតា\n        Console.WriteLine($\"លេខសម្គាល់: {StudentId}\");\n        Console.WriteLine($\"សាលា: {School}\");\n        Console.WriteLine($\"GPA: {GPA:F2}\");\n    }\n    \n    public void Study(string subject)\n    {\n        Console.WriteLine($\"{Name} កំពុងរៀន {subject}\");\n    }\n}\n\n// ថ្នាក់កូន (Derived Class) - គ្រូ\nclass Teacher : Person\n{\n    public string EmployeeId { get; set; }\n    public string Subject { get; set; }\n    public double Salary { get; set; }\n    \n    public Teacher(string name, int age, string address, string employeeId, string subject, double salary) \n        : base(name, age, address)\n    {\n        EmployeeId = employeeId;\n        Subject = subject;\n        Salary = salary;\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo();\n        Console.WriteLine($\"លេខបុគ្គលិក: {EmployeeId}\");\n        Console.WriteLine($\"មុខវិជ្ជា: {Subject}\");\n        Console.WriteLine($\"ប្រាក់ខែ: ${Salary:N0}\");\n    }\n    \n    public void Teach()\n    {\n        Console.WriteLine($\"គ្រូ {Name} កំពុងបង្រៀន {Subject}\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // បង្កើតវត្ថុសិស្ស\n        Student student = new Student(\"សុខា\", 16, \"ភ្នំពេញ\", \"S001\", \"វិទ្យាល័យហ៊ុនសែន\");\n        student.GPA = 3.75;\n        \n        // បង្កើតវត្ថុគ្រូ\n        Teacher teacher = new Teacher(\"លោកគ្រូ វិចិត្រ\", 35, \"ភ្នំពេញ\", \"T001\", \"គណិតវិទ្យា\", 800);\n        \n        Console.WriteLine(\"=== ព័ត៌មានសិស្ស ===\");\n        student.DisplayInfo();\n        student.Greet();\n        student.Study(\"គណិតវិទ្យា\");\n        \n        Console.WriteLine(\"\\n=== ព័ត៌មានគ្រូ ===\");\n        teacher.DisplayInfo();\n        teacher.Greet();\n        teacher.Teach();\n    }\n}",
    "tip": "ប្រើ virtual និង override ដើម្បី override វិធីសាស្ត្រពីថ្នាក់មាតា"
  },
  {
    "id": 12,
    "category": "C#",
    "path": "/csharp/polymorphism",
    "title": "មេរៀនទី១២: ពហុរូបភាព (Polymorphism)",
    "explanation": "ពហុរូបភាពអនុញ្ញាតឱ្យវត្ថុនៃថ្នាក់ផ្សេងៗអាចត្រូវបានប្រើប្រាស់តាមរយៈ interface ដូចគ្នា។ វាអនុញ្ញាតឱ្យវិធីសាស្ត្រដូចគ្នាមានអាកប្បកិរិយាផ្សេងៗគ្នាអាស្រ័យលើប្រភេទវត្ថុ។",
    "code": "using System;\nusing System.Collections.Generic;\n\n// ថ្នាក់មូលដ្ឋាន\nabstract class Animal\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    \n    public Animal(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n    \n    // វិធីសាស្ត្រ abstract ត្រូវតែ implement ក្នុងថ្នាក់កូន\n    public abstract void MakeSound();\n    public abstract void Move();\n    \n    // វិធីសាស្ត្រធម្មតា\n    public virtual void DisplayInfo()\n    {\n        Console.WriteLine($\"ឈ្មោះ: {Name}, អាយុ: {Age} ឆ្នាំ\");\n    }\n    \n    public void Sleep()\n    {\n        Console.WriteLine($\"{Name} កំពុងគេង\");\n    }\n}\n\n// ថ្នាក់កូន - ឆ្កែ\nclass Dog : Animal\n{\n    public string Breed { get; set; }\n    \n    public Dog(string name, int age, string breed) : base(name, age)\n    {\n        Breed = breed;\n    }\n    \n    public override void MakeSound()\n    {\n        Console.WriteLine($\"{Name} ស្រែក: ហ្វូវ! ហ្វូវ!\");\n    }\n    \n    public override void Move()\n    {\n        Console.WriteLine($\"{Name} កំពុងរត់\");\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo();\n        Console.WriteLine($\"ពូជ: {Breed}\");\n    }\n    \n    public void Fetch()\n    {\n        Console.WriteLine($\"{Name} កំពុងយកបាល់មក\");\n    }\n}\n\n// ថ្នាក់កូន - ឆ្មា\nclass Cat : Animal\n{\n    public bool IsIndoor { get; set; }\n    \n    public Cat(string name, int age, bool isIndoor) : base(name, age)\n    {\n        IsIndoor = isIndoor;\n    }\n    \n    public override void MakeSound()\n    {\n        Console.WriteLine($\"{Name} ស្រែក: មៀវ! មៀវ!\");\n    }\n    \n    public override void Move()\n    {\n        Console.WriteLine($\"{Name} កំពុងដើរស្ងាត់ៗ\");\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo();\n        Console.WriteLine($\"នៅក្នុងផ្ទះ: {(IsIndoor ? \"បាទ\" : \"ទេ\")}\");\n    }\n    \n    public void Climb()\n    {\n        Console.WriteLine($\"{Name} កំពុងឡើងដើមឈើ\");\n    }\n}\n\n// ថ្នាក់កូន - បក្សី\nclass Bird : Animal\n{\n    public bool CanFly { get; set; }\n    \n    public Bird(string name, int age, bool canFly) : base(name, age)\n    {\n        CanFly = canFly;\n    }\n    \n    public override void MakeSound()\n    {\n        Console.WriteLine($\"{Name} ស្រែក: ជីប! ជីប!\");\n    }\n    \n    public override void Move()\n    {\n        if (CanFly)\n            Console.WriteLine($\"{Name} កំពុងហោះ\");\n        else\n            Console.WriteLine($\"{Name} កំពុងដើរ\");\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo();\n        Console.WriteLine($\"អាចហោះបាន: {(CanFly ? \"បាទ\" : \"ទេ\")}\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // បង្កើត array នៃ Animal (Polymorphism)\n        Animal[] animals = {\n            new Dog(\"ប៊ូឌី\", 3, \"Golden Retriever\"),\n            new Cat(\"មីមី\", 2, true),\n            new Bird(\"ពីកូ\", 1, true)\n        };\n        \n        Console.WriteLine(\"=== ព័ត៌មានសត្វទាំងអស់ ===\");\n        foreach (Animal animal in animals)\n        {\n            Console.WriteLine($\"\\n--- {animal.GetType().Name} ---\");\n            animal.DisplayInfo();\n            animal.MakeSound();  // Polymorphic behavior\n            animal.Move();       // Polymorphic behavior\n            animal.Sleep();\n            \n            // Type checking និង casting\n            if (animal is Dog dog)\n            {\n                dog.Fetch();\n            }\n            else if (animal is Cat cat)\n            {\n                cat.Climb();\n            }\n        }\n        \n        Console.WriteLine(\"\\n=== ការបង្ហាញ Polymorphism ===\");\n        MakeAnimalSound(new Dog(\"ម៉ាក់ស៍\", 4, \"Bulldog\"));\n        MakeAnimalSound(new Cat(\"ឡូឡា\", 3, false));\n        MakeAnimalSound(new Bird(\"ទ្វីធី\", 2, true));\n    }\n    \n    // វិធីសាស្ត្រដែលទទួល Animal ប៉ារ៉ាម៉ែត្រ (Polymorphism)\n    static void MakeAnimalSound(Animal animal)\n    {\n        Console.WriteLine($\"សត្វ {animal.Name}:\");\n        animal.MakeSound();\n    }\n}",
    "tip": "ប្រើ abstract class នៅពេលចង់បង្ខំឱ្យថ្នាក់កូន implement វិធីសាស្ត្រជាក់លាក់"
  },
  {
    "id": 13,
    "category": "C#",
    "path": "/csharp/interfaces",
    "title": "មេរៀនទី១៣: ចំណុចប្រទាក់ (Interfaces)",
    "explanation": "Interface គឺជាកិច្ចសន្យាដែលកំណត់វិធីសាស្ត្រដែលថ្នាក់ត្រូវតែ implement។ Interface មិនមានការ implement ទេ គ្រាន់តែកំណត់ signature។ ថ្នាក់មួយអាច implement interface ច្រើន។",
    "code": "using System;\nusing System.Collections.Generic;\n\n// Interface សម្រាប់ការធ្វើចលនា\ninterface IMovable\n{\n    void Move();\n    double Speed { get; set; }\n}\n\n// Interface សម្រាប់ការបង្កើតសំឡេង\ninterface ISoundMaker\n{\n    void MakeSound();\n    int Volume { get; set; }\n}\n\n// Interface សម្រាប់ការបង្ហាញព័ត៌មាន\ninterface IDisplayable\n{\n    void DisplayInfo();\n}\n\n// ថ្នាក់រថយន្ត implement interfaces ច្រើន\nclass Car : IMovable, ISoundMaker, IDisplayable\n{\n    public string Brand { get; set; }\n    public string Model { get; set; }\n    public double Speed { get; set; }\n    public int Volume { get; set; }\n    public string Color { get; set; }\n    \n    public Car(string brand, string model, string color)\n    {\n        Brand = brand;\n        Model = model;\n        Color = color;\n        Speed = 0;\n        Volume = 50;\n    }\n    \n    public void Move()\n    {\n        Console.WriteLine($\"{Brand} {Model} កំពុងបើកដំណើរក្នុងល្បឿន {Speed} km/h\");\n    }\n    \n    public void MakeSound()\n    {\n        Console.WriteLine($\"{Brand} {Model} បន្លឺសំឡេង: ប៊ីប! ប៊ីប! (កម្រិតសំឡេង: {Volume})\");\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"រថយន្ត: {Brand} {Model}\");\n        Console.WriteLine($\"ពណ៌: {Color}\");\n        Console.WriteLine($\"ល្បឿន: {Speed} km/h\");\n    }\n    \n    public void StartEngine()\n    {\n        Console.WriteLine($\"{Brand} {Model} ចាប់ផ្តើមម៉ាស៊ីន\");\n        Speed = 10;\n    }\n}\n\n// ថ្នាក់កង់ implement interfaces\nclass Bicycle : IMovable, IDisplayable\n{\n    public string Type { get; set; }\n    public double Speed { get; set; }\n    public int Gears { get; set; }\n    \n    public Bicycle(string type, int gears)\n    {\n        Type = type;\n        Gears = gears;\n        Speed = 0;\n    }\n    \n    public void Move()\n    {\n        Console.WriteLine($\"កង់ {Type} កំពុងបើកក្នុងល្បឿន {Speed} km/h\");\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"កង់: {Type}\");\n        Console.WriteLine($\"ចំនួនហ្គីយ៉ា: {Gears}\");\n        Console.WriteLine($\"ល្បឿន: {Speed} km/h\");\n    }\n    \n    public void Pedal()\n    {\n        Speed += 5;\n        Console.WriteLine($\"កំពុងជិះកង់... ល្បឿនបានកើនឡើងទៅ {Speed} km/h\");\n    }\n}\n\n// ថ្នាក់ Robot implement interfaces ទាំងអស់\nclass Robot : IMovable, ISoundMaker, IDisplayable\n{\n    public string Name { get; set; }\n    public string Model { get; set; }\n    public double Speed { get; set; }\n    public int Volume { get; set; }\n    public int BatteryLevel { get; set; }\n    \n    public Robot(string name, string model)\n    {\n        Name = name;\n        Model = model;\n        Speed = 0;\n        Volume = 30;\n        BatteryLevel = 100;\n    }\n    \n    public void Move()\n    {\n        if (BatteryLevel > 10)\n        {\n            Console.WriteLine($\"Robot {Name} កំពុងដើរក្នុងល្បឿន {Speed} km/h\");\n            BatteryLevel -= 5;\n        }\n        else\n        {\n            Console.WriteLine($\"Robot {Name} អស់ថ្ម! ត្រូវការសាកថ្ម\");\n        }\n    }\n    \n    public void MakeSound()\n    {\n        Console.WriteLine($\"Robot {Name}: ប៊ីប ប៊ូប! (កម្រិតសំឡេង: {Volume})\");\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"Robot: {Name} ({Model})\");\n        Console.WriteLine($\"កម្រិតថ្ម: {BatteryLevel}%\");\n        Console.WriteLine($\"ល្បឿន: {Speed} km/h\");\n    }\n    \n    public void ChargeBattery()\n    {\n        BatteryLevel = 100;\n        Console.WriteLine($\"Robot {Name} បានសាកថ្មពេញ!\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // បង្កើតវត្ថុផ្សេងៗ\n        Car car = new Car(\"Toyota\", \"Camry\", \"ស\");\n        Bicycle bike = new Bicycle(\"Mountain Bike\", 21);\n        Robot robot = new Robot(\"R2D2\", \"Astromech\");\n        \n        // ប្រើ Interface polymorphism\n        List<IMovable> movableObjects = new List<IMovable> { car, bike, robot };\n        List<ISoundMaker> soundMakers = new List<ISoundMaker> { car, robot };\n        List<IDisplayable> displayableObjects = new List<IDisplayable> { car, bike, robot };\n        \n        Console.WriteLine(\"=== បង្ហាញព័ត៌មានវត្ថុទាំងអស់ ===\");\n        foreach (IDisplayable obj in displayableObjects)\n        {\n            obj.DisplayInfo();\n            Console.WriteLine();\n        }\n        \n        Console.WriteLine(\"=== ធ្វើឱ្យវត្ថុទាំងអស់ធ្វើចលនា ===\");\n        car.StartEngine();\n        bike.Pedal();\n        robot.Speed = 8;\n        \n        foreach (IMovable obj in movableObjects)\n        {\n            obj.Move();\n        }\n        \n        Console.WriteLine(\"\\n=== ធ្វើឱ្យវត្ថុបង្កើតសំឡេង ===\");\n        foreach (ISoundMaker obj in soundMakers)\n        {\n            obj.MakeSound();\n        }\n        \n        Console.WriteLine(\"\\n=== ពិសោធន៍ Robot ===\");\n        for (int i = 0; i < 25; i++)\n        {\n            robot.Move();\n        }\n        robot.ChargeBattery();\n        robot.Move();\n    }\n}",
    "tip": "Interface names ជាធម្មតាចាប់ផ្តើមដោយអក្សរ I (ឧទាហរណ៍ IMovable)"
  },
  {
    "id": 14,
    "category": "C#",
    "path": "/csharp/exception-handling",
    "title": "មេរៀនទី១៤: ការគ្រប់គ្រងកំហុស (Exception Handling)",
    "explanation": "Exception Handling អនុញ្ញាតឱ្យកម្មវិធីគ្រប់គ្រងកំហុសដែលអាចកើតឡើង។ try-catch-finally blocks ប្រើសម្រាប់ចាប់និងដោះស្រាយកំហុស។ throw ប្រើសម្រាប់បង្កើតកំហុសផ្ទាល់ខ្លួន។",
    "code": "using System;\nusing System.IO;\n\n// Custom Exception Class\nclass InvalidAgeException : Exception\n{\n    public InvalidAgeException(string message) : base(message)\n    {\n    }\n}\n\nclass BankAccount\n{\n    public string AccountNumber { get; private set; }\n    public string Owner { get; private set; }\n    public decimal Balance { get; private set; }\n    \n    public BankAccount(string accountNumber, string owner, decimal initialBalance)\n    {\n        if (string.IsNullOrEmpty(accountNumber))\n            throw new ArgumentException(\"លេខគណនីមិនអាចទទេបានទេ\");\n        \n        if (string.IsNullOrEmpty(owner))\n            throw new ArgumentException(\"ឈ្មោះម្ចាស់គណនីមិនអាចទទេបានទេ\");\n        \n        if (initialBalance < 0)\n            throw new ArgumentException(\"សមតុល្យដំបូងមិនអាចតិចជាង 0 បានទេ\");\n        \n        AccountNumber = accountNumber;\n        Owner = owner;\n        Balance = initialBalance;\n    }\n    \n    public void Deposit(decimal amount)\n    {\n        if (amount <= 0)\n            throw new ArgumentException(\"ចំនួនទឹកប្រាក់ដាក់ត្រូវតែធំជាង 0\");\n        \n        Balance += amount;\n        Console.WriteLine($\"បានដាក់ប្រាក់ ${amount:N2}។ សមតុល្យថ្មី: ${Balance:N2}\");\n    }\n    \n    public void Withdraw(decimal amount)\n    {\n        if (amount <= 0)\n            throw new ArgumentException(\"ចំនួនទឹកប្រាក់ដកត្រូវតែធំជាង 0\");\n        \n        if (amount > Balance)\n            throw new InvalidOperationException(\"សមតុល្យមិនគ្រប់គ្រាន់សម្រាប់ការដកប្រាក់នេះទេ\");\n        \n        Balance -= amount;\n        Console.WriteLine($\"បានដកប្រាក់ ${amount:N2}។ សមតុល្យថ្មី: ${Balance:N2}\");\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"គណនី: {AccountNumber}\");\n        Console.WriteLine($\"ម្ចាស់: {Owner}\");\n        Console.WriteLine($\"សមតុល្យ: ${Balance:N2}\");\n    }\n}\n\nclass Calculator\n{\n    public static double Divide(double a, double b)\n    {\n        if (b == 0)\n            throw new DivideByZeroException(\"មិនអាចចែកដោយ 0 បានទេ\");\n        \n        return a / b;\n    }\n    \n    public static double SquareRoot(double number)\n    {\n        if (number < 0)\n            throw new ArgumentException(\"មិនអាចរកឫសការ៉េនៃលេខអវិជ្ជមានបានទេ\");\n        \n        return Math.Sqrt(number);\n    }\n}\n\nclass PersonValidator\n{\n    public static void ValidateAge(int age)\n    {\n        if (age < 0)\n            throw new InvalidAgeException(\"អាយុមិនអាចតិចជាង 0 បានទេ\");\n        \n        if (age > 150)\n            throw new InvalidAgeException(\"អាយុមិនអាចលើសពី 150 ឆ្នាំបានទេ\");\n        \n        Console.WriteLine($\"អាយុ {age} ឆ្នាំ គឺត្រឹមត្រូវ\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== ការគ្រប់គ្រងកំហុសក្នុង C# ===\");\n        \n        // ទេស្ត៍ BankAccount\n        TestBankAccount();\n        \n        // ទេស្ត៍ Calculator\n        TestCalculator();\n        \n        // ទេស្ត៍ PersonValidator\n        TestPersonValidator();\n        \n        // ទេស្ត៍ File Operations\n        TestFileOperations();\n    }\n    \n    static void TestBankAccount()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍គណនីធនាគារ ===\");\n        \n        try\n        {\n            BankAccount account = new BankAccount(\"ACC001\", \"សុខា\", 1000);\n            account.DisplayInfo();\n            \n            account.Deposit(500);\n            account.Withdraw(200);\n            \n            // ព្យាយាមដកប្រាក់លើសពីសមតុល្យ\n            account.Withdraw(2000); // នេះនឹងបង្កកំហុស\n        }\n        catch (ArgumentException ex)\n        {\n            Console.WriteLine($\"កំហុស Argument: {ex.Message}\");\n        }\n        catch (InvalidOperationException ex)\n        {\n            Console.WriteLine($\"កំហុសប្រតិបត្តិការ: {ex.Message}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"កំហុសទូទៅ: {ex.Message}\");\n        }\n        finally\n        {\n            Console.WriteLine(\"ការទេស្ត៍គណនីធនាគារបានបញ្ចប់\");\n        }\n    }\n    \n    static void TestCalculator()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ម៉ាស៊ីនគណនា ===\");\n        \n        // ទេស្ត៍ការចែក\n        try\n        {\n            double result1 = Calculator.Divide(10, 2);\n            Console.WriteLine($\"10 ÷ 2 = {result1}\");\n            \n            double result2 = Calculator.Divide(10, 0); // នេះនឹងបង្កកំហុស\n        }\n        catch (DivideByZeroException ex)\n        {\n            Console.WriteLine($\"កំហុសចែកដោយសូន្យ: {ex.Message}\");\n        }\n        \n        // ទេស្ត៍ឫសការ៉េ\n        try\n        {\n            double sqrt1 = Calculator.SquareRoot(16);\n            Console.WriteLine($\"√16 = {sqrt1}\");\n            \n            double sqrt2 = Calculator.SquareRoot(-4); // នេះនឹងបង្កកំហុស\n        }\n        catch (ArgumentException ex)\n        {\n            Console.WriteLine($\"កំហុស Argument: {ex.Message}\");\n        }\n    }\n    \n    static void TestPersonValidator()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ការពិនិត្យអាយុ ===\");\n        \n        int[] ages = { 25, -5, 200, 30 };\n        \n        foreach (int age in ages)\n        {\n            try\n            {\n                PersonValidator.ValidateAge(age);\n            }\n            catch (InvalidAgeException ex)\n            {\n                Console.WriteLine($\"កំហុសអាយុ: {ex.Message}\");\n            }\n        }\n    }\n    \n    static void TestFileOperations()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ការប្រតិបត្តិការឯកសារ ===\");\n        \n        string fileName = \"test.txt\";\n        \n        try\n        {\n            // ព្យាយាមសរសេរឯកសារ\n            File.WriteAllText(fileName, \"នេះគឺជាឯកសារទេស្ត៍\");\n            Console.WriteLine($\"បានបង្កើតឯកសារ {fileName} ដោយជោគជ័យ\");\n            \n            // អានឯកសារ\n            string content = File.ReadAllText(fileName);\n            Console.WriteLine($\"មាតិកាឯកសារ: {content}\");\n            \n            // ព្យាយាមអានឯកសារដែលមិនមាន\n            string nonExistentFile = File.ReadAllText(\"មិនមានឯកសារនេះទេ.txt\");\n        }\n        catch (FileNotFoundException ex)\n        {\n            Console.WriteLine($\"រកមិនឃើញឯកសារ: {ex.Message}\");\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            Console.WriteLine($\"មិនមានសិទ្ធិចូលប្រើ: {ex.Message}\");\n        }\n        catch (IOException ex)\n        {\n            Console.WriteLine($\"កំហុស I/O: {ex.Message}\");\n        }\n        finally\n        {\n            // សម្អាតឯកសារ\n            if (File.Exists(fileName))\n            {\n                File.Delete(fileName);\n                Console.WriteLine($\"បានលុបឯកសារ {fileName}\");\n            }\n        }\n    }\n}",
    "tip": "ប្រើ finally block សម្រាប់កូដដែលត្រូវតែដំណើរការទោះបីមានកំហុសឬអត់"
  },
  {
    "id": 15,
    "category": "C#",
    "path": "/csharp/collections",
    "title": "មេរៀនទី១៥: ការប្រមូលផ្តុំ (Collections)",
    "explanation": "Collections គឺជារចនាសម្ព័ន្ធទិន្នន័យដែលអាចផ្ទុកវត្ថុច្រើន។ List<T> សម្រាប់បញ្ជីដែលអាចផ្លាស់ប្តូរ។ Dictionary<K,V> សម្រាប់ key-value pairs។ HashSet<T> សម្រាប់តម្លៃតែមួយគត់។",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Student\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Grade { get; set; }\n    public List<double> Scores { get; set; }\n    \n    public Student(int id, string name, int age, string grade)\n    {\n        Id = id;\n        Name = name;\n        Age = age;\n        Grade = grade;\n        Scores = new List<double>();\n    }\n    \n    public double GetAverage()\n    {\n        return Scores.Count > 0 ? Scores.Average() : 0;\n    }\n    \n    public override string ToString()\n    {\n        return $\"ID: {Id}, ឈ្មោះ: {Name}, អាយុ: {Age}, ថ្នាក់: {Grade}, មធ្យម: {GetAverage():F2}\";\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== Collections ក្នុង C# ===\");\n        \n        // ទេស្ត៍ List\n        TestList();\n        \n        // ទេស្ត៍ Dictionary\n        TestDictionary();\n        \n        // ទេស្ត៍ HashSet\n        TestHashSet();\n        \n        // ទេស្ត៍ Queue និង Stack\n        TestQueueAndStack();\n        \n        // ទេស្ត៍ LINQ\n        TestLinq();\n    }\n    \n    static void TestList()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ List<T> ===\");\n        \n        // បង្កើត List នៃសិស្ស\n        List<Student> students = new List<Student>\n        {\n            new Student(1, \"សុខា\", 16, \"ថ្នាក់ទី១០\"),\n            new Student(2, \"ចន្ទា\", 17, \"ថ្នាក់ទី១១\"),\n            new Student(3, \"វិចិត្រ\", 16, \"ថ្នាក់ទី១០\")\n        };\n        \n        // បន្ថែមពិន្ទុ\n        students[0].Scores.AddRange(new double[] { 85, 92, 78, 88 });\n        students[1].Scores.AddRange(new double[] { 90, 87, 93, 89 });\n        students[2].Scores.AddRange(new double[] { 76, 82, 79, 85 });\n        \n        // បន្ថែមសិស្សថ្មី\n        students.Add(new Student(4, \"សុភា\", 15, \"ថ្នាក់ទី៩\"));\n        students[3].Scores.AddRange(new double[] { 88, 91, 86, 90 });\n        \n        Console.WriteLine($\"ចំនួនសិស្សសរុប: {students.Count}\");\n        \n        // បង្ហាញព័ត៌មានសិស្សទាំងអស់\n        Console.WriteLine(\"\\nបញ្ជីសិស្ស:\");\n        foreach (Student student in students)\n        {\n            Console.WriteLine(student);\n        }\n        \n        // រកសិស្សដែលមានពិន្ទុខ្ពស់បំផុត\n        Student topStudent = students.OrderByDescending(s => s.GetAverage()).First();\n        Console.WriteLine($\"\\nសិស្សល្អបំផុត: {topStudent.Name} (មធ្យម: {topStudent.GetAverage():F2})\");\n        \n        // លុបសិស្ស\n        students.RemoveAt(0); // លុបសិស្សទីមួយ\n        Console.WriteLine($\"\\nបន្ទាប់ពីលុប, ចំនួនសិស្ស: {students.Count}\");\n    }\n    \n    static void TestDictionary()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ Dictionary<K,V> ===\");\n        \n        // បង្កើត Dictionary សម្រាប់រក្សាទុកពិន្ទុតាមមុខវិជ្ជា\n        Dictionary<string, List<double>> subjectScores = new Dictionary<string, List<double>>\n        {\n            { \"គណិតវិទ្យា\", new List<double> { 85, 90, 78, 92, 88 } },\n            { \"រូបវិទ្យា\", new List<double> { 82, 87, 91, 85, 89 } },\n            { \"គីមីវិទ្យា\", new List<double> { 88, 85, 90, 87, 91 } },\n            { \"ជីវវិទ្យា\", new List<double> { 90, 88, 85, 92, 87 } }\n        };\n        \n        // បន្ថែមមុខវិជ្ជាថ្មី\n        subjectScores.Add(\"ភាសាអង់គ្លេស\", new List<double> { 87, 89, 85, 90, 88 });\n        \n        Console.WriteLine($\"ចំនួនមុខវិជ្ជា: {subjectScores.Count}\");\n        \n        // បង្ហាញពិន្ទុមធ្យមតាមមុខវិជ្ជា\n        Console.WriteLine(\"\\nពិន្ទុមធ្យមតាមមុខវិជ្ជា:\");\n        foreach (KeyValuePair<string, List<double>> subject in subjectScores)\n        {\n            double average = subject.Value.Average();\n            Console.WriteLine($\"{subject.Key}: {average:F2}\");\n        }\n        \n        // ពិនិត្យថាតើមានមុខវិជ្ជាណាមួយឬអត់\n        string searchSubject = \"គណិតវិទ្យា\";\n        if (subjectScores.ContainsKey(searchSubject))\n        {\n            Console.WriteLine($\"\\nរកឃើញមុខវិជ្ជា {searchSubject}\");\n            Console.WriteLine($\"ពិន្ទុ: [{string.Join(\", \", subjectScores[searchSubject])}]\");\n        }\n        \n        // រកមុខវិជ្ជាដែលមានពិន្ទុមធ្យមខ្ពស់បំផុត\n        var bestSubject = subjectScores.OrderByDescending(s => s.Value.Average()).First();\n        Console.WriteLine($\"\\nមុខវិជ្ជាល្អបំផុត: {bestSubject.Key} (មធ្យម: {bestSubject.Value.Average():F2})\");\n    }\n    \n    static void TestHashSet()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ HashSet<T> ===\");\n        \n        // បង្កើត HashSet សម្រាប់រក្សាទុកឈ្មោះសិស្សតែមួយគត់\n        HashSet<string> uniqueStudents = new HashSet<string>();\n        \n        // ព្យាយាមបន្ថែមឈ្មោះ (រួមទាំងឈ្មោះដដែល)\n        string[] names = { \"សុខា\", \"ចន្ទា\", \"វិចិត្រ\", \"សុខា\", \"សុភា\", \"ចន្ទា\", \"រតនា\" };\n        \n        Console.WriteLine(\"បន្ថែមឈ្មោះ:\");\n        foreach (string name in names)\n        {\n            bool added = uniqueStudents.Add(name);\n            Console.WriteLine($\"{name}: {(added ? \"បានបន្ថែម\" : \"មានរួចហើយ\")}\");\n        }\n        \n        Console.WriteLine($\"\\nចំនួនឈ្មោះតែមួយគត់: {uniqueStudents.Count}\");\n        Console.WriteLine(\"បញ្ជីឈ្មោះតែមួយគត់:\");\n        foreach (string name in uniqueStudents)\n        {\n            Console.WriteLine($\"- {name}\");\n        }\n        \n        // ប្រតិបត្តិការ Set\n        HashSet<string> group1 = new HashSet<string> { \"សុខា\", \"ចន្ទា\", \"វិចិត្រ\" };\n        HashSet<string> group2 = new HashSet<string> { \"ចន្ទា\", \"សុភា\", \"រតនា\" };\n        \n        // Union (បូកបញ្ចូលគ្នា)\n        HashSet<string> union = new HashSet<string>(group1);\n        union.UnionWith(group2);\n        Console.WriteLine($\"\\nUnion: [{string.Join(\", \", union)}]\");\n        \n        // Intersection (ចំណុចប្រសព្វ)\n        HashSet<string> intersection = new HashSet<string>(group1);\n        intersection.IntersectWith(group2);\n        Console.WriteLine($\"Intersection: [{string.Join(\", \", intersection)}]\");\n    }\n    \n    static void TestQueueAndStack()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ Queue និង Stack ===\");\n        \n        // ទេស្ត៍ Queue (FIFO - First In, First Out)\n        Console.WriteLine(\"\\nQueue (ជួរ):\");\n        Queue<string> queue = new Queue<string>();\n        \n        // Enqueue (បន្ថែមចូលជួរ)\n        string[] customers = { \"អតិថិជនទី១\", \"អតិថិជនទី២\", \"អតិថិជនទី៣\" };\n        foreach (string customer in customers)\n        {\n            queue.Enqueue(customer);\n            Console.WriteLine($\"បានបន្ថែម: {customer}\");\n        }\n        \n        Console.WriteLine($\"ចំនួនក្នុងជួរ: {queue.Count}\");\n        \n        // Dequeue (យកចេញពីជួរ)\n        while (queue.Count > 0)\n        {\n            string customer = queue.Dequeue();\n            Console.WriteLine($\"បានបម្រើ: {customer}\");\n        }\n        \n        // ទេស្ត៍ Stack (LIFO - Last In, First Out)\n        Console.WriteLine(\"\\nStack (ជង់):\");\n        Stack<string> stack = new Stack<string>();\n        \n        // Push (ដាក់ចូលជង់)\n        string[] books = { \"សៀវភៅទី១\", \"សៀវភៅទី២\", \"សៀវភៅទី៣\" };\n        foreach (string book in books)\n        {\n            stack.Push(book);\n            Console.WriteLine($\"បានដាក់: {book}\");\n        }\n        \n        Console.WriteLine($\"ចំនួនក្នុងជង់: {stack.Count}\");\n        \n        // Pop (យកចេញពីជង់)\n        while (stack.Count > 0)\n        {\n            string book = stack.Pop();\n            Console.WriteLine($\"បានយក: {book}\");\n        }\n    }\n    \n    static void TestLinq()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ LINQ ===\");\n        \n        List<Student> students = new List<Student>\n        {\n            new Student(1, \"សុខា\", 16, \"ថ្នាក់ទី១០\"),\n            new Student(2, \"ចន្ទា\", 17, \"ថ្នាក់ទី១១\"),\n            new Student(3, \"វិចិត្រ\", 16, \"ថ្នាក់ទី១០\"),\n            new Student(4, \"សុភា\", 15, \"ថ្នាក់ទី៩\"),\n            new Student(5, \"រតនា\", 17, \"ថ្នាក់ទី១១\")\n        };\n        \n        // បន្ថែមពិន្ទុ\n        students[0].Scores.AddRange(new double[] { 85, 92, 78 });\n        students[1].Scores.AddRange(new double[] { 90, 87, 93 });\n        students[2].Scores.AddRange(new double[] { 76, 82, 79 });\n        students[3].Scores.AddRange(new double[] { 88, 91, 86 });\n        students[4].Scores.AddRange(new double[] { 95, 89, 92 });\n        \n        // LINQ Queries\n        \n        // រកសិស្សដែលអាយុ >= 16\n        var teenageStudents = students.Where(s => s.Age >= 16).ToList();\n        Console.WriteLine($\"\\nសិស្សដែលអាយុ >= 16: {teenageStudents.Count} នាក់\");\n        \n        // រកសិស្សដែលមានពិន្ទុមធ្យម > 85\n        var topStudents = students.Where(s => s.GetAverage() > 85).ToList();\n        Console.WriteLine($\"សិស្សដែលមានពិន្ទុមធ្យម > 85: {topStudents.Count} នាក់\");\n        foreach (var student in topStudents)\n        {\n            Console.WriteLine($\"  - {student.Name}: {student.GetAverage():F2}\");\n        }\n        \n        // ចាត់តាមពិន្ទុមធ្យម (ពីខ្ពស់ទៅទាប)\n        var sortedStudents = students.OrderByDescending(s => s.GetAverage()).ToList();\n        Console.WriteLine(\"\\nសិស្សចាត់តាមពិន្ទុមធ្យម:\");\n        for (int i = 0; i < sortedStudents.Count; i++)\n        {\n            Console.WriteLine($\"{i + 1}. {sortedStudents[i].Name}: {sortedStudents[i].GetAverage():F2}\");\n        }\n        \n        // ចាត់ក្រុមតាមថ្នាក់\n        var groupedByGrade = students.GroupBy(s => s.Grade).ToList();\n        Console.WriteLine(\"\\nចាត់ក្រុមតាមថ្នាក់:\");\n        foreach (var group in groupedByGrade)\n        {\n            Console.WriteLine($\"{group.Key}: {group.Count()} នាក់\");\n            foreach (var student in group)\n            {\n                Console.WriteLine($\"  - {student.Name}\");\n            }\n        }\n        \n        // ស្ថិតិ\n        double averageAge = students.Average(s => s.Age);\n        double averageScore = students.Average(s => s.GetAverage());\n        Console.WriteLine($\"\\nអាយុមធ្យម: {averageAge:F1} ឆ្នាំ\");\n        Console.WriteLine($\"ពិន្ទុមធ្យមទូទៅ: {averageScore:F2}\");\n    }\n}",
    "tip": "ប្រើ LINQ (Language Integrated Query) ដើម្បីធ្វើការជាមួយ collections បានកាន់តែងាយ"
  },
  {
    "id": 16,
    "category": "C#",
    "path": "/csharp/file-io",
    "title": "មេរៀនទី១៦: ការបញ្ចូលនិងបញ្ចេញឯកសារ (File I/O)",
    "explanation": "File I/O អនុញ្ញាតឱ្យកម្មវិធីអាន និងសរសេរឯកសារ។ System.IO namespace មានថ្នាក់ជាច្រើនសម្រាប់ការធ្វើការជាមួយឯកសារ និងថតឯកសារ។ File, Directory, StreamReader, StreamWriter គឺជាថ្នាក់សំខាន់ៗ។",
    "code": "using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Text.Json;\n\n// ថ្នាក់សម្រាប់រក្សាទុកព័ត៌មានសិស្ស\nclass StudentRecord\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Grade { get; set; }\n    public List<double> Scores { get; set; }\n    public DateTime EnrollmentDate { get; set; }\n    \n    public StudentRecord()\n    {\n        Scores = new List<double>();\n    }\n    \n    public double GetAverage()\n    {\n        return Scores.Count > 0 ? Scores.Sum() / Scores.Count : 0;\n    }\n    \n    public override string ToString()\n    {\n        return $\"{Id},{Name},{Age},{Grade},{string.Join(\";\", Scores)},{EnrollmentDate:yyyy-MM-dd}\";\n    }\n    \n    public static StudentRecord FromString(string line)\n    {\n        string[] parts = line.Split(',');\n        var student = new StudentRecord\n        {\n            Id = int.Parse(parts[0]),\n            Name = parts[1],\n            Age = int.Parse(parts[2]),\n            Grade = parts[3],\n            EnrollmentDate = DateTime.Parse(parts[5])\n        };\n        \n        if (!string.IsNullOrEmpty(parts[4]))\n        {\n            student.Scores = parts[4].Split(';').Select(double.Parse).ToList();\n        }\n        \n        return student;\n    }\n}\n\nclass FileManager\n{\n    private const string DATA_FOLDER = \"StudentData\";\n    private const string CSV_FILE = \"students.csv\";\n    private const string JSON_FILE = \"students.json\";\n    private const string LOG_FILE = \"operations.log\";\n    \n    public FileManager()\n    {\n        // បង្កើតថតឯកសារប្រសិនបើមិនមាន\n        if (!Directory.Exists(DATA_FOLDER))\n        {\n            Directory.CreateDirectory(DATA_FOLDER);\n            LogOperation($\"បានបង្កើតថតឯកសារ: {DATA_FOLDER}\");\n        }\n    }\n    \n    // សរសេរទិន្នន័យសិស្សទៅឯកសារ CSV\n    public void SaveStudentsToCSV(List<StudentRecord> students)\n    {\n        try\n        {\n            string filePath = Path.Combine(DATA_FOLDER, CSV_FILE);\n            \n            using (StreamWriter writer = new StreamWriter(filePath))\n            {\n                // សរសេរ header\n                writer.WriteLine(\"Id,Name,Age,Grade,Scores,EnrollmentDate\");\n                \n                // សរសេរទិន្នន័យសិស្ស\n                foreach (var student in students)\n                {\n                    writer.WriteLine(student.ToString());\n                }\n            }\n            \n            LogOperation($\"បានរក្សាទុកសិស្ស {students.Count} នាក់ទៅ CSV\");\n            Console.WriteLine($\"បានរក្សាទុកទិន្នន័យទៅ {filePath}\");\n        }\n        catch (Exception ex)\n        {\n            LogOperation($\"កំហុសក្នុងការរក្សាទុក CSV: {ex.Message}\");\n            Console.WriteLine($\"កំហុស: {ex.Message}\");\n        }\n    }\n    \n    // អានទិន្នន័យសិស្សពីឯកសារ CSV\n    public List<StudentRecord> LoadStudentsFromCSV()\n    {\n        List<StudentRecord> students = new List<StudentRecord>();\n        \n        try\n        {\n            string filePath = Path.Combine(DATA_FOLDER, CSV_FILE);\n            \n            if (!File.Exists(filePath))\n            {\n                LogOperation($\"ឯកសារ CSV មិនមាន: {filePath}\");\n                return students;\n            }\n            \n            using (StreamReader reader = new StreamReader(filePath))\n            {\n                // រំលង header\n                reader.ReadLine();\n                \n                string line;\n                while ((line = reader.ReadLine()) != null)\n                {\n                    try\n                    {\n                        students.Add(StudentRecord.FromString(line));\n                    }\n                    catch (Exception ex)\n                    {\n                        LogOperation($\"កំហុសក្នុងការអានបន្ទាត់: {line}, កំហុស: {ex.Message}\");\n                    }\n                }\n            }\n            \n            LogOperation($\"បានអានសិស្ស {students.Count} នាក់ពី CSV\");\n            Console.WriteLine($\"បានអានទិន្នន័យ {students.Count} នាក់ពី {filePath}\");\n        }\n        catch (Exception ex)\n        {\n            LogOperation($\"កំហុសក្នុងការអាន CSV: {ex.Message}\");\n            Console.WriteLine($\"កំហុស: {ex.Message}\");\n        }\n        \n        return students;\n    }\n    \n    // រក្សាទុកទិន្នន័យជា JSON\n    public void SaveStudentsToJSON(List<StudentRecord> students)\n    {\n        try\n        {\n            string filePath = Path.Combine(DATA_FOLDER, JSON_FILE);\n            \n            var options = new JsonSerializerOptions\n            {\n                WriteIndented = true,\n                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n            };\n            \n            string jsonString = JsonSerializer.Serialize(students, options);\n            File.WriteAllText(filePath, jsonString);\n            \n            LogOperation($\"បានរក្សាទុកសិស្ស {students.Count} នាក់ទៅ JSON\");\n            Console.WriteLine($\"បានរក្សាទុកទិន្នន័យទៅ {filePath}\");\n        }\n        catch (Exception ex)\n        {\n            LogOperation($\"កំហុសក្នុងការរក្សាទុក JSON: {ex.Message}\");\n            Console.WriteLine($\"កំហុស: {ex.Message}\");\n        }\n    }\n    \n    // អានទិន្នន័យពី JSON\n    public List<StudentRecord> LoadStudentsFromJSON()\n    {\n        List<StudentRecord> students = new List<StudentRecord>();\n        \n        try\n        {\n            string filePath = Path.Combine(DATA_FOLDER, JSON_FILE);\n            \n            if (!File.Exists(filePath))\n            {\n                LogOperation($\"ឯកសារ JSON មិនមាន: {filePath}\");\n                return students;\n            }\n            \n            string jsonString = File.ReadAllText(filePath);\n            \n            var options = new JsonSerializerOptions\n            {\n                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n            };\n            \n            students = JsonSerializer.Deserialize<List<StudentRecord>>(jsonString, options) ?? new List<StudentRecord>();\n            \n            LogOperation($\"បានអានសិស្ស {students.Count} នាក់ពី JSON\");\n            Console.WriteLine($\"បានអានទិន្នន័យ {students.Count} នាក់ពី {filePath}\");\n        }\n        catch (Exception ex)\n        {\n            LogOperation($\"កំហុសក្នុងការអាន JSON: {ex.Message}\");\n            Console.WriteLine($\"កំហុស: {ex.Message}\");\n        }\n        \n        return students;\n    }\n    \n    // សរសេរ log\n    public void LogOperation(string message)\n    {\n        try\n        {\n            string filePath = Path.Combine(DATA_FOLDER, LOG_FILE);\n            string logEntry = $\"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}\";\n            \n            File.AppendAllText(filePath, logEntry + Environment.NewLine);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"កំហុសក្នុងការសរសេរ log: {ex.Message}\");\n        }\n    }\n    \n    // បង្ហាញ log\n    public void DisplayLog()\n    {\n        try\n        {\n            string filePath = Path.Combine(DATA_FOLDER, LOG_FILE);\n            \n            if (!File.Exists(filePath))\n            {\n                Console.WriteLine(\"មិនមានឯកសារ log\");\n                return;\n            }\n            \n            Console.WriteLine(\"\\n=== Log Operations ===\");\n            string[] lines = File.ReadAllLines(filePath);\n            \n            // បង្ហាញ 10 បន្ទាត់ចុងក្រោយ\n            int startIndex = Math.Max(0, lines.Length - 10);\n            for (int i = startIndex; i < lines.Length; i++)\n            {\n                Console.WriteLine(lines[i]);\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"កំហុសក្នុងការអាន log: {ex.Message}\");\n        }\n    }\n    \n    // បង្ហាញព័ត៌មានឯកសារ\n    public void DisplayFileInfo()\n    {\n        Console.WriteLine(\"\\n=== ព័ត៌មានឯកសារ ===\");\n        \n        string[] files = { CSV_FILE, JSON_FILE, LOG_FILE };\n        \n        foreach (string fileName in files)\n        {\n            string filePath = Path.Combine(DATA_FOLDER, fileName);\n            \n            if (File.Exists(filePath))\n            {\n                FileInfo fileInfo = new FileInfo(filePath);\n                Console.WriteLine($\"{fileName}:\");\n                Console.WriteLine($\"  ទំហំ: {fileInfo.Length} bytes\");\n                Console.WriteLine($\"  បានបង្កើត: {fileInfo.CreationTime}\");\n                Console.WriteLine($\"  បានកែប្រែចុងក្រោយ: {fileInfo.LastWriteTime}\");\n            }\n            else\n            {\n                Console.WriteLine($\"{fileName}: មិនមាន\");\n            }\n        }\n    }\n    \n    // សម្អាតឯកសារ\n    public void CleanupFiles()\n    {\n        try\n        {\n            if (Directory.Exists(DATA_FOLDER))\n            {\n                Directory.Delete(DATA_FOLDER, true);\n                Console.WriteLine($\"បានលុបថតឯកសារ: {DATA_FOLDER}\");\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"កំហុសក្នុងការសម្អាត: {ex.Message}\");\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== File I/O ក្នុង C# ===\");\n        \n        FileManager fileManager = new FileManager();\n        \n        // បង្កើតទិន្នន័យសិស្សគំរូ\n        List<StudentRecord> students = new List<StudentRecord>\n        {\n            new StudentRecord\n            {\n                Id = 1,\n                Name = \"សុខា\",\n                Age = 16,\n                Grade = \"ថ្នាក់ទី១០\",\n                Scores = new List<double> { 85.5, 92.0, 78.5, 88.0 },\n                EnrollmentDate = new DateTime(2023, 9, 1)\n            },\n            new StudentRecord\n            {\n                Id = 2,\n                Name = \"ចន្ទា\",\n                Age = 17,\n                Grade = \"ថ្នាក់ទី១១\",\n                Scores = new List<double> { 90.0, 87.5, 93.0, 89.5 },\n                EnrollmentDate = new DateTime(2022, 9, 1)\n            },\n            new StudentRecord\n            {\n                Id = 3,\n                Name = \"វិចិត្រ\",\n                Age = 16,\n                Grade = \"ថ្នាក់ទី១០\",\n                Scores = new List<double> { 76.0, 82.5, 79.0, 85.5 },\n                EnrollmentDate = new DateTime(2023, 9, 1)\n            }\n        };\n        \n        // រក្សាទុកទិន្នន័យ\n        fileManager.SaveStudentsToCSV(students);\n        fileManager.SaveStudentsToJSON(students);\n        \n        // អានទិន្នន័យវិញ\n        Console.WriteLine(\"\\n=== អានទិន្នន័យពី CSV ===\");\n        var loadedFromCSV = fileManager.LoadStudentsFromCSV();\n        foreach (var student in loadedFromCSV)\n        {\n            Console.WriteLine($\"{student.Name} (ID: {student.Id}) - មធ្យម: {student.GetAverage():F2}\");\n        }\n        \n        Console.WriteLine(\"\\n=== អានទិន្នន័យពី JSON ===\");\n        var loadedFromJSON = fileManager.LoadStudentsFromJSON();\n        foreach (var student in loadedFromJSON)\n        {\n            Console.WriteLine($\"{student.Name} (ID: {student.Id}) - មធ្យម: {student.GetAverage():F2}\");\n        }\n        \n        // បង្ហាញព័ត៌មានឯកសារ\n        fileManager.DisplayFileInfo();\n        \n        // បង្ហាញ log\n        fileManager.DisplayLog();\n        \n        // សួរអ្នកប្រើប្រាស់ថាតើចង់សម្អាតឯកសារឬអត់\n        Console.WriteLine(\"\\nតើអ្នកចង់លុបឯកសារទាំងអស់ទេ? (y/n): \");\n        string response = Console.ReadLine();\n        if (response?.ToLower() == \"y\")\n        {\n            fileManager.CleanupFiles();\n        }\n    }\n}",
    "tip": "ប្រើ using statement ជាមួយ StreamReader/StreamWriter ដើម្បីធានាថាឯកសារត្រូវបានបិទត្រឹមត្រូវ"
  },
  {
    "id": 17,
    "category": "C#",
    "path": "/csharp/delegates-events",
    "title": "មេរៀនទី១៧: ប្រតិភូនិងព្រឹត្តិការណ៍ (Delegates and Events)",
    "explanation": "Delegate គឺជាប្រភេទដែលតំណាងឱ្យការយោងទៅកាន់វិធីសាស្ត្រ។ Event គឺជាការជូនដំណឹងពិសេសដែលអនុញ្ញាតឱ្យថ្នាក់មួយជូនដំណឹងដល់ថ្នាក់ផ្សេងៗនៅពេលមានអ្វីមួយកើតឡើង។",
    "code": "using System;\nusing System.Collections.Generic;\n\n// Delegate សម្រាប់ការគណនា\npublic delegate double CalculationDelegate(double x, double y);\n\n// Delegate សម្រាប់ការជូនដំណឹង\npublic delegate void NotificationDelegate(string message);\n\n// Event Args សម្រាប់ព្រឹត្តិការណ៍\npublic class ScoreChangedEventArgs : EventArgs\n{\n    public string StudentName { get; set; }\n    public double OldScore { get; set; }\n    public double NewScore { get; set; }\n    public DateTime ChangeTime { get; set; }\n    \n    public ScoreChangedEventArgs(string studentName, double oldScore, double newScore)\n    {\n        StudentName = studentName;\n        OldScore = oldScore;\n        NewScore = newScore;\n        ChangeTime = DateTime.Now;\n    }\n}\n\n// ថ្នាក់សិស្សដែលមាន Events\npublic class Student\n{\n    private double _score;\n    \n    public string Name { get; set; }\n    public double Score \n    { \n        get { return _score; }\n        set \n        {\n            double oldScore = _score;\n            _score = value;\n            \n            // បញ្ជូន event នៅពេលពិន្ទុផ្លាស់ប្តូរ\n            OnScoreChanged(new ScoreChangedEventArgs(Name, oldScore, value));\n        }\n    }\n    \n    // Event សម្រាប់ការផ្លាស់ប្តូរពិន្ទុ\n    public event EventHandler<ScoreChangedEventArgs> ScoreChanged;\n    \n    // Event សម្រាប់ការជាប់\n    public event Action<string> Passed;\n    \n    // Event សម្រាប់ការធ្លាក់\n    public event Action<string> Failed;\n    \n    public Student(string name, double initialScore = 0)\n    {\n        Name = name;\n        _score = initialScore;\n    }\n    \n    protected virtual void OnScoreChanged(ScoreChangedEventArgs e)\n    {\n        ScoreChanged?.Invoke(this, e);\n        \n        // ពិនិត្យថាតើជាប់ឬធ្លាក់\n        if (e.NewScore >= 60 && e.OldScore < 60)\n        {\n            Passed?.Invoke(Name);\n        }\n        else if (e.NewScore < 60 && e.OldScore >= 60)\n        {\n            Failed?.Invoke(Name);\n        }\n    }\n    \n    public void UpdateScore(double newScore)\n    {\n        Console.WriteLine($\"កំពុងកែប្រែពិន្ទុ {Name} ពី {Score} ទៅ {newScore}\");\n        Score = newScore;\n    }\n}\n\n// ថ្នាក់គ្រូដែលតាមដានសិស្ស\npublic class Teacher\n{\n    public string Name { get; set; }\n    private List<Student> _students;\n    \n    public Teacher(string name)\n    {\n        Name = name;\n        _students = new List<Student>();\n    }\n    \n    public void AddStudent(Student student)\n    {\n        _students.Add(student);\n        \n        // Subscribe ទៅ events របស់សិស្ស\n        student.ScoreChanged += OnStudentScoreChanged;\n        student.Passed += OnStudentPassed;\n        student.Failed += OnStudentFailed;\n        \n        Console.WriteLine($\"គ្រូ {Name} បានបន្ថែមសិស្ស {student.Name}\");\n    }\n    \n    public void RemoveStudent(Student student)\n    {\n        if (_students.Remove(student))\n        {\n            // Unsubscribe ពី events\n            student.ScoreChanged -= OnStudentScoreChanged;\n            student.Passed -= OnStudentPassed;\n            student.Failed -= OnStudentFailed;\n            \n            Console.WriteLine($\"គ្រូ {Name} បានដកសិស្ស {student.Name} ចេញ\");\n        }\n    }\n    \n    private void OnStudentScoreChanged(object sender, ScoreChangedEventArgs e)\n    {\n        Console.WriteLine($\"[គ្រូ {Name}] សិស្ស {e.StudentName} បានផ្លាស់ប្តូរពិន្ទុពី {e.OldScore:F1} ទៅ {e.NewScore:F1}\");\n        \n        if (Math.Abs(e.NewScore - e.OldScore) >= 20)\n        {\n            Console.WriteLine($\"[គ្រូ {Name}] ការផ្លាស់ប្តូរពិន្ទុធំ! ត្រូវការពិនិត្យបន្ថែម\");\n        }\n    }\n    \n    private void OnStudentPassed(string studentName)\n    {\n        Console.WriteLine($\"[គ្រូ {Name}] 🎉 អបអរសាទរ! សិស្ស {studentName} បានជាប់!\");\n    }\n    \n    private void OnStudentFailed(string studentName)\n    {\n        Console.WriteLine($\"[គ្រូ {Name}] 😟 សិស្ស {studentName} បានធ្លាក់។ ត្រូវការជំនួយបន្ថែម។\");\n    }\n    \n    public void DisplayStudentSummary()\n    {\n        Console.WriteLine($\"\\n=== សរុបសិស្សរបស់គ្រូ {Name} ===\");\n        foreach (var student in _students)\n        {\n            string status = student.Score >= 60 ? \"ជាប់\" : \"ធ្លាក់\";\n            Console.WriteLine($\"{student.Name}: {student.Score:F1} ({status})\");\n        }\n    }\n}\n\n// ថ្នាក់សម្រាប់ការគណនាដោយប្រើ Delegates\npublic class Calculator\n{\n    // Delegate multicast\n    public static NotificationDelegate NotificationChain;\n    \n    public static double Add(double x, double y)\n    {\n        double result = x + y;\n        NotifyCalculation($\"បូក: {x} + {y} = {result}\");\n        return result;\n    }\n    \n    public static double Subtract(double x, double y)\n    {\n        double result = x - y;\n        NotifyCalculation($\"ដក: {x} - {y} = {result}\");\n        return result;\n    }\n    \n    public static double Multiply(double x, double y)\n    {\n        double result = x * y;\n        NotifyCalculation($\"គុណ: {x} × {y} = {result}\");\n        return result;\n    }\n    \n    public static double Divide(double x, double y)\n    {\n        if (y == 0)\n        {\n            NotifyCalculation($\"កំហុស: មិនអាចចែកដោយ 0 បានទេ\");\n            throw new DivideByZeroException();\n        }\n        \n        double result = x / y;\n        NotifyCalculation($\"ចែក: {x} ÷ {y} = {result:F2}\");\n        return result;\n    }\n    \n    private static void NotifyCalculation(string message)\n    {\n        NotificationChain?.Invoke(message);\n    }\n    \n    public static void PerformCalculations(CalculationDelegate operation, double x, double y)\n    {\n        try\n        {\n            double result = operation(x, y);\n            Console.WriteLine($\"លទ្ធផល: {result:F2}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"កំហុស: {ex.Message}\");\n        }\n    }\n}\n\n// ថ្នាក់សម្រាប់ការតាមដានប្រតិបត្តិការ\npublic class OperationLogger\n{\n    public string Name { get; set; }\n    \n    public OperationLogger(string name)\n    {\n        Name = name;\n    }\n    \n    public void LogToConsole(string message)\n    {\n        Console.WriteLine($\"[Console Logger {Name}] {DateTime.Now:HH:mm:ss} - {message}\");\n    }\n    \n    public void LogToFile(string message)\n    {\n        Console.WriteLine($\"[File Logger {Name}] បានរក្សាទុកទៅឯកសារ: {message}\");\n    }\n    \n    public void LogToDatabase(string message)\n    {\n        Console.WriteLine($\"[Database Logger {Name}] បានរក្សាទុកទៅមូលដ្ឋានទិន្នន័យ: {message}\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== Delegates និង Events ក្នុង C# ===\");\n        \n        // ទេស្ត៍ Delegates\n        TestDelegates();\n        \n        // ទេស្ត៍ Events\n        TestEvents();\n        \n        // ទេស្ត៍ Multicast Delegates\n        TestMulticastDelegates();\n    }\n    \n    static void TestDelegates()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ Delegates ===\");\n        \n        // បង្កើត delegate instances\n        CalculationDelegate addOperation = Calculator.Add;\n        CalculationDelegate subtractOperation = Calculator.Subtract;\n        CalculationDelegate multiplyOperation = Calculator.Multiply;\n        CalculationDelegate divideOperation = Calculator.Divide;\n        \n        // ប្រើ delegates\n        Console.WriteLine(\"ការប្រើ Delegates:\");\n        Calculator.PerformCalculations(addOperation, 10, 5);\n        Calculator.PerformCalculations(subtractOperation, 10, 5);\n        Calculator.PerformCalculations(multiplyOperation, 10, 5);\n        Calculator.PerformCalculations(divideOperation, 10, 5);\n        \n        // Anonymous methods\n        CalculationDelegate powerOperation = delegate(double x, double y)\n        {\n            double result = Math.Pow(x, y);\n            Console.WriteLine($\"ស្វ័យ: {x}^{y} = {result:F2}\");\n            return result;\n        };\n        \n        Calculator.PerformCalculations(powerOperation, 2, 3);\n        \n        // Lambda expressions\n        CalculationDelegate modOperation = (x, y) => \n        {\n            double result = x % y;\n            Console.WriteLine($\"Lambda: {x} % {y} = {result:F2}\");\n            return result;\n        };\n        \n        Calculator.PerformCalculations(modOperation, 10, 3);\n    }\n    \n    static void TestEvents()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ Events ===\");\n        \n        // បង្កើតគ្រូ\n        Teacher teacher = new Teacher(\"លោកគ្រូ វិចិត្រ\");\n        \n        // បង្កើតសិស្ស\n        Student student1 = new Student(\"សុខា\", 45);\n        Student student2 = new Student(\"ចន្ទា\", 75);\n        Student student3 = new Student(\"រតនា\", 55);\n        \n        // គ្រូបន្ថែមសិស្ស\n        teacher.AddStudent(student1);\n        teacher.AddStudent(student2);\n        teacher.AddStudent(student3);\n        \n        Console.WriteLine(\"\\nការផ្លាស់ប្តូរពិន្ទុ:\");\n        \n        // ផ្លាស់ប្តូរពិន្ទុសិស្ស\n        student1.UpdateScore(65); // ពី 45 ទៅ 65 (ជាប់)\n        student2.UpdateScore(58); // ពី 75 ទៅ 58 (ធ្លាក់)\n        student3.UpdateScore(85); // ពី 55 ទៅ 85 (ជាប់)\n        student1.UpdateScore(92); // ពី 65 ទៅ 92 (នៅតែជាប់)\n        student2.UpdateScore(70); // ពី 58 ទៅ 70 (ជាប់វិញ)\n        \n        // បង្ហាញសរុប\n        teacher.DisplayStudentSummary();\n        \n        // ដកសិស្សចេញ\n        Console.WriteLine(\"\\nដកសិស្សចេញ:\");\n        teacher.RemoveStudent(student1);\n        \n        // ពិសោធន៍ការផ្លាស់ប្តូរពិន្ទុបន្ទាប់ពីដកចេញ\n        student1.UpdateScore(50); // គ្រូនឹងមិនទទួលបាន notification\n    }\n    \n    static void TestMulticastDelegates()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ Multicast Delegates ===\");\n        \n        // បង្កើត loggers\n        OperationLogger logger1 = new OperationLogger(\"Logger1\");\n        OperationLogger logger2 = new OperationLogger(\"Logger2\");\n        \n        // បង្កើត multicast delegate\n        Calculator.NotificationChain = logger1.LogToConsole;\n        Calculator.NotificationChain += logger1.LogToFile;\n        Calculator.NotificationChain += logger2.LogToDatabase;\n        \n        Console.WriteLine(\"ការគណនាជាមួយ Multicast Delegates:\");\n        Calculator.Add(15, 25);\n        Calculator.Multiply(8, 7);\n        Calculator.Divide(100, 4);\n        \n        // ដក delegate មួយចេញ\n        Console.WriteLine(\"\\nបន្ទាប់ពីដក File Logger ចេញ:\");\n        Calculator.NotificationChain -= logger1.LogToFile;\n        Calculator.Subtract(50, 20);\n        \n        // បន្ថែម delegate ថ្មី\n        Calculator.NotificationChain += (message) => \n        {\n            Console.WriteLine($\"[Lambda Logger] ⚡ {message}\");\n        };\n        \n        Console.WriteLine(\"\\nបន្ទាប់ពីបន្ថែម Lambda Logger:\");\n        Calculator.Divide(144, 12);\n    }\n}",
    "tip": "ប្រើ ?. operator ដើម្បីហៅ event ដោយសុវត្ថិភាព (null-conditional operator)"
  },
  {
    "id": 18,
    "category": "C#",
    "path": "/csharp/generics",
    "title": "មេរៀនទី១៨: ប្រភេទទូទៅ (Generics)",
    "explanation": "Generics អនុញ្ញាតឱ្យបង្កើតថ្នាក់ វិធីសាស្ត្រ និង interface ដែលធ្វើការជាមួយប្រភេទទិន្នន័យណាមួយ។ វាផ្តល់នូវភាពបត់បែន type safety និងការអនុវត្តដែលមានប្រសិទ្ធភាព។",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\n// Generic Class សម្រាប់ Stack\npublic class GenericStack<T>\n{\n    private List<T> _items;\n    private int _maxSize;\n    \n    public int Count => _items.Count;\n    public int MaxSize => _maxSize;\n    public bool IsEmpty => _items.Count == 0;\n    public bool IsFull => _items.Count >= _maxSize;\n    \n    public GenericStack(int maxSize = 100)\n    {\n        _items = new List<T>();\n        _maxSize = maxSize;\n    }\n    \n    public void Push(T item)\n    {\n        if (IsFull)\n        {\n            throw new InvalidOperationException($\"Stack ពេញហើយ! ទំហំអតិបរមា: {_maxSize}\");\n        }\n        \n        _items.Add(item);\n        Console.WriteLine($\"បានដាក់ {item} ចូល Stack\");\n    }\n    \n    public T Pop()\n    {\n        if (IsEmpty)\n        {\n            throw new InvalidOperationException(\"Stack ទទេ! មិនអាចយកធាតុចេញបានទេ\");\n        }\n        \n        T item = _items[_items.Count - 1];\n        _items.RemoveAt(_items.Count - 1);\n        Console.WriteLine($\"បានយក {item} ចេញពី Stack\");\n        return item;\n    }\n    \n    public T Peek()\n    {\n        if (IsEmpty)\n        {\n            throw new InvalidOperationException(\"Stack ទទេ! មិនអាចមើលធាតុបានទេ\");\n        }\n        \n        return _items[_items.Count - 1];\n    }\n    \n    public void Clear()\n    {\n        _items.Clear();\n        Console.WriteLine(\"បានសម្អាត Stack\");\n    }\n    \n    public T[] ToArray()\n    {\n        T[] array = new T[_items.Count];\n        for (int i = 0; i < _items.Count; i++)\n        {\n            array[i] = _items[_items.Count - 1 - i]; // បញ្ច្រាស់លំដាប់\n        }\n        return array;\n    }\n    \n    public void DisplayStack()\n    {\n        if (IsEmpty)\n        {\n            Console.WriteLine(\"Stack ទទេ\");\n            return;\n        }\n        \n        Console.WriteLine($\"Stack ({Count}/{MaxSize} ធាតុ):\");\n        for (int i = _items.Count - 1; i >= 0; i--)\n        {\n            Console.WriteLine($\"  [{i}] {_items[i]}\");\n        }\n    }\n}\n\n// Generic Interface\npublic interface IRepository<T> where T : class\n{\n    void Add(T item);\n    T GetById(int id);\n    List<T> GetAll();\n    bool Update(T item);\n    bool Delete(int id);\n    int Count { get; }\n}\n\n// Base class សម្រាប់ entities\npublic abstract class BaseEntity\n{\n    public int Id { get; set; }\n    public DateTime CreatedDate { get; set; }\n    public DateTime ModifiedDate { get; set; }\n    \n    protected BaseEntity()\n    {\n        CreatedDate = DateTime.Now;\n        ModifiedDate = DateTime.Now;\n    }\n}\n\n// Student entity\npublic class Student : BaseEntity\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Grade { get; set; }\n    public List<double> Scores { get; set; }\n    \n    public Student()\n    {\n        Scores = new List<double>();\n    }\n    \n    public Student(string name, int age, string grade) : this()\n    {\n        Name = name;\n        Age = age;\n        Grade = grade;\n    }\n    \n    public double GetAverage()\n    {\n        return Scores.Count > 0 ? Scores.Average() : 0;\n    }\n    \n    public override string ToString()\n    {\n        return $\"ID: {Id}, ឈ្មោះ: {Name}, អាយុ: {Age}, ថ្នាក់: {Grade}, មធ្យម: {GetAverage():F2}\";\n    }\n}\n\n// Book entity\npublic class Book : BaseEntity\n{\n    public string Title { get; set; }\n    public string Author { get; set; }\n    public string ISBN { get; set; }\n    public decimal Price { get; set; }\n    \n    public Book() { }\n    \n    public Book(string title, string author, string isbn, decimal price)\n    {\n        Title = title;\n        Author = author;\n        ISBN = isbn;\n        Price = price;\n    }\n    \n    public override string ToString()\n    {\n        return $\"ID: {Id}, ចំណងជើង: {Title}, អ្នកនិពន្ធ: {Author}, តម្លៃ: ${Price:F2}\";\n    }\n}\n\n// Generic Repository Implementation\npublic class GenericRepository<T> : IRepository<T> where T : BaseEntity\n{\n    private List<T> _items;\n    private int _nextId;\n    \n    public int Count => _items.Count;\n    \n    public GenericRepository()\n    {\n        _items = new List<T>();\n        _nextId = 1;\n    }\n    \n    public void Add(T item)\n    {\n        if (item == null)\n            throw new ArgumentNullException(nameof(item));\n        \n        item.Id = _nextId++;\n        item.CreatedDate = DateTime.Now;\n        item.ModifiedDate = DateTime.Now;\n        _items.Add(item);\n        \n        Console.WriteLine($\"បានបន្ថែម {typeof(T).Name}: {item}\");\n    }\n    \n    public T GetById(int id)\n    {\n        return _items.FirstOrDefault(item => item.Id == id);\n    }\n    \n    public List<T> GetAll()\n    {\n        return new List<T>(_items);\n    }\n    \n    public bool Update(T item)\n    {\n        if (item == null) return false;\n        \n        var existingItem = GetById(item.Id);\n        if (existingItem == null) return false;\n        \n        int index = _items.IndexOf(existingItem);\n        item.ModifiedDate = DateTime.Now;\n        _items[index] = item;\n        \n        Console.WriteLine($\"បានកែប្រែ {typeof(T).Name}: {item}\");\n        return true;\n    }\n    \n    public bool Delete(int id)\n    {\n        var item = GetById(id);\n        if (item == null) return false;\n        \n        _items.Remove(item);\n        Console.WriteLine($\"បានលុប {typeof(T).Name} ID: {id}\");\n        return true;\n    }\n    \n    public List<T> Search(Func<T, bool> predicate)\n    {\n        return _items.Where(predicate).ToList();\n    }\n    \n    public void DisplayAll()\n    {\n        if (_items.Count == 0)\n        {\n            Console.WriteLine($\"មិនមាន {typeof(T).Name} ទេ\");\n            return;\n        }\n        \n        Console.WriteLine($\"\\n=== បញ្ជី {typeof(T).Name} ({_items.Count} ធាតុ) ===\");\n        foreach (var item in _items)\n        {\n            Console.WriteLine($\"  {item}\");\n        }\n    }\n}\n\n// Generic Methods\npublic static class GenericUtilities\n{\n    // Generic method សម្រាប់ swap\n    public static void Swap<T>(ref T first, ref T second)\n    {\n        T temp = first;\n        first = second;\n        second = temp;\n    }\n    \n    // Generic method សម្រាប់រកតម្លៃធំបំផុត\n    public static T FindMax<T>(T[] array) where T : IComparable<T>\n    {\n        if (array == null || array.Length == 0)\n            throw new ArgumentException(\"Array មិនអាចទទេបានទេ\");\n        \n        T max = array[0];\n        for (int i = 1; i < array.Length; i++)\n        {\n            if (array[i].CompareTo(max) > 0)\n            {\n                max = array[i];\n            }\n        }\n        return max;\n    }\n    \n    // Generic method សម្រាប់បង្ហាញ array\n    public static void DisplayArray<T>(T[] array, string title = \"Array\")\n    {\n        Console.WriteLine($\"\\n{title}:\");\n        if (array == null || array.Length == 0)\n        {\n            Console.WriteLine(\"  ទទេ\");\n            return;\n        }\n        \n        for (int i = 0; i < array.Length; i++)\n        {\n            Console.WriteLine($\"  [{i}] {array[i]}\");\n        }\n    }\n    \n    // Generic method សម្រាប់ filter\n    public static List<T> Filter<T>(IEnumerable<T> source, Func<T, bool> predicate)\n    {\n        List<T> result = new List<T>();\n        foreach (T item in source)\n        {\n            if (predicate(item))\n            {\n                result.Add(item);\n            }\n        }\n        return result;\n    }\n    \n    // Generic method សម្រាប់ transform\n    public static List<TResult> Transform<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, TResult> selector)\n    {\n        List<TResult> result = new List<TResult>();\n        foreach (TSource item in source)\n        {\n            result.Add(selector(item));\n        }\n        return result;\n    }\n}\n\n// Generic Constraint Examples\npublic class MathOperations<T> where T : struct, IComparable<T>\n{\n    public static T Add(T a, T b)\n    {\n        // ការបូកសម្រាប់ value types\n        dynamic da = a;\n        dynamic db = b;\n        return da + db;\n    }\n    \n    public static bool IsGreater(T a, T b)\n    {\n        return a.CompareTo(b) > 0;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== Generics ក្នុង C# ===\");\n        \n        // ទេស្ត៍ Generic Stack\n        TestGenericStack();\n        \n        // ទេស្ត៍ Generic Repository\n        TestGenericRepository();\n        \n        // ទេស្ត៍ Generic Methods\n        TestGenericMethods();\n        \n        // ទេស្ត៍ Generic Constraints\n        TestGenericConstraints();\n    }\n    \n    static void TestGenericStack()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ Generic Stack ===\");\n        \n        // Stack នៃ integers\n        GenericStack<int> intStack = new GenericStack<int>(5);\n        \n        Console.WriteLine(\"\\nInteger Stack:\");\n        intStack.Push(10);\n        intStack.Push(20);\n        intStack.Push(30);\n        intStack.DisplayStack();\n        \n        Console.WriteLine($\"\\nPeek: {intStack.Peek()}\");\n        intStack.Pop();\n        intStack.DisplayStack();\n        \n        // Stack នៃ strings\n        GenericStack<string> stringStack = new GenericStack<string>(3);\n        \n        Console.WriteLine(\"\\nString Stack:\");\n        stringStack.Push(\"សួស្តី\");\n        stringStack.Push(\"ពិភពលោក\");\n        stringStack.Push(\"C#\");\n        stringStack.DisplayStack();\n        \n        string[] stackArray = stringStack.ToArray();\n        GenericUtilities.DisplayArray(stackArray, \"Stack as Array\");\n    }\n    \n    static void TestGenericRepository()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ Generic Repository ===\");\n        \n        // Student Repository\n        GenericRepository<Student> studentRepo = new GenericRepository<Student>();\n        \n        // បន្ថែមសិស្ស\n        Student student1 = new Student(\"សុខា\", 16, \"ថ្នាក់ទី១០\");\n        student1.Scores.AddRange(new double[] { 85, 90, 78 });\n        \n        Student student2 = new Student(\"ចន្ទា\", 17, \"ថ្នាក់ទី១១\");\n        student2.Scores.AddRange(new double[] { 92, 88, 95 });\n        \n        studentRepo.Add(student1);\n        studentRepo.Add(student2);\n        \n        studentRepo.DisplayAll();\n        \n        // រកសិស្ស\n        var foundStudent = studentRepo.GetById(1);\n        Console.WriteLine($\"\\nរកឃើញសិស្ស: {foundStudent}\");\n        \n        // Book Repository\n        GenericRepository<Book> bookRepo = new GenericRepository<Book>();\n        \n        bookRepo.Add(new Book(\"C# Programming\", \"John Doe\", \"123-456\", 29.99m));\n        bookRepo.Add(new Book(\"Advanced C#\", \"Jane Smith\", \"789-012\", 39.99m));\n        \n        bookRepo.DisplayAll();\n        \n        // ស្វែងរកសៀវភៅដែលតម្លៃ > $30\n        var expensiveBooks = bookRepo.Search(book => book.Price > 30);\n        Console.WriteLine($\"\\nសៀវភៅដែលតម្លៃ > $30: {expensiveBooks.Count} ក្បាល\");\n        foreach (var book in expensiveBooks)\n        {\n            Console.WriteLine($\"  {book}\");\n        }\n    }\n    \n    static void TestGenericMethods()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ Generic Methods ===\");\n        \n        // ទេស្ត៍ Swap\n        int a = 10, b = 20;\n        Console.WriteLine($\"មុនពេល swap: a = {a}, b = {b}\");\n        GenericUtilities.Swap(ref a, ref b);\n        Console.WriteLine($\"បន្ទាប់ពី swap: a = {a}, b = {b}\");\n        \n        string x = \"Hello\", y = \"World\";\n        Console.WriteLine($\"មុនពេល swap: x = {x}, y = {y}\");\n        GenericUtilities.Swap(ref x, ref y);\n        Console.WriteLine($\"បន្ទាប់ពី swap: x = {x}, y = {y}\");\n        \n        // ទេស្ត៍ FindMax\n        int[] numbers = { 5, 2, 8, 1, 9, 3 };\n        GenericUtilities.DisplayArray(numbers, \"Numbers Array\");\n        int maxNumber = GenericUtilities.FindMax(numbers);\n        Console.WriteLine($\"លេខធំបំផុត: {maxNumber}\");\n        \n        string[] names = { \"Alice\", \"Bob\", \"Charlie\", \"David\" };\n        GenericUtilities.DisplayArray(names, \"Names Array\");\n        string maxName = GenericUtilities.FindMax(names);\n        Console.WriteLine($\"ឈ្មោះធំបំផុត (តាមលំដាប់អក្សរ): {maxName}\");\n        \n        // ទេស្ត៍ Filter និង Transform\n        List<int> evenNumbers = GenericUtilities.Filter(numbers, n => n % 2 == 0);\n        Console.WriteLine($\"\\nលេខគូ: [{string.Join(\", \", evenNumbers)}]\");\n        \n        List<string> numberStrings = GenericUtilities.Transform(numbers, n => $\"លេខ_{n}\");\n        Console.WriteLine($\"បំលែងទៅ string: [{string.Join(\", \", numberStrings)}]\");\n    }\n    \n    static void TestGenericConstraints()\n    {\n        Console.WriteLine(\"\\n=== ទេស្ត៍ Generic Constraints ===\");\n        \n        // ទេស្ត៍ MathOperations ជាមួយ int\n        int result1 = MathOperations<int>.Add(15, 25);\n        Console.WriteLine($\"15 + 25 = {result1}\");\n        \n        bool isGreater1 = MathOperations<int>.IsGreater(30, 20);\n        Console.WriteLine($\"30 > 20: {isGreater1}\");\n        \n        // ទេស្ត៍ MathOperations ជាមួយ double\n        double result2 = MathOperations<double>.Add(15.5, 25.3);\n        Console.WriteLine($\"15.5 + 25.3 = {result2:F2}\");\n        \n        bool isGreater2 = MathOperations<double>.IsGreater(15.7, 15.8);\n        Console.WriteLine($\"15.7 > 15.8: {isGreater2}\");\n    }\n}",
    "tip": "ប្រើ where constraints ដើម្បីកំណត់លក្ខខណ្ឌសម្រាប់ generic type parameters"
  },
  {
    "id": 19,
    "category": "C#",
    "path": "/csharp/linq",
    "title": "មេរៀនទី១៩: LINQ (Language Integrated Query)",
    "explanation": "LINQ គឺជាបច្ចេកវិទ្យាដ៏មានអានុភាពក្នុង C# ដែលអនុញ្ញាតឱ្យសរសេរ queries ដើម្បីធ្វើការជាមួយទិន្នន័យ។ វាធ្វើការជាមួយ collections, databases, XML និងប្រភពទិន្នន័យផ្សេងៗ។",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\n// ថ្នាក់សម្រាប់ព័ត៌មានសិស្ស\npublic class Student\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Grade { get; set; }\n    public string Department { get; set; }\n    public List<double> Scores { get; set; }\n    public DateTime EnrollmentDate { get; set; }\n    public bool IsActive { get; set; }\n    \n    public Student()\n    {\n        Scores = new List<double>();\n        IsActive = true;\n    }\n    \n    public double GetAverage()\n    {\n        return Scores.Count > 0 ? Scores.Average() : 0;\n    }\n    \n    public override string ToString()\n    {\n        return $\"ID: {Id}, ឈ្មោះ: {Name}, អាយុ: {Age}, ថ្នាក់: {Grade}, ដេប៉ាតឺម៉ង់: {Department}, មធ្យម: {GetAverage():F2}\";\n    }\n}\n\n// ថ្នាក់សម្រាប់មុខវិជ្ជា\npublic class Subject\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Code { get; set; }\n    public int Credits { get; set; }\n    public string Department { get; set; }\n    \n    public override string ToString()\n    {\n        return $\"កូដ: {Code}, ឈ្មោះ: {Name}, ក្រេឌីត: {Credits}, ដេប៉ាតឺម៉ង់: {Department}\";\n    }\n}\n\n// ថ្នាក់សម្រាប់ការចុះឈ្មោះ\npublic class Enrollment\n{\n    public int StudentId { get; set; }\n    public int SubjectId { get; set; }\n    public double Score { get; set; }\n    public DateTime EnrollmentDate { get; set; }\n    public string Semester { get; set; }\n    \n    public override string ToString()\n    {\n        return $\"សិស្ស ID: {StudentId}, មុខវិជ្ជា ID: {SubjectId}, ពិន្ទុ: {Score:F2}, ឆមាស: {Semester}\";\n    }\n}\n\npublic class LinqExamples\n{\n    private List<Student> students;\n    private List<Subject> subjects;\n    private List<Enrollment> enrollments;\n    \n    public LinqExamples()\n    {\n        InitializeData();\n    }\n    \n    private void InitializeData()\n    {\n        // បង្កើតទិន្នន័យសិស្ស\n        students = new List<Student>\n        {\n            new Student { Id = 1, Name = \"សុខា\", Age = 20, Grade = \"ឆ្នាំទី២\", Department = \"IT\", \n                         Scores = new List<double> { 85, 90, 78, 92 }, EnrollmentDate = new DateTime(2022, 9, 1) },\n            new Student { Id = 2, Name = \"ចន្ទា\", Age = 19, Grade = \"ឆ្នាំទី១\", Department = \"Business\", \n                         Scores = new List<double> { 88, 85, 90, 87 }, EnrollmentDate = new DateTime(2023, 9, 1) },\n            new Student { Id = 3, Name = \"វិចិត្រ\", Age = 21, Grade = \"ឆ្នាំទី៣\", Department = \"IT\", \n                         Scores = new List<double> { 92, 88, 95, 90 }, EnrollmentDate = new DateTime(2021, 9, 1) },\n            new Student { Id = 4, Name = \"សុភា\", Age = 18, Grade = \"ឆ្នាំទី១\", Department = \"Engineering\", \n                         Scores = new List<double> { 76, 82, 79, 85 }, EnrollmentDate = new DateTime(2023, 9, 1) },\n            new Student { Id = 5, Name = \"រតនា\", Age = 22, Grade = \"ឆ្នាំទី៤\", Department = \"Business\", \n                         Scores = new List<double> { 95, 92, 88, 94 }, EnrollmentDate = new DateTime(2020, 9, 1) },\n            new Student { Id = 6, Name = \"ពិសាខ\", Age = 20, Grade = \"ឆ្នាំទី២\", Department = \"Engineering\", \n                         Scores = new List<double> { 80, 85, 82, 88 }, EnrollmentDate = new DateTime(2022, 9, 1), IsActive = false }\n        };\n        \n        // បង្កើតទិន្នន័យមុខវិជ្ជា\n        subjects = new List<Subject>\n        {\n            new Subject { Id = 1, Name = \"Programming Fundamentals\", Code = \"CS101\", Credits = 3, Department = \"IT\" },\n            new Subject { Id = 2, Name = \"Database Systems\", Code = \"CS201\", Credits = 4, Department = \"IT\" },\n            new Subject { Id = 3, Name = \"Web Development\", Code = \"CS301\", Credits = 3, Department = \"IT\" },\n            new Subject { Id = 4, Name = \"Business Management\", Code = \"BM101\", Credits = 3, Department = \"Business\" },\n            new Subject { Id = 5, Name = \"Marketing\", Code = \"MK201\", Credits = 3, Department = \"Business\" },\n            new Subject { Id = 6, Name = \"Engineering Mathematics\", Code = \"EM101\", Credits = 4, Department = \"Engineering\" },\n            new Subject { Id = 7, Name = \"Physics\", Code = \"PH101\", Credits = 4, Department = \"Engineering\" }\n        };\n        \n        // បង្កើតទិន្នន័យការចុះឈ្មោះ\n        enrollments = new List<Enrollment>\n        {\n            new Enrollment { StudentId = 1, SubjectId = 1, Score = 85, Semester = \"Fall 2023\", EnrollmentDate = new DateTime(2023, 9, 1) },\n            new Enrollment { StudentId = 1, SubjectId = 2, Score = 90, Semester = \"Fall 2023\", EnrollmentDate = new DateTime(2023, 9, 1) },\n            new Enrollment { StudentId = 2, SubjectId = 4, Score = 88, Semester = \"Fall 2023\", EnrollmentDate = new DateTime(2023, 9, 1) },\n            new Enrollment { StudentId = 2, SubjectId = 5, Score = 85, Semester = \"Fall 2023\", EnrollmentDate = new DateTime(2023, 9, 1) },\n            new Enrollment { StudentId = 3, SubjectId = 1, Score = 92, Semester = \"Spring 2023\", EnrollmentDate = new DateTime(2023, 2, 1) },\n            new Enrollment { StudentId = 3, SubjectId = 3, Score = 95, Semester = \"Spring 2023\", EnrollmentDate = new DateTime(2023, 2, 1) },\n            new Enrollment { StudentId = 4, SubjectId = 6, Score = 76, Semester = \"Fall 2023\", EnrollmentDate = new DateTime(2023, 9, 1) },\n            new Enrollment { StudentId = 4, SubjectId = 7, Score = 82, Semester = \"Fall 2023\", EnrollmentDate = new DateTime(2023, 9, 1) },\n            new Enrollment { StudentId = 5, SubjectId = 4, Score = 95, Semester = \"Spring 2023\", EnrollmentDate = new DateTime(2023, 2, 1) },\n            new Enrollment { StudentId = 5, SubjectId = 5, Score = 92, Semester = \"Spring 2023\", EnrollmentDate = new DateTime(2023, 2, 1) }\n        };\n    }\n    \n    // Basic LINQ Operations\n    public void DemoBasicOperations()\n    {\n        Console.WriteLine(\"\\n=== Basic LINQ Operations ===\");\n        \n        // Where - ការត្រង\n        var activeStudents = students.Where(s => s.IsActive).ToList();\n        Console.WriteLine($\"\\nសិស្សដែលនៅសកម្ម: {activeStudents.Count} នាក់\");\n        \n        var itStudents = students.Where(s => s.Department == \"IT\").ToList();\n        Console.WriteLine($\"សិស្ស IT: {itStudents.Count} នាក់\");\n        \n        // Select - ការជ្រើសរើស\n        var studentNames = students.Select(s => s.Name).ToList();\n        Console.WriteLine($\"\\nឈ្មោះសិស្ស: [{string.Join(\", \", studentNames)}]\");\n        \n        var studentInfo = students.Select(s => new { s.Name, s.Department, Average = s.GetAverage() }).ToList();\n        Console.WriteLine(\"\\nព័ត៌មានសិស្ស (Anonymous Type):\");\n        foreach (var info in studentInfo)\n        {\n            Console.WriteLine($\"  {info.Name} - {info.Department} - មធ្យម: {info.Average:F2}\");\n        }\n        \n        // OrderBy - ការចាត់តាម\n        var sortedByAge = students.OrderBy(s => s.Age).ToList();\n        Console.WriteLine(\"\\nចាត់តាមអាយុ (តិចទៅធំ):\");\n        foreach (var student in sortedByAge)\n        {\n            Console.WriteLine($\"  {student.Name} - {student.Age} ឆ្នាំ\");\n        }\n        \n        var sortedByAverage = students.OrderByDescending(s => s.GetAverage()).ToList();\n        Console.WriteLine(\"\\nចាត់តាមពិន្ទុមធ្យម (ខ្ពស់ទៅទាប):\");\n        foreach (var student in sortedByAverage)\n        {\n            Console.WriteLine($\"  {student.Name} - មធ្យម: {student.GetAverage():F2}\");\n        }\n    }\n    \n    // Aggregation Operations\n    public void DemoAggregationOperations()\n    {\n        Console.WriteLine(\"\\n=== Aggregation Operations ===\");\n        \n        // Count\n        int totalStudents = students.Count();\n        int itStudentsCount = students.Count(s => s.Department == \"IT\");\n        Console.WriteLine($\"\\nចំនួនសិស្សសរុប: {totalStudents}\");\n        Console.WriteLine($\"ចំនួនសិស្ស IT: {itStudentsCount}\");\n        \n        // Sum, Average, Min, Max\n        double totalAge = students.Sum(s => s.Age);\n        double averageAge = students.Average(s => s.Age);\n        int minAge = students.Min(s => s.Age);\n        int maxAge = students.Max(s => s.Age);\n        \n        Console.WriteLine($\"\\nអាយុសរុប: {totalAge}\");\n        Console.WriteLine($\"អាយុមធ្យម: {averageAge:F1} ឆ្នាំ\");\n        Console.WriteLine($\"អាយុតិចបំផុត: {minAge} ឆ្នាំ\");\n        Console.WriteLine($\"អាយុធំបំផុត: {maxAge} ឆ្នាំ\");\n        \n        // Any, All\n        bool hasYoungStudents = students.Any(s => s.Age < 20);\n        bool allActive = students.All(s => s.IsActive);\n        Console.WriteLine($\"\\nមានសិស្សអាយុតិចជាង 20: {hasYoungStudents}\");\n        Console.WriteLine($\"សិស្សទាំងអស់សកម្ម: {allActive}\");\n        \n        // First, Last, Single\n        var firstStudent = students.First();\n        var lastStudent = students.Last();\n        var oldestStudent = students.OrderByDescending(s => s.Age).First();\n        \n        Console.WriteLine($\"\\nសិស្សដំបូង: {firstStudent.Name}\");\n        Console.WriteLine($\"សិស្សចុងក្រោយ: {lastStudent.Name}\");\n        Console.WriteLine($\"សិស្សចាស់បំផុត: {oldestStudent.Name} ({oldestStudent.Age} ឆ្នាំ)\");\n    }\n    \n    // Grouping Operations\n    public void DemoGroupingOperations()\n    {\n        Console.WriteLine(\"\\n=== Grouping Operations ===\");\n        \n        // GroupBy Department\n        var groupedByDepartment = students.GroupBy(s => s.Department).ToList();\n        Console.WriteLine(\"\\nចាត់ក្រុមតាមដេប៉ាតឺម៉ង់:\");\n        foreach (var group in groupedByDepartment)\n        {\n            Console.WriteLine($\"\\n{group.Key} ({group.Count()} នាក់):\");\n            foreach (var student in group)\n            {\n                Console.WriteLine($\"  - {student.Name} (មធ្យម: {student.GetAverage():F2})\");\n            }\n            \n            double departmentAverage = group.Average(s => s.GetAverage());\n            Console.WriteLine($\"  មធ្យមដេប៉ាតឺម៉ង់: {departmentAverage:F2}\");\n        }\n        \n        // GroupBy Grade\n        var groupedByGrade = students.GroupBy(s => s.Grade).ToList();\n        Console.WriteLine(\"\\nចាត់ក្រុមតាមថ្នាក់:\");\n        foreach (var group in groupedByGrade)\n        {\n            Console.WriteLine($\"{group.Key}: {group.Count()} នាក់\");\n        }\n        \n        // Complex Grouping\n        var complexGrouping = students\n            .GroupBy(s => new { s.Department, s.Grade })\n            .Select(g => new \n            {\n                Department = g.Key.Department,\n                Grade = g.Key.Grade,\n                Count = g.Count(),\n                AverageScore = g.Average(s => s.GetAverage())\n            })\n            .ToList();\n        \n        Console.WriteLine(\"\\nចាត់ក្រុមតាមដេប៉ាតឺម៉ង់និងថ្នាក់:\");\n        foreach (var group in complexGrouping)\n        {\n            Console.WriteLine($\"{group.Department} - {group.Grade}: {group.Count} នាក់, មធ្យម: {group.AverageScore:F2}\");\n        }\n    }\n    \n    // Join Operations\n    public void DemoJoinOperations()\n    {\n        Console.WriteLine(\"\\n=== Join Operations ===\");\n        \n        // Inner Join\n        var studentEnrollments = from student in students\n                                join enrollment in enrollments on student.Id equals enrollment.StudentId\n                                join subject in subjects on enrollment.SubjectId equals subject.Id\n                                select new\n                                {\n                                    StudentName = student.Name,\n                                    SubjectName = subject.Name,\n                                    SubjectCode = subject.Code,\n                                    Score = enrollment.Score,\n                                    Semester = enrollment.Semester\n                                };\n        \n        Console.WriteLine(\"\\nការចុះឈ្មោះសិស្ស (Inner Join):\");\n        foreach (var enrollment in studentEnrollments)\n        {\n            Console.WriteLine($\"{enrollment.StudentName} - {enrollment.SubjectCode} ({enrollment.SubjectName}) - ពិន្ទុ: {enrollment.Score:F2} - {enrollment.Semester}\");\n        }\n        \n        // Group Join\n        var studentsWithEnrollments = from student in students\n                                     join enrollment in enrollments on student.Id equals enrollment.StudentId into studentEnrollments\n                                     select new\n                                     {\n                                         Student = student,\n                                         EnrollmentCount = studentEnrollments.Count(),\n                                         AverageEnrollmentScore = studentEnrollments.Any() ? studentEnrollments.Average(e => e.Score) : 0\n                                     };\n        \n        Console.WriteLine(\"\\nសិស្សជាមួយការចុះឈ្មោះ (Group Join):\");\n        foreach (var item in studentsWithEnrollments)\n        {\n            Console.WriteLine($\"{item.Student.Name}: {item.EnrollmentCount} មុខវិជ្ជា, មធ្យម: {item.AverageEnrollmentScore:F2}\");\n        }\n    }\n    \n    // Advanced LINQ Operations\n    public void DemoAdvancedOperations()\n    {\n        Console.WriteLine(\"\\n=== Advanced LINQ Operations ===\");\n        \n        // SelectMany - Flatten collections\n        var allScores = students.SelectMany(s => s.Scores).ToList();\n        Console.WriteLine($\"\\nពិន្ទុទាំងអស់: [{string.Join(\", \", allScores.Select(s => s.ToString(\"F1\")))}]\");\n        Console.WriteLine($\"ចំនួនពិន្ទុសរុប: {allScores.Count}\");\n        Console.WriteLine($\"មធ្យមពិន្ទុទាំងអស់: {allScores.Average():F2}\");\n        \n        // Distinct\n        var uniqueDepartments = students.Select(s => s.Department).Distinct().ToList();\n        Console.WriteLine($\"\\nដេប៉ាតឺម៉ង់តែមួយគត់: [{string.Join(\", \", uniqueDepartments)}]\");\n        \n        // Skip and Take (Pagination)\n        var pagedStudents = students.OrderBy(s => s.Name).Skip(2).Take(3).ToList();\n        Console.WriteLine(\"\\nសិស្សទំព័រទី២ (រំលង 2, យក 3):\");\n        foreach (var student in pagedStudents)\n        {\n            Console.WriteLine($\"  {student.Name}\");\n        }\n        \n        // Union, Intersect, Except\n        var itStudentNames = students.Where(s => s.Department == \"IT\").Select(s => s.Name).ToList();\n        var youngStudentNames = students.Where(s => s.Age < 21).Select(s => s.Name).ToList();\n        \n        var unionNames = itStudentNames.Union(youngStudentNames).ToList();\n        var intersectNames = itStudentNames.Intersect(youngStudentNames).ToList();\n        var exceptNames = itStudentNames.Except(youngStudentNames).ToList();\n        \n        Console.WriteLine($\"\\nសិស្ស IT: [{string.Join(\", \", itStudentNames)}]\");\n        Console.WriteLine($\"សិស្សវ័យក្មេង: [{string.Join(\", \", youngStudentNames)}]\");\n        Console.WriteLine($\"Union: [{string.Join(\", \", unionNames)}]\");\n        Console.WriteLine($\"Intersect: [{string.Join(\", \", intersectNames)}]\");\n        Console.WriteLine($\"Except: [{string.Join(\", \", exceptNames)}]\");\n        \n        // Zip\n        var studentRanks = Enumerable.Range(1, students.Count).ToList();\n        var rankedStudents = students.OrderByDescending(s => s.GetAverage())\n                                   .Zip(studentRanks, (student, rank) => new { Rank = rank, Student = student })\n                                   .ToList();\n        \n        Console.WriteLine(\"\\nចំណាត់ថ្នាក់សិស្ស:\");\n        foreach (var item in rankedStudents)\n        {\n            Console.WriteLine($\"  #{item.Rank}: {item.Student.Name} - មធ្យម: {item.Student.GetAverage():F2}\");\n        }\n    }\n    \n    // Method Syntax vs Query Syntax\n    public void DemoSyntaxComparison()\n    {\n        Console.WriteLine(\"\\n=== Method Syntax vs Query Syntax ===\");\n        \n        // Method Syntax\n        var methodResult = students\n            .Where(s => s.Department == \"IT\")\n            .OrderByDescending(s => s.GetAverage())\n            .Select(s => new { s.Name, Average = s.GetAverage() })\n            .ToList();\n        \n        // Query Syntax\n        var queryResult = (from s in students\n                          where s.Department == \"IT\"\n                          orderby s.GetAverage() descending\n                          select new { s.Name, Average = s.GetAverage() })\n                          .ToList();\n        \n        Console.WriteLine(\"\\nMethod Syntax Result:\");\n        foreach (var item in methodResult)\n        {\n            Console.WriteLine($\"  {item.Name}: {item.Average:F2}\");\n        }\n        \n        Console.WriteLine(\"\\nQuery Syntax Result:\");\n        foreach (var item in queryResult)\n        {\n            Console.WriteLine($\"  {item.Name}: {item.Average:F2}\");\n        }\n    }\n    \n    // Performance Considerations\n    public void DemoPerformanceConsiderations()\n    {\n        Console.WriteLine(\"\\n=== Performance Considerations ===\");\n        \n        // Deferred Execution\n        Console.WriteLine(\"\\nDeferred Execution Demo:\");\n        var query = students.Where(s => s.Age > 19); // មិនទាន់ execute\n        Console.WriteLine($\"Query created, students count: {students.Count}\");\n        \n        // បន្ថែមសិស្សថ្មី\n        students.Add(new Student { Id = 7, Name = \"ថារ៉ា\", Age = 23, Department = \"IT\", Grade = \"ឆ្នាំទី៤\" });\n        Console.WriteLine($\"Added new student, students count: {students.Count}\");\n        \n        // ឥឡូវ execute query\n        var result = query.ToList();\n        Console.WriteLine($\"Query executed, result count: {result.Count}\");\n        \n        // Immediate Execution\n        var immediateResult = students.Where(s => s.Age > 19).ToList(); // execute ភ្លាម\n        Console.WriteLine($\"Immediate execution result count: {immediateResult.Count}\");\n        \n        // ដកសិស្សចេញ\n        students.RemoveAt(students.Count - 1);\n        Console.WriteLine($\"\\nRemoved student, students count: {students.Count}\");\n        Console.WriteLine($\"Deferred query result count: {query.Count()}\"); // execute ម្តងទៀត\n        Console.WriteLine($\"Immediate result count: {immediateResult.Count}\"); // មិនផ្លាស់ប្តូរ\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== LINQ (Language Integrated Query) ក្នុង C# ===\");\n        \n        LinqExamples examples = new LinqExamples();\n        \n        // ដំណើរការ demos ផ្សេងៗ\n        examples.DemoBasicOperations();\n        examples.DemoAggregationOperations();\n        examples.DemoGroupingOperations();\n        examples.DemoJoinOperations();\n        examples.DemoAdvancedOperations();\n        examples.DemoSyntaxComparison();\n        examples.DemoPerformanceConsiderations();\n        \n        Console.WriteLine(\"\\n=== បញ្ចប់ការបង្ហាញ LINQ ===\");\n    }\n}",
    "tip": "LINQ queries មាន deferred execution - ពួកវាមិន execute រហូតដល់អ្នកហៅ ToList(), Count(), ឬ enumerate លើវា"
  },
  {
    "id": 20,
    "category": "C#",
    "path": "/csharp/async-await",
    "title": "មេរៀនទី២០: ការសរសេរកម្មវិធីអសមកាលិក (Async/Await)",
    "explanation": "Async/Await អនុញ្ញាតឱ្យសរសេរកូដអសមកាលិកដែលមិនបិទ UI thread ឬ server threads។ វាជួយធ្វើឱ្យកម្មវិធីមានប្រតិកម្មល្អ និងអាចដោះស្រាយការងារច្រើនក្នុងពេលដំណាលគ្នា។",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing System.Diagnostics;\n\n// ថ្នាក់សម្រាប់ទិន្នន័យ API\npublic class WeatherData\n{\n    public string City { get; set; }\n    public double Temperature { get; set; }\n    public string Description { get; set; }\n    public DateTime Timestamp { get; set; }\n    \n    public override string ToString()\n    {\n        return $\"{City}: {Temperature}°C - {Description} ({Timestamp:HH:mm:ss})\";\n    }\n}\n\n// ថ្នាក់សម្រាប់ការទាញយកទិន្នន័យ\npublic class DataDownloader\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private static readonly Random random = new Random();\n    \n    // Simulate API call\n    public static async Task<WeatherData> GetWeatherAsync(string city)\n    {\n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] កំពុងទាញយកទិន្នន័យអាកាសធាតុសម្រាប់ {city}...\");\n        \n        // Simulate network delay\n        await Task.Delay(random.Next(1000, 3000));\n        \n        // Simulate random weather data\n        var weather = new WeatherData\n        {\n            City = city,\n            Temperature = random.Next(20, 35),\n            Description = GetRandomWeatherDescription(),\n            Timestamp = DateTime.Now\n        };\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] បានទទួលទិន្នន័យ: {weather}\");\n        return weather;\n    }\n    \n    private static string GetRandomWeatherDescription()\n    {\n        string[] descriptions = { \"ស្រឡះ\", \"មានពពក\", \"ភ្លៀង\", \"ព្យុះ\", \"ស្រឡះមានពពក\" };\n        return descriptions[random.Next(descriptions.Length)];\n    }\n    \n    // Simulate file download\n    public static async Task<string> DownloadFileAsync(string fileName, int sizeInMB)\n    {\n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] កំពុងទាញយកឯកសារ {fileName} ({sizeInMB}MB)...\");\n        \n        // Simulate download progress\n        for (int i = 0; i <= 100; i += 10)\n        {\n            await Task.Delay(200); // Simulate download time\n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] {fileName}: {i}% បានបញ្ចប់\");\n        }\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] បានទាញយក {fileName} ដោយជោគជ័យ!\");\n        return $\"Content of {fileName}\";\n    }\n    \n    // Simulate database operation\n    public static async Task<List<string>> GetDatabaseRecordsAsync(string tableName, int recordCount)\n    {\n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] កំពុងទាញយកទិន្នន័យពីតារាង {tableName}...\");\n        \n        await Task.Delay(1500); // Simulate database query time\n        \n        List<string> records = new List<string>();\n        for (int i = 1; i <= recordCount; i++)\n        {\n            records.Add($\"Record_{i}_from_{tableName}\");\n        }\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] បានទទួល {records.Count} កំណត់ត្រាពី {tableName}\");\n        return records;\n    }\n}\n\n// ថ្នាក់សម្រាប់ការដំណើរការឯកសារ\npublic class FileProcessor\n{\n    public static async Task ProcessLargeFileAsync(string fileName)\n    {\n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ចាប់ផ្តើមដំណើរការឯកសារ {fileName}...\");\n        \n        try\n        {\n            // Simulate reading file\n            await Task.Run(() =>\n            {\n                for (int i = 1; i <= 10; i++)\n                {\n                    Thread.Sleep(300); // Simulate CPU-intensive work\n                    Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ដំណើរការបន្ទាត់ {i * 1000} នៃ {fileName}\");\n                }\n            });\n            \n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] បានដំណើរការ {fileName} ដោយជោគជ័យ!\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] កំហុសក្នុងការដំណើរការ {fileName}: {ex.Message}\");\n        }\n    }\n    \n    public static async Task<string> CreateReportAsync(List<string> data, string reportName)\n    {\n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] កំពុងបង្កើតរបាយការណ៍ {reportName}...\");\n        \n        await Task.Delay(1000); // Simulate report generation\n        \n        string report = $\"របាយការណ៍: {reportName}\\n\";\n        report += $\"ចំនួនទិន្នន័យ: {data.Count}\\n\";\n        report += $\"បង្កើតនៅ: {DateTime.Now}\\n\";\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] បានបង្កើតរបាយការណ៍ {reportName} ដោយជោគជ័យ!\");\n        return report;\n    }\n}\n\n// ថ្នាក់សម្រាប់ការគ្រប់គ្រងកំហុស\npublic class ErrorHandlingExamples\n{\n    public static async Task<string> RiskyOperationAsync(string operationName, bool shouldFail = false)\n    {\n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ចាប់ផ្តើមប្រតិបត្តិការ {operationName}...\");\n        \n        await Task.Delay(1000);\n        \n        if (shouldFail)\n        {\n            throw new InvalidOperationException($\"ប្រតិបត្តិការ {operationName} បានបរាជ័យ!\");\n        }\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ប្រតិបត្តិការ {operationName} ជោគជ័យ!\");\n        return $\"លទ្ធផលពី {operationName}\";\n    }\n    \n    public static async Task DemoErrorHandlingAsync()\n    {\n        Console.WriteLine(\"\\n=== ការគ្រប់គ្រងកំហុសក្នុង Async Operations ===\");\n        \n        try\n        {\n            // ប្រតិបត្តិការជោគជ័យ\n            string result1 = await RiskyOperationAsync(\"ប្រតិបត្តិការទី១\", false);\n            Console.WriteLine($\"លទ្ធផល: {result1}\");\n            \n            // ប្រតិបត្តិការបរាជ័យ\n            string result2 = await RiskyOperationAsync(\"ប្រតិបត្តិការទី២\", true);\n            Console.WriteLine($\"លទ្ធផល: {result2}\");\n        }\n        catch (InvalidOperationException ex)\n        {\n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ចាប់បានកំហុស: {ex.Message}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] កំហុសទូទៅ: {ex.Message}\");\n        }\n        finally\n        {\n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ការសម្អាតបានបញ្ចប់\");\n        }\n    }\n}\n\n// ថ្នាក់សម្រាប់ការបង្ហាញ Async/Await\npublic class AsyncAwaitExamples\n{\n    // Sequential vs Parallel execution\n    public static async Task DemoSequentialVsParallelAsync()\n    {\n        Console.WriteLine(\"\\n=== Sequential vs Parallel Execution ===\");\n        \n        string[] cities = { \"ភ្នំពេញ\", \"សៀមរាប\", \"បាត់ដំបង\", \"កំពង់ចាម\" };\n        \n        // Sequential execution\n        Console.WriteLine(\"\\n--- Sequential Execution ---\");\n        Stopwatch sw1 = Stopwatch.StartNew();\n        \n        List<WeatherData> sequentialResults = new List<WeatherData>();\n        foreach (string city in cities)\n        {\n            WeatherData weather = await DataDownloader.GetWeatherAsync(city);\n            sequentialResults.Add(weather);\n        }\n        \n        sw1.Stop();\n        Console.WriteLine($\"Sequential execution រួចរាល់ក្នុងរយៈពេល: {sw1.ElapsedMilliseconds}ms\");\n        \n        // Parallel execution\n        Console.WriteLine(\"\\n--- Parallel Execution ---\");\n        Stopwatch sw2 = Stopwatch.StartNew();\n        \n        Task<WeatherData>[] tasks = new Task<WeatherData>[cities.Length];\n        for (int i = 0; i < cities.Length; i++)\n        {\n            tasks[i] = DataDownloader.GetWeatherAsync(cities[i]);\n        }\n        \n        WeatherData[] parallelResults = await Task.WhenAll(tasks);\n        \n        sw2.Stop();\n        Console.WriteLine($\"Parallel execution រួចរាល់ក្នុងរយៈពេល: {sw2.ElapsedMilliseconds}ms\");\n        \n        Console.WriteLine($\"\\nការកែលម្អល្បឿន: {(double)sw1.ElapsedMilliseconds / sw2.ElapsedMilliseconds:F2}x លឿនជាង\");\n        \n        Console.WriteLine(\"\\nលទ្ធផល Parallel:\");\n        foreach (var weather in parallelResults)\n        {\n            Console.WriteLine($\"  {weather}\");\n        }\n    }\n    \n    // Task.WhenAll and Task.WhenAny\n    public static async Task DemoTaskCombinationAsync()\n    {\n        Console.WriteLine(\"\\n=== Task.WhenAll និង Task.WhenAny ===\");\n        \n        // បង្កើត tasks ច្រើន\n        Task<string> download1 = DataDownloader.DownloadFileAsync(\"file1.txt\", 5);\n        Task<string> download2 = DataDownloader.DownloadFileAsync(\"file2.txt\", 3);\n        Task<string> download3 = DataDownloader.DownloadFileAsync(\"file3.txt\", 7);\n        \n        // Task.WhenAny - រង់ចាំ task ដំបូងបញ្ចប់\n        Console.WriteLine(\"\\n--- Task.WhenAny ---\");\n        Task<string> firstCompleted = await Task.WhenAny(download1, download2, download3);\n        string firstResult = await firstCompleted;\n        Console.WriteLine($\"Task ដំបូងបញ្ចប់: {firstResult.Substring(0, Math.Min(20, firstResult.Length))}...\");\n        \n        // Task.WhenAll - រង់ចាំ tasks ទាំងអស់បញ្ចប់\n        Console.WriteLine(\"\\n--- Task.WhenAll ---\");\n        string[] allResults = await Task.WhenAll(download1, download2, download3);\n        Console.WriteLine($\"Tasks ទាំងអស់បានបញ្ចប់! ទទួលបាន {allResults.Length} លទ្ធផល\");\n    }\n    \n    // CancellationToken\n    public static async Task DemoCancellationAsync()\n    {\n        Console.WriteLine(\"\\n=== CancellationToken ===\");\n        \n        using (CancellationTokenSource cts = new CancellationTokenSource())\n        {\n            // បោះបង់ការងារបន្ទាប់ពី 3 វិនាទី\n            cts.CancelAfter(TimeSpan.FromSeconds(3));\n            \n            try\n            {\n                await LongRunningTaskAsync(cts.Token);\n            }\n            catch (OperationCanceledException)\n            {\n                Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ការងារត្រូវបានបោះបង់!\");\n            }\n        }\n    }\n    \n    private static async Task LongRunningTaskAsync(CancellationToken cancellationToken)\n    {\n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ចាប់ផ្តើមការងារយូរ...\");\n        \n        for (int i = 1; i <= 10; i++)\n        {\n            // ពិនិត្យ cancellation\n            cancellationToken.ThrowIfCancellationRequested();\n            \n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ដំណាក់កាលទី {i}/10\");\n            await Task.Delay(1000, cancellationToken);\n        }\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ការងារយូរបានបញ្ចប់!\");\n    }\n    \n    // ConfigureAwait\n    public static async Task DemoConfigureAwaitAsync()\n    {\n        Console.WriteLine(\"\\n=== ConfigureAwait ===\");\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] Thread ID មុនពេល await: {Thread.CurrentThread.ManagedThreadId}\");\n        \n        // ConfigureAwait(false) - មិនត្រូវការត្រលប់ទៅ original context\n        await Task.Delay(1000).ConfigureAwait(false);\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] Thread ID បន្ទាប់ពី ConfigureAwait(false): {Thread.CurrentThread.ManagedThreadId}\");\n        \n        // ConfigureAwait(true) ឬមិនមាន ConfigureAwait - ត្រលប់ទៅ original context\n        await Task.Delay(1000).ConfigureAwait(true);\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] Thread ID បន្ទាប់ពី ConfigureAwait(true): {Thread.CurrentThread.ManagedThreadId}\");\n    }\n    \n    // Async enumerable (C# 8.0+)\n    public static async IAsyncEnumerable<int> GenerateNumbersAsync(int count)\n    {\n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ចាប់ផ្តើមបង្កើតលេខ {count} ចំនួន...\");\n        \n        for (int i = 1; i <= count; i++)\n        {\n            await Task.Delay(500); // Simulate async work\n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] បង្កើតលេខ: {i}\");\n            yield return i;\n        }\n        \n        Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] បានបង្កើតលេខទាំងអស់!\");\n    }\n    \n    public static async Task DemoAsyncEnumerableAsync()\n    {\n        Console.WriteLine(\"\\n=== Async Enumerable ===\");\n        \n        await foreach (int number in GenerateNumbersAsync(5))\n        {\n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] ទទួលបានលេខ: {number}\");\n        }\n    }\n    \n    // Complex async workflow\n    public static async Task DemoComplexWorkflowAsync()\n    {\n        Console.WriteLine(\"\\n=== Complex Async Workflow ===\");\n        \n        try\n        {\n            // ដំណាក់កាលទី១: ទាញយកទិន្នន័យ\n            Console.WriteLine(\"\\nដំណាក់កាលទី១: ទាញយកទិន្នន័យ...\");\n            Task<List<string>> dataTask = DataDownloader.GetDatabaseRecordsAsync(\"Users\", 100);\n            Task<WeatherData> weatherTask = DataDownloader.GetWeatherAsync(\"ភ្នំពេញ\");\n            \n            // រង់ចាំទាំងពីរ\n            await Task.WhenAll(dataTask, weatherTask);\n            \n            List<string> data = await dataTask;\n            WeatherData weather = await weatherTask;\n            \n            // ដំណាក់កាលទី២: ដំណើរការទិន្នន័យ\n            Console.WriteLine(\"\\nដំណាក់កាលទី២: ដំណើរការទិន្នន័យ...\");\n            Task processTask = FileProcessor.ProcessLargeFileAsync(\"data.csv\");\n            Task<string> reportTask = FileProcessor.CreateReportAsync(data, \"របាយការណ៍ប្រចាំខែ\");\n            \n            await Task.WhenAll(processTask, reportTask);\n            string report = await reportTask;\n            \n            // ដំណាក់កាលទី៣: បញ្ចប់\n            Console.WriteLine(\"\\nដំណាក់កាលទី៣: បញ្ចប់...\");\n            Console.WriteLine($\"ទទួលបានទិន្នន័យ: {data.Count} កំណត់ត្រា\");\n            Console.WriteLine($\"អាកាសធាតុ: {weather}\");\n            Console.WriteLine($\"របាយការណ៍: {report.Split('\\n')[0]}\");\n            \n            Console.WriteLine($\"\\n[{DateTime.Now:HH:mm:ss}] Workflow បានបញ្ចប់ដោយជោគជ័យ!\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"[{DateTime.Now:HH:mm:ss}] កំហុសក្នុង workflow: {ex.Message}\");\n        }\n    }\n}\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        Console.WriteLine(\"=== Async/Await ក្នុង C# ===\");\n        \n        try\n        {\n            // ការបង្ហាញផ្សេងៗ\n            await AsyncAwaitExamples.DemoSequentialVsParallelAsync();\n            await AsyncAwaitExamples.DemoTaskCombinationAsync();\n            await ErrorHandlingExamples.DemoErrorHandlingAsync();\n            await AsyncAwaitExamples.DemoCancellationAsync();\n            await AsyncAwaitExamples.DemoConfigureAwaitAsync();\n            await AsyncAwaitExamples.DemoAsyncEnumerableAsync();\n            await AsyncAwaitExamples.DemoComplexWorkflowAsync();\n            \n            Console.WriteLine($\"\\n[{DateTime.Now:HH:mm:ss}] === បញ្ចប់ការបង្ហាញ Async/Await ===\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"កំហុសក្នុងកម្មវិធីសំខាន់: {ex.Message}\");\n        }\n        \n        Console.WriteLine(\"\\nចុច Enter ដើម្បីចេញ...\");\n        Console.ReadLine();\n    }\n}",
    "tip": "ប្រើ ConfigureAwait(false) នៅក្នុង library code ដើម្បីជៀសវាងការ deadlock"
  },
  {
    "id": 21,
    "category": "C#",
    "path": "/csharp/attributes-reflection",
    "title": "មេរៀនទី២១: គុណលក្ខណៈនិងការឆ្លុះបញ្ចាំង (Attributes and Reflection)",
    "explanation": "Attributes ផ្តល់ព័ត៌មាន metadata អំពីកូដ។ Reflection អនុញ្ញាតឱ្យពិនិត្យ និងប្រើប្រាស់ type information នៅ runtime។ ទាំងពីរនេះជាឧបករណ៍មានអានុភាពសម្រាប់ការបង្កើត frameworks និង tools។",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\n\n// Custom Attributes\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]\npublic class AuthorAttribute : Attribute\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public DateTime DateCreated { get; set; }\n    public string Version { get; set; }\n    \n    public AuthorAttribute(string name)\n    {\n        Name = name;\n        DateCreated = DateTime.Now;\n        Version = \"1.0\";\n    }\n    \n    public override string ToString()\n    {\n        return $\"អ្នកនិពន្ធ: {Name}, អ៊ីមែល: {Email}, កាលបរិច្ឆេទ: {DateCreated:yyyy-MM-dd}, កំណែ: {Version}\";\n    }\n}\n\n[AttributeUsage(AttributeTargets.Property)]\npublic class DisplayInfoAttribute : Attribute\n{\n    public string DisplayName { get; set; }\n    public string Description { get; set; }\n    public bool IsRequired { get; set; }\n    public int Order { get; set; }\n    \n    public DisplayInfoAttribute(string displayName)\n    {\n        DisplayName = displayName;\n        Order = 0;\n    }\n}\n\n[AttributeUsage(AttributeTargets.Method)]\npublic class BenchmarkAttribute : Attribute\n{\n    public string Description { get; set; }\n    public bool LogExecution { get; set; } = true;\n    \n    public BenchmarkAttribute(string description = \"\")\n    {\n        Description = description;\n    }\n}\n\n[AttributeUsage(AttributeTargets.Class)]\npublic class TableAttribute : Attribute\n{\n    public string TableName { get; set; }\n    public string Schema { get; set; } = \"dbo\";\n    \n    public TableAttribute(string tableName)\n    {\n        TableName = tableName;\n    }\n}\n\n[AttributeUsage(AttributeTargets.Property)]\npublic class ColumnAttribute : Attribute\n{\n    public string ColumnName { get; set; }\n    public string DataType { get; set; }\n    public bool IsPrimaryKey { get; set; }\n    public bool IsNullable { get; set; } = true;\n    \n    public ColumnAttribute(string columnName)\n    {\n        ColumnName = columnName;\n    }\n}\n\n// Model classes with attributes\n[Author(\"សុខា\", Email = \"sokha@example.com\", Version = \"2.0\")]\n[Author(\"ចន្ទា\", Email = \"chantha@example.com\")]\n[Table(\"Students\", Schema = \"Education\")]\n[Description(\"ថ្នាក់សម្រាប់រក្សាទុកព័ត៌មានសិស្ស\")]\npublic class Student\n{\n    [Column(\"student_id\", DataType = \"int\", IsPrimaryKey = true, IsNullable = false)]\n    [DisplayInfo(\"លេខសម្គាល់\", Description = \"លេខសម្គាល់តែមួយគត់របស់សិស្ស\", IsRequired = true, Order = 1)]\n    public int Id { get; set; }\n    \n    [Column(\"full_name\", DataType = \"nvarchar(100)\", IsNullable = false)]\n    [DisplayInfo(\"ឈ្មោះពេញ\", Description = \"ឈ្មោះពេញរបស់សិស្ស\", IsRequired = true, Order = 2)]\n    [Required(ErrorMessage = \"ឈ្មោះគឺចាំបាច់\")]\n    [StringLength(100, MinimumLength = 2, ErrorMessage = \"ឈ្មោះត្រូវតែមានពី 2 ដល់ 100 តួអក្សរ\")]\n    public string Name { get; set; }\n    \n    [Column(\"age\", DataType = \"int\")]\n    [DisplayInfo(\"អាយុ\", Description = \"អាយុរបស់សិស្ស\", Order = 3)]\n    [Range(15, 100, ErrorMessage = \"អាយុត្រូវតែនៅចន្លោះ 15 ដល់ 100 ឆ្នាំ\")]\n    public int Age { get; set; }\n    \n    [Column(\"email\", DataType = \"nvarchar(255)\")]\n    [DisplayInfo(\"អ៊ីមែល\", Description = \"អាសយដ្ឋានអ៊ីមែលរបស់សិស្ស\", Order = 4)]\n    [EmailAddress(ErrorMessage = \"ទម្រង់អ៊ីមែលមិនត្រឹមត្រូវ\")]\n    public string Email { get; set; }\n    \n    [Column(\"phone\", DataType = \"nvarchar(20)\")]\n    [DisplayInfo(\"លេខទូរស័ព្ទ\", Description = \"លេខទូរស័ព្ទរបស់សិស្ស\", Order = 5)]\n    [Phone(ErrorMessage = \"លេខទូរស័ព្ទមិនត្រឹមត្រូវ\")]\n    public string Phone { get; set; }\n    \n    [Column(\"enrollment_date\", DataType = \"datetime\")]\n    [DisplayInfo(\"កាលបរិច្ឆេទចុះឈ្មោះ\", Description = \"កាលបរិច្ឆេទដែលសិស្សបានចុះឈ្មោះ\", Order = 6)]\n    public DateTime EnrollmentDate { get; set; }\n    \n    [Column(\"gpa\", DataType = \"decimal(3,2)\")]\n    [DisplayInfo(\"GPA\", Description = \"ពិន្ទុមធ្យមសរុប\", Order = 7)]\n    [Range(0.0, 4.0, ErrorMessage = \"GPA ត្រូវតែនៅចន្លោះ 0.0 ដល់ 4.0\")]\n    public decimal GPA { get; set; }\n    \n    [Column(\"is_active\", DataType = \"bit\")]\n    [DisplayInfo(\"សកម្ម\", Description = \"ស្ថានភាពសកម្មរបស់សិស្ស\", Order = 8)]\n    public bool IsActive { get; set; } = true;\n    \n    public Student()\n    {\n        EnrollmentDate = DateTime.Now;\n    }\n    \n    [Author(\"វិចិត្រ\")]\n    [Benchmark(\"ការគណនាពិន្ទុមធ្យម\")]\n    public decimal CalculateGPA(List<decimal> scores)\n    {\n        if (scores == null || scores.Count == 0)\n            return 0;\n        \n        return scores.Average();\n    }\n    \n    [Benchmark(\"ការបង្ហាញព័ត៌មានសិស្ស\")]\n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"សិស្ស: {Name} (ID: {Id})\");\n        Console.WriteLine($\"អាយុ: {Age} ឆ្នាំ\");\n        Console.WriteLine($\"អ៊ីមែល: {Email}\");\n        Console.WriteLine($\"GPA: {GPA:F2}\");\n    }\n    \n    public override string ToString()\n    {\n        return $\"ID: {Id}, ឈ្មោះ: {Name}, អាយុ: {Age}, GPA: {GPA:F2}\";\n    }\n}\n\n// Reflection utilities\npublic static class ReflectionUtilities\n{\n    // អានព័ត៌មាន Type\n    public static void AnalyzeType(Type type)\n    {\n        Console.WriteLine($\"\\n=== ការវិភាគ Type: {type.Name} ===\");\n        \n        // Basic type information\n        Console.WriteLine($\"ឈ្មោះពេញ: {type.FullName}\");\n        Console.WriteLine($\"Namespace: {type.Namespace}\");\n        Console.WriteLine($\"Assembly: {type.Assembly.GetName().Name}\");\n        Console.WriteLine($\"Base Type: {type.BaseType?.Name ?? \"None\"}\");\n        Console.WriteLine($\"Is Class: {type.IsClass}\");\n        Console.WriteLine($\"Is Abstract: {type.IsAbstract}\");\n        Console.WriteLine($\"Is Sealed: {type.IsSealed}\");\n        Console.WriteLine($\"Is Generic: {type.IsGenericType}\");\n        \n        // Interfaces\n        Type[] interfaces = type.GetInterfaces();\n        if (interfaces.Length > 0)\n        {\n            Console.WriteLine($\"Interfaces: {string.Join(\", \", interfaces.Select(i => i.Name))}\");\n        }\n        \n        // Attributes\n        DisplayTypeAttributes(type);\n        \n        // Properties\n        DisplayProperties(type);\n        \n        // Methods\n        DisplayMethods(type);\n        \n        // Constructors\n        DisplayConstructors(type);\n    }\n    \n    private static void DisplayTypeAttributes(Type type)\n    {\n        var attributes = type.GetCustomAttributes(true);\n        if (attributes.Length > 0)\n        {\n            Console.WriteLine(\"\\nAttributes របស់ Type:\");\n            foreach (var attr in attributes)\n            {\n                Console.WriteLine($\"  - {attr.GetType().Name}: {attr}\");\n            }\n        }\n    }\n    \n    private static void DisplayProperties(Type type)\n    {\n        PropertyInfo[] properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);\n        if (properties.Length > 0)\n        {\n            Console.WriteLine($\"\\nProperties ({properties.Length}):\");\n            foreach (PropertyInfo prop in properties)\n            {\n                Console.WriteLine($\"  - {prop.PropertyType.Name} {prop.Name}\");\n                \n                // Display property attributes\n                var propAttributes = prop.GetCustomAttributes(true);\n                foreach (var attr in propAttributes)\n                {\n                    if (attr is DisplayInfoAttribute displayInfo)\n                    {\n                        Console.WriteLine($\"    └─ បង្ហាញជា: {displayInfo.DisplayName} (លំដាប់: {displayInfo.Order})\");\n                    }\n                    else if (attr is ColumnAttribute column)\n                    {\n                        Console.WriteLine($\"    └─ ជួរឈរ: {column.ColumnName} ({column.DataType})\");\n                    }\n                    else if (attr is ValidationAttribute validation)\n                    {\n                        Console.WriteLine($\"    └─ ការផ្ទៀងផ្ទាត់: {attr.GetType().Name}\");\n                    }\n                }\n            }\n        }\n    }\n    \n    private static void DisplayMethods(Type type)\n    {\n        MethodInfo[] methods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);\n        if (methods.Length > 0)\n        {\n            Console.WriteLine($\"\\nMethods ({methods.Length}):\");\n            foreach (MethodInfo method in methods)\n            {\n                string parameters = string.Join(\", \", method.GetParameters().Select(p => $\"{p.ParameterType.Name} {p.Name}\"));\n                Console.WriteLine($\"  - {method.ReturnType.Name} {method.Name}({parameters})\");\n                \n                // Display method attributes\n                var methodAttributes = method.GetCustomAttributes(true);\n                foreach (var attr in methodAttributes)\n                {\n                    if (attr is BenchmarkAttribute benchmark)\n                    {\n                        Console.WriteLine($\"    └─ Benchmark: {benchmark.Description}\");\n                    }\n                    else if (attr is AuthorAttribute author)\n                    {\n                        Console.WriteLine($\"    └─ អ្នកនិពន្ធ: {author.Name}\");\n                    }\n                }\n            }\n        }\n    }\n    \n    private static void DisplayConstructors(Type type)\n    {\n        ConstructorInfo[] constructors = type.GetConstructors();\n        if (constructors.Length > 0)\n        {\n            Console.WriteLine($\"\\nConstructors ({constructors.Length}):\");\n            foreach (ConstructorInfo ctor in constructors)\n            {\n                string parameters = string.Join(\", \", ctor.GetParameters().Select(p => $\"{p.ParameterType.Name} {p.Name}\"));\n                Console.WriteLine($\"  - {type.Name}({parameters})\");\n            }\n        }\n    }\n    \n    // បង្កើត instance ដោយប្រើ Reflection\n    public static object CreateInstance(Type type, params object[] args)\n    {\n        try\n        {\n            object instance = Activator.CreateInstance(type, args);\n            Console.WriteLine($\"បានបង្កើត instance នៃ {type.Name} ដោយជោគជ័យ\");\n            return instance;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"កំហុសក្នុងការបង្កើត instance: {ex.Message}\");\n            return null;\n        }\n    }\n    \n    // កំណត់តម្លៃ Property ដោយប្រើ Reflection\n    public static void SetPropertyValue(object obj, string propertyName, object value)\n    {\n        Type type = obj.GetType();\n        PropertyInfo property = type.GetProperty(propertyName);\n        \n        if (property != null && property.CanWrite)\n        {\n            try\n            {\n                property.SetValue(obj, value);\n                Console.WriteLine($\"បានកំណត់ {propertyName} = {value}\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"កំហុសក្នុងការកំណត់ {propertyName}: {ex.Message}\");\n            }\n        }\n        else\n        {\n            Console.WriteLine($\"រកមិនឃើញ property {propertyName} ឬមិនអាចសរសេរបាន\");\n        }\n    }\n    \n    // ទទួលតម្លៃ Property ដោយប្រើ Reflection\n    public static object GetPropertyValue(object obj, string propertyName)\n    {\n        Type type = obj.GetType();\n        PropertyInfo property = type.GetProperty(propertyName);\n        \n        if (property != null && property.CanRead)\n        {\n            try\n            {\n                object value = property.GetValue(obj);\n                Console.WriteLine($\"តម្លៃ {propertyName} = {value}\");\n                return value;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"កំហុសក្នុងការទទួល {propertyName}: {ex.Message}\");\n                return null;\n            }\n        }\n        else\n        {\n            Console.WriteLine($\"រកមិនឃើញ property {propertyName} ឬមិនអាចអានបាន\");\n            return null;\n        }\n    }\n    \n    // ហៅ Method ដោយប្រើ Reflection\n    public static object InvokeMethod(object obj, string methodName, params object[] parameters)\n    {\n        Type type = obj.GetType();\n        MethodInfo method = type.GetMethod(methodName);\n        \n        if (method != null)\n        {\n            try\n            {\n                object result = method.Invoke(obj, parameters);\n                Console.WriteLine($\"បានហៅ method {methodName} ដោយជោគជ័យ\");\n                return result;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"កំហុសក្នុងការហៅ {methodName}: {ex.Message}\");\n                return null;\n            }\n        }\n        else\n        {\n            Console.WriteLine($\"រកមិនឃើញ method {methodName}\");\n            return null;\n        }\n    }\n    \n    // រកថ្នាក់ដែលមាន Attribute ជាក់លាក់\n    public static List<Type> FindTypesWithAttribute<T>(Assembly assembly) where T : Attribute\n    {\n        return assembly.GetTypes()\n                      .Where(type => type.GetCustomAttribute<T>() != null)\n                      .ToList();\n    }\n    \n    // បង្កើត SQL CREATE TABLE statement ពី attributes\n    public static string GenerateCreateTableSQL(Type type)\n    {\n        var tableAttr = type.GetCustomAttribute<TableAttribute>();\n        if (tableAttr == null)\n        {\n            return $\"-- Type {type.Name} មិនមាន TableAttribute\";\n        }\n        \n        var sql = $\"CREATE TABLE [{tableAttr.Schema}].[{tableAttr.TableName}] (\\n\";\n        \n        var properties = type.GetProperties()\n                            .Where(p => p.GetCustomAttribute<ColumnAttribute>() != null)\n                            .ToList();\n        \n        var columnDefinitions = new List<string>();\n        \n        foreach (var prop in properties)\n        {\n            var columnAttr = prop.GetCustomAttribute<ColumnAttribute>();\n            var columnDef = $\"    [{columnAttr.ColumnName}] {columnAttr.DataType}\";\n            \n            if (!columnAttr.IsNullable)\n            {\n                columnDef += \" NOT NULL\";\n            }\n            \n            if (columnAttr.IsPrimaryKey)\n            {\n                columnDef += \" PRIMARY KEY\";\n            }\n            \n            columnDefinitions.Add(columnDef);\n        }\n        \n        sql += string.Join(\",\\n\", columnDefinitions);\n        sql += \"\\n);\";\n        \n        return sql;\n    }\n}\n\n// Attribute-based validation\npublic static class AttributeValidator\n{\n    public static List<string> ValidateObject(object obj)\n    {\n        var errors = new List<string>();\n        Type type = obj.GetType();\n        \n        foreach (PropertyInfo property in type.GetProperties())\n        {\n            object value = property.GetValue(obj);\n            \n            foreach (ValidationAttribute validationAttr in property.GetCustomAttributes<ValidationAttribute>())\n            {\n                if (!validationAttr.IsValid(value))\n                {\n                    string propertyName = property.Name;\n                    var displayAttr = property.GetCustomAttribute<DisplayInfoAttribute>();\n                    if (displayAttr != null)\n                    {\n                        propertyName = displayAttr.DisplayName;\n                    }\n                    \n                    errors.Add($\"{propertyName}: {validationAttr.ErrorMessage}\");\n                }\n            }\n        }\n        \n        return errors;\n    }\n    \n    public static void DisplayValidationResults(object obj)\n    {\n        var errors = ValidateObject(obj);\n        \n        if (errors.Count == 0)\n        {\n            Console.WriteLine(\"✅ ការផ្ទៀងផ្ទាត់ជោគជ័យ!\");\n        }\n        else\n        {\n            Console.WriteLine(\"❌ រកឃើញកំហុសក្នុងការផ្ទៀងផ្ទាត់:\");\n            foreach (string error in errors)\n            {\n                Console.WriteLine($\"  - {error}\");\n            }\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== Attributes និង Reflection ក្នុង C# ===\");\n        \n        // វិភាគ Student type\n        ReflectionUtilities.AnalyzeType(typeof(Student));\n        \n        // បង្កើត Student instance ដោយប្រើ Reflection\n        Console.WriteLine(\"\\n=== ការបង្កើត Instance ដោយប្រើ Reflection ===\");\n        object studentObj = ReflectionUtilities.CreateInstance(typeof(Student));\n        \n        if (studentObj != null)\n        {\n            // កំណត់តម្លៃ properties\n            ReflectionUtilities.SetPropertyValue(studentObj, \"Id\", 1);\n            ReflectionUtilities.SetPropertyValue(studentObj, \"Name\", \"សុខា\");\n            ReflectionUtilities.SetPropertyValue(studentObj, \"Age\", 20);\n            ReflectionUtilities.SetPropertyValue(studentObj, \"Email\", \"sokha@example.com\");\n            ReflectionUtilities.SetPropertyValue(studentObj, \"GPA\", 3.75m);\n            \n            // ទទួលតម្លៃ properties\n            Console.WriteLine(\"\\nការទទួលតម្លៃ Properties:\");\n            ReflectionUtilities.GetPropertyValue(studentObj, \"Name\");\n            ReflectionUtilities.GetPropertyValue(studentObj, \"Age\");\n            ReflectionUtilities.GetPropertyValue(studentObj, \"GPA\");\n            \n            // ហៅ methods\n            Console.WriteLine(\"\\nការហៅ Methods:\");\n            ReflectionUtilities.InvokeMethod(studentObj, \"DisplayInfo\");\n            \n            var scores = new List<decimal> { 3.5m, 3.8m, 3.9m, 3.7m };\n            object gpaResult = ReflectionUtilities.InvokeMethod(studentObj, \"CalculateGPA\", scores);\n            Console.WriteLine($\"GPA ដែលបានគណនា: {gpaResult}\");\n        }\n        \n        // ការផ្ទៀងផ្ទាត់ដោយប្រើ Attributes\n        Console.WriteLine(\"\\n=== ការផ្ទៀងផ្ទាត់ដោយប្រើ Attributes ===\");\n        \n        // សិស្សដែលមានទិន្នន័យត្រឹមត្រូវ\n        Student validStudent = new Student\n        {\n            Id = 1,\n            Name = \"ចន្ទា\",\n            Age = 19,\n            Email = \"chantha@example.com\",\n            Phone = \"+855-12-345-678\",\n            GPA = 3.8m\n        };\n        \n        Console.WriteLine(\"សិស្សដែលមានទិន្នន័យត្រឹមត្រូវ:\");\n        AttributeValidator.DisplayValidationResults(validStudent);\n        \n        // សិស្សដែលមានទិន្នន័យមិនត្រឹមត្រូវ\n        Student invalidStudent = new Student\n        {\n            Id = 2,\n            Name = \"\", // ទទេ\n            Age = 150, // លើសកំណត់\n            Email = \"invalid-email\", // ទម្រង់មិនត្រឹមត្រូវ\n            Phone = \"123\", // ទម្រង់មិនត្រឹមត្រូវ\n            GPA = 5.0m // លើសកំណត់\n        };\n        \n        Console.WriteLine(\"\\nសិស្សដែលមានទិន្នន័យមិនត្រឹមត្រូវ:\");\n        AttributeValidator.DisplayValidationResults(invalidStudent);\n        \n        // រកថ្នាក់ដែលមាន TableAttribute\n        Console.WriteLine(\"\\n=== ការរកថ្នាក់ដែលមាន Attributes ===\");\n        Assembly currentAssembly = Assembly.GetExecutingAssembly();\n        var typesWithTableAttr = ReflectionUtilities.FindTypesWithAttribute<TableAttribute>(currentAssembly);\n        \n        Console.WriteLine($\"រកឃើញថ្នាក់ {typesWithTableAttr.Count} ដែលមាន TableAttribute:\");\n        foreach (Type type in typesWithTableAttr)\n        {\n            Console.WriteLine($\"  - {type.Name}\");\n        }\n        \n        // បង្កើត SQL CREATE TABLE statement\n        Console.WriteLine(\"\\n=== ការបង្កើត SQL CREATE TABLE Statement ===\");\n        string createTableSQL = ReflectionUtilities.GenerateCreateTableSQL(typeof(Student));\n        Console.WriteLine(createTableSQL);\n        \n        Console.WriteLine(\"\\n=== បញ្ចប់ការបង្ហាញ Attributes និង Reflection ===\");\n    }\n}",
    "tip": "ប្រើ GetCustomAttribute<T>() ជំនួសឱ្យ GetCustomAttributes() នៅពេលអ្នកត្រូវការ attribute តែមួយប្រភេទ"
  },
  {
    "id": 22,
    "category": "C#",
    "path": "/csharp/design-patterns",
    "title": "មេរៀនទី២២: លំនាំការរចនា (Design Patterns)",
    "explanation": "Design Patterns គឺជាដំណោះស្រាយទូទៅសម្រាប់បញ្ហាដែលកើតឡើងញឹកញាប់ក្នុងការរចនាកម្មវិធី។ ពួកវាជាគំរូដែលបានសាកល្បងហើយ និងជួយធ្វើឱ្យកូដមានភាពបត់បែន និងងាយស្រួលថែទាំ។",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\n// ===== SINGLETON PATTERN =====\n// ធានាថាថ្នាក់មានតែ instance តែមួយគត់\npublic sealed class DatabaseConnection\n{\n    private static DatabaseConnection _instance;\n    private static readonly object _lock = new object();\n    private string _connectionString;\n    private bool _isConnected;\n    \n    private DatabaseConnection()\n    {\n        _connectionString = \"Server=localhost;Database=School;\";\n        _isConnected = false;\n        Console.WriteLine(\"បានបង្កើត DatabaseConnection instance\");\n    }\n    \n    public static DatabaseConnection Instance\n    {\n        get\n        {\n            if (_instance == null)\n            {\n                lock (_lock)\n                {\n                    if (_instance == null)\n                    {\n                        _instance = new DatabaseConnection();\n                    }\n                }\n            }\n            return _instance;\n        }\n    }\n    \n    public void Connect()\n    {\n        if (!_isConnected)\n        {\n            _isConnected = true;\n            Console.WriteLine($\"បានភ្ជាប់ទៅ database: {_connectionString}\");\n        }\n        else\n        {\n            Console.WriteLine(\"Database បានភ្ជាប់រួចហើយ\");\n        }\n    }\n    \n    public void Disconnect()\n    {\n        if (_isConnected)\n        {\n            _isConnected = false;\n            Console.WriteLine(\"បានផ្តាច់ការភ្ជាប់ database\");\n        }\n    }\n    \n    public void ExecuteQuery(string query)\n    {\n        if (_isConnected)\n        {\n            Console.WriteLine($\"កំពុងប្រតិបត្តិ query: {query}\");\n        }\n        else\n        {\n            Console.WriteLine(\"មិនអាចប្រតិបត្តិ query បានទេ - មិនទាន់ភ្ជាប់ database\");\n        }\n    }\n}\n\n// ===== FACTORY PATTERN =====\n// បង្កើតវត្ថុដោយមិនបញ្ជាក់ថ្នាក់ជាក់លាក់\npublic abstract class Vehicle\n{\n    public string Brand { get; set; }\n    public string Model { get; set; }\n    public int Year { get; set; }\n    \n    public abstract void Start();\n    public abstract void Stop();\n    public abstract double GetFuelEfficiency();\n    \n    public virtual void DisplayInfo()\n    {\n        Console.WriteLine($\"{Brand} {Model} ({Year}) - ប្រសិទ្ធភាពប្រេង: {GetFuelEfficiency():F2} km/l\");\n    }\n}\n\npublic class Car : Vehicle\n{\n    public int NumberOfDoors { get; set; }\n    \n    public override void Start()\n    {\n        Console.WriteLine($\"រថយន្ត {Brand} {Model} បានចាប់ផ្តើមម៉ាស៊ីន\");\n    }\n    \n    public override void Stop()\n    {\n        Console.WriteLine($\"រថយន្ត {Brand} {Model} បានបញ្ឈប់ម៉ាស៊ីន\");\n    }\n    \n    public override double GetFuelEfficiency()\n    {\n        return 12.5; // km/l\n    }\n}\n\npublic class Motorcycle : Vehicle\n{\n    public int EngineSize { get; set; }\n    \n    public override void Start()\n    {\n        Console.WriteLine($\"ម៉ូតូ {Brand} {Model} បានចាប់ផ្តើមម៉ាស៊ីន\");\n    }\n    \n    public override void Stop()\n    {\n        Console.WriteLine($\"ម៉ូតូ {Brand} {Model} បានបញ្ឈប់ម៉ាស៊ីន\");\n    }\n    \n    public override double GetFuelEfficiency()\n    {\n        return 35.0; // km/l\n    }\n}\n\npublic class Truck : Vehicle\n{\n    public double LoadCapacity { get; set; }\n    \n    public override void Start()\n    {\n        Console.WriteLine($\"ឡានដឹកទំនិញ {Brand} {Model} បានចាប់ផ្តើមម៉ាស៊ីន\");\n    }\n    \n    public override void Stop()\n    {\n        Console.WriteLine($\"ឡានដឹកទំនិញ {Brand} {Model} បានបញ្ឈប់ម៉ាស៊ីន\");\n    }\n    \n    public override double GetFuelEfficiency()\n    {\n        return 8.0; // km/l\n    }\n}\n\npublic enum VehicleType\n{\n    Car,\n    Motorcycle,\n    Truck\n}\n\npublic static class VehicleFactory\n{\n    public static Vehicle CreateVehicle(VehicleType type, string brand, string model, int year)\n    {\n        switch (type)\n        {\n            case VehicleType.Car:\n                return new Car\n                {\n                    Brand = brand,\n                    Model = model,\n                    Year = year,\n                    NumberOfDoors = 4\n                };\n            \n            case VehicleType.Motorcycle:\n                return new Motorcycle\n                {\n                    Brand = brand,\n                    Model = model,\n                    Year = year,\n                    EngineSize = 150\n                };\n            \n            case VehicleType.Truck:\n                return new Truck\n                {\n                    Brand = brand,\n                    Model = model,\n                    Year = year,\n                    LoadCapacity = 5000\n                };\n            \n            default:\n                throw new ArgumentException($\"មិនស្គាល់ប្រភេទយានយន្ត: {type}\");\n        }\n    }\n}\n\n// ===== OBSERVER PATTERN =====\n// អនុញ្ញាតឱ្យវត្ថុមួយជូនដំណឹងដល់វត្ថុច្រើនពេលមានការផ្លាស់ប្តូរ\npublic interface IObserver\n{\n    void Update(string message);\n}\n\npublic interface ISubject\n{\n    void Attach(IObserver observer);\n    void Detach(IObserver observer);\n    void Notify(string message);\n}\n\npublic class NewsAgency : ISubject\n{\n    private List<IObserver> _observers;\n    private string _latestNews;\n    \n    public NewsAgency()\n    {\n        _observers = new List<IObserver>();\n    }\n    \n    public string LatestNews\n    {\n        get { return _latestNews; }\n        set\n        {\n            _latestNews = value;\n            Notify($\"ព័ត៌មានថ្មី: {value}\");\n        }\n    }\n    \n    public void Attach(IObserver observer)\n    {\n        _observers.Add(observer);\n        Console.WriteLine($\"បានបន្ថែម observer ថ្មី។ សរុប: {_observers.Count}\");\n    }\n    \n    public void Detach(IObserver observer)\n    {\n        _observers.Remove(observer);\n        Console.WriteLine($\"បានដក observer ចេញ។ សរុប: {_observers.Count}\");\n    }\n    \n    public void Notify(string message)\n    {\n        Console.WriteLine($\"កំពុងជូនដំណឹងដល់ {_observers.Count} observers...\");\n        foreach (IObserver observer in _observers)\n        {\n            observer.Update(message);\n        }\n    }\n}\n\npublic class NewsChannel : IObserver\n{\n    private string _channelName;\n    \n    public NewsChannel(string channelName)\n    {\n        _channelName = channelName;\n    }\n    \n    public void Update(string message)\n    {\n        Console.WriteLine($\"[{_channelName}] បានទទួលព័ត៌មាន: {message}\");\n    }\n}\n\npublic class MobileApp : IObserver\n{\n    private string _appName;\n    private int _userCount;\n    \n    public MobileApp(string appName, int userCount)\n    {\n        _appName = appName;\n        _userCount = userCount;\n    }\n    \n    public void Update(string message)\n    {\n        Console.WriteLine($\"[{_appName}] បានផ្ញើ notification ដល់អ្នកប្រើប្រាស់ {_userCount} នាក់: {message}\");\n    }\n}\n\n// ===== STRATEGY PATTERN =====\n// អនុញ្ញាតឱ្យផ្លាស់ប្តូរ algorithm នៅ runtime\npublic interface IPaymentStrategy\n{\n    bool ProcessPayment(decimal amount, string details);\n    string GetPaymentMethod();\n}\n\npublic class CreditCardPayment : IPaymentStrategy\n{\n    private string _cardNumber;\n    private string _cardHolderName;\n    \n    public CreditCardPayment(string cardNumber, string cardHolderName)\n    {\n        _cardNumber = cardNumber;\n        _cardHolderName = cardHolderName;\n    }\n    \n    public bool ProcessPayment(decimal amount, string details)\n    {\n        Console.WriteLine($\"កំពុងដំណើរការការបង់ប្រាក់តាម Credit Card...\");\n        Console.WriteLine($\"ម្ចាស់កាត: {_cardHolderName}\");\n        Console.WriteLine($\"លេខកាត: ****-****-****-{_cardNumber.Substring(_cardNumber.Length - 4)}\");\n        Console.WriteLine($\"ចំនួនទឹកប្រាក់: ${amount:F2}\");\n        Console.WriteLine($\"ព័ត៌មានលម្អិត: {details}\");\n        Console.WriteLine(\"✅ ការបង់ប្រាក់ជោគជ័យ!\");\n        return true;\n    }\n    \n    public string GetPaymentMethod()\n    {\n        return \"Credit Card\";\n    }\n}\n\npublic class PayPalPayment : IPaymentStrategy\n{\n    private string _email;\n    \n    public PayPalPayment(string email)\n    {\n        _email = email;\n    }\n    \n    public bool ProcessPayment(decimal amount, string details)\n    {\n        Console.WriteLine($\"កំពុងដំណើរការការបង់ប្រាក់តាម PayPal...\");\n        Console.WriteLine($\"គណនី PayPal: {_email}\");\n        Console.WriteLine($\"ចំនួនទឹកប្រាក់: ${amount:F2}\");\n        Console.WriteLine($\"ព័ត៌មានលម្អិត: {details}\");\n        Console.WriteLine(\"✅ ការបង់ប្រាក់ជោគជ័យ!\");\n        return true;\n    }\n    \n    public string GetPaymentMethod()\n    {\n        return \"PayPal\";\n    }\n}\n\npublic class BankTransferPayment : IPaymentStrategy\n{\n    private string _accountNumber;\n    private string _bankName;\n    \n    public BankTransferPayment(string accountNumber, string bankName)\n    {\n        _accountNumber = accountNumber;\n        _bankName = bankName;\n    }\n    \n    public bool ProcessPayment(decimal amount, string details)\n    {\n        Console.WriteLine($\"កំពុងដំណើរការការបង់ប្រាក់តាមការផ្ទេរធនាគារ...\");\n        Console.WriteLine($\"ធនាគារ: {_bankName}\");\n        Console.WriteLine($\"លេខគណនី: {_accountNumber}\");\n        Console.WriteLine($\"ចំនួនទឹកប្រាក់: ${amount:F2}\");\n        Console.WriteLine($\"ព័ត៌មានលម្អិត: {details}\");\n        Console.WriteLine(\"✅ ការបង់ប្រាក់ជោគជ័យ!\");\n        return true;\n    }\n    \n    public string GetPaymentMethod()\n    {\n        return \"Bank Transfer\";\n    }\n}\n\npublic class PaymentProcessor\n{\n    private IPaymentStrategy _paymentStrategy;\n    \n    public void SetPaymentStrategy(IPaymentStrategy paymentStrategy)\n    {\n        _paymentStrategy = paymentStrategy;\n        Console.WriteLine($\"បានកំណត់វិធីបង់ប្រាក់: {paymentStrategy.GetPaymentMethod()}\");\n    }\n    \n    public bool ProcessPayment(decimal amount, string details)\n    {\n        if (_paymentStrategy == null)\n        {\n            Console.WriteLine(\"❌ មិនបានកំណត់វិធីបង់ប្រាក់!\");\n            return false;\n        }\n        \n        Console.WriteLine($\"\\n--- ការបង់ប្រាក់តាម {_paymentStrategy.GetPaymentMethod()} ---\");\n        return _paymentStrategy.ProcessPayment(amount, details);\n    }\n}\n\n// ===== DECORATOR PATTERN =====\n// បន្ថែមមុខងារថ្មីដល់វត្ថុដោយមិនផ្លាស់ប្តូររចនាសម្ព័ន្ធ\npublic abstract class Coffee\n{\n    public abstract string GetDescription();\n    public abstract decimal GetCost();\n}\n\npublic class SimpleCoffee : Coffee\n{\n    public override string GetDescription()\n    {\n        return \"កាហ្វេធម្មតា\";\n    }\n    \n    public override decimal GetCost()\n    {\n        return 2.00m;\n    }\n}\n\npublic abstract class CoffeeDecorator : Coffee\n{\n    protected Coffee _coffee;\n    \n    public CoffeeDecorator(Coffee coffee)\n    {\n        _coffee = coffee;\n    }\n    \n    public override string GetDescription()\n    {\n        return _coffee.GetDescription();\n    }\n    \n    public override decimal GetCost()\n    {\n        return _coffee.GetCost();\n    }\n}\n\npublic class MilkDecorator : CoffeeDecorator\n{\n    public MilkDecorator(Coffee coffee) : base(coffee) { }\n    \n    public override string GetDescription()\n    {\n        return _coffee.GetDescription() + \", ទឹកដោះគោ\";\n    }\n    \n    public override decimal GetCost()\n    {\n        return _coffee.GetCost() + 0.50m;\n    }\n}\n\npublic class SugarDecorator : CoffeeDecorator\n{\n    public SugarDecorator(Coffee coffee) : base(coffee) { }\n    \n    public override string GetDescription()\n    {\n        return _coffee.GetDescription() + \", ស្ករ\";\n    }\n    \n    public override decimal GetCost()\n    {\n        return _coffee.GetCost() + 0.25m;\n    }\n}\n\npublic class ChocolateDecorator : CoffeeDecorator\n{\n    public ChocolateDecorator(Coffee coffee) : base(coffee) { }\n    \n    public override string GetDescription()\n    {\n        return _coffee.GetDescription() + \", សូកូឡា\";\n    }\n    \n    public override decimal GetCost()\n    {\n        return _coffee.GetCost() + 0.75m;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== Design Patterns ក្នុង C# ===\");\n        \n        // ទេស្ត៍ Singleton Pattern\n        TestSingletonPattern();\n        \n        // ទេស្ត៍ Factory Pattern\n        TestFactoryPattern();\n        \n        // ទេស្ត៍ Observer Pattern\n        TestObserverPattern();\n        \n        // ទេស្ត៍ Strategy Pattern\n        TestStrategyPattern();\n        \n        // ទេស្ត៍ Decorator Pattern\n        TestDecoratorPattern();\n        \n        Console.WriteLine(\"\\n=== បញ្ចប់ការបង្ហាញ Design Patterns ===\");\n    }\n    \n    static void TestSingletonPattern()\n    {\n        Console.WriteLine(\"\\n=== Singleton Pattern ===\");\n        \n        // ទទួល instance ទីមួយ\n        DatabaseConnection db1 = DatabaseConnection.Instance;\n        db1.Connect();\n        db1.ExecuteQuery(\"SELECT * FROM Students\");\n        \n        // ទទួល instance ទីពីរ (គួរតែជា instance ដូចគ្នា)\n        DatabaseConnection db2 = DatabaseConnection.Instance;\n        db2.ExecuteQuery(\"SELECT * FROM Teachers\");\n        \n        // ពិនិត្យថាតើជា instance ដូចគ្នាឬអត់\n        Console.WriteLine($\"db1 និង db2 គឺជា instance ដូចគ្នា: {ReferenceEquals(db1, db2)}\");\n        \n        db1.Disconnect();\n    }\n    \n    static void TestFactoryPattern()\n    {\n        Console.WriteLine(\"\\n=== Factory Pattern ===\");\n        \n        // បង្កើតយានយន្តផ្សេងៗដោយប្រើ Factory\n        Vehicle car = VehicleFactory.CreateVehicle(VehicleType.Car, \"Toyota\", \"Camry\", 2023);\n        Vehicle motorcycle = VehicleFactory.CreateVehicle(VehicleType.Motorcycle, \"Honda\", \"CBR150R\", 2023);\n        Vehicle truck = VehicleFactory.CreateVehicle(VehicleType.Truck, \"Isuzu\", \"NPR\", 2023);\n        \n        Vehicle[] vehicles = { car, motorcycle, truck };\n        \n        foreach (Vehicle vehicle in vehicles)\n        {\n            vehicle.DisplayInfo();\n            vehicle.Start();\n            vehicle.Stop();\n            Console.WriteLine();\n        }\n    }\n    \n    static void TestObserverPattern()\n    {\n        Console.WriteLine(\"\\n=== Observer Pattern ===\");\n        \n        // បង្កើត News Agency\n        NewsAgency newsAgency = new NewsAgency();\n        \n        // បង្កើត Observers\n        NewsChannel tvChannel = new NewsChannel(\"TV Channel 7\");\n        NewsChannel radioStation = new NewsChannel(\"Radio FM 99.5\");\n        MobileApp newsApp = new MobileApp(\"News App\", 50000);\n        \n        // ចុះឈ្មោះ Observers\n        newsAgency.Attach(tvChannel);\n        newsAgency.Attach(radioStation);\n        newsAgency.Attach(newsApp);\n        \n        // ផ្សាយព័ត៌មាន\n        newsAgency.LatestNews = \"រដ្ឋាភិបាលបានប្រកាសគោលនយោបាយថ្មី\";\n        \n        Console.WriteLine();\n        newsAgency.LatestNews = \"ការប្រកួតបាល់ទាត់ពិភពលោកនឹងចាប់ផ្តើមនៅខែក្រោយ\";\n        \n        // ដក Observer មួយចេញ\n        Console.WriteLine();\n        newsAgency.Detach(radioStation);\n        newsAgency.LatestNews = \"អាកាសធាតុនៅសប្តាហ៍ក្រោយនឹងមានភ្លៀង\";\n    }\n    \n    static void TestStrategyPattern()\n    {\n        Console.WriteLine(\"\\n=== Strategy Pattern ===\");\n        \n        PaymentProcessor processor = new PaymentProcessor();\n        \n        // បង់ប្រាក់តាម Credit Card\n        IPaymentStrategy creditCard = new CreditCardPayment(\"1234567890123456\", \"សុខា\");\n        processor.SetPaymentStrategy(creditCard);\n        processor.ProcessPayment(150.00m, \"ការទិញសៀវភៅ\");\n        \n        // បង់ប្រាក់តាម PayPal\n        IPaymentStrategy paypal = new PayPalPayment(\"chantha@example.com\");\n        processor.SetPaymentStrategy(paypal);\n        processor.ProcessPayment(75.50m, \"ការទិញសម្លៀកបំពាក់\");\n        \n        // បង់ប្រាក់តាមការផ្ទេរធនាគារ\n        IPaymentStrategy bankTransfer = new BankTransferPayment(\"123-456-789\", \"ABA Bank\");\n        processor.SetPaymentStrategy(bankTransfer);\n        processor.ProcessPayment(500.00m, \"ការបង់ថ្លៃសាលា\");\n    }\n    \n    static void TestDecoratorPattern()\n    {\n        Console.WriteLine(\"\\n=== Decorator Pattern ===\");\n        \n        // កាហ្វេធម្មតា\n        Coffee coffee = new SimpleCoffee();\n        Console.WriteLine($\"{coffee.GetDescription()} - តម្លៃ: ${coffee.GetCost():F2}\");\n        \n        // បន្ថែមទឹកដោះគោ\n        coffee = new MilkDecorator(coffee);\n        Console.WriteLine($\"{coffee.GetDescription()} - តម្លៃ: ${coffee.GetCost():F2}\");\n        \n        // បន្ថែមស្ករ\n        coffee = new SugarDecorator(coffee);\n        Console.WriteLine($\"{coffee.GetDescription()} - តម្លៃ: ${coffee.GetCost():F2}\");\n        \n        // បន្ថែមសូកូឡា\n        coffee = new ChocolateDecorator(coffee);\n        Console.WriteLine($\"{coffee.GetDescription()} - តម្លៃ: ${coffee.GetCost():F2}\");\n        \n        Console.WriteLine();\n        \n        // កាហ្វេពិសេសមួយទៀត\n        Coffee specialCoffee = new ChocolateDecorator(\n            new MilkDecorator(\n                new MilkDecorator(\n                    new SimpleCoffee()\n                )\n            )\n        );\n        \n        Console.WriteLine($\"កាហ្វេពិសេស: {specialCoffee.GetDescription()} - តម្លៃ: ${specialCoffee.GetCost():F2}\");\n    }\n}",
    "tip": "Design Patterns មិនមែនជាដំណោះស្រាយសម្រាប់បញ្ហាទាំងអស់ទេ - ប្រើតែនៅពេលដែលពិតជាត្រូវការ"
  },
  {
    "id": 23,
    "category": "C#",
    "path": "/csharp/unit-testing",
    "title": "មេរៀនទី២៣: ការសាកល្បងឯកតា (Unit Testing)",
    "explanation": "Unit Testing គឺជាការសាកល្បងផ្នែកតូចៗនៃកូដ (units) ដើម្បីធានាថាពួកវាធ្វើការត្រឹមត្រូវ។ វាជួយរកកំហុស បង្កើនទំនុកចិត្ត និងធ្វើឱ្យកូដងាយស្រួលថែទាំ។",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\n// ===== CLASSES TO BE TESTED =====\n\n// ថ្នាក់ Calculator សម្រាប់ការគណនាមូលដ្ឋាន\npublic class Calculator\n{\n    public double Add(double a, double b)\n    {\n        return a + b;\n    }\n    \n    public double Subtract(double a, double b)\n    {\n        return a - b;\n    }\n    \n    public double Multiply(double a, double b)\n    {\n        return a * b;\n    }\n    \n    public double Divide(double a, double b)\n    {\n        if (b == 0)\n            throw new DivideByZeroException(\"មិនអាចចែកដោយសូន្យបានទេ\");\n        \n        return a / b;\n    }\n    \n    public double Power(double baseNumber, double exponent)\n    {\n        if (baseNumber == 0 && exponent < 0)\n            throw new ArgumentException(\"មិនអាចគណនា 0 ស្វ័យអវិជ្ជមានបានទេ\");\n        \n        return Math.Pow(baseNumber, exponent);\n    }\n    \n    public double SquareRoot(double number)\n    {\n        if (number < 0)\n            throw new ArgumentException(\"មិនអាចរកឫសការ៉េនៃលេខអវិជ្ជមានបានទេ\");\n        \n        return Math.Sqrt(number);\n    }\n}\n\n// ថ្នាក់ BankAccount សម្រាប់គ្រប់គ្រងគណនីធនាគារ\npublic class BankAccount\n{\n    public string AccountNumber { get; private set; }\n    public string Owner { get; private set; }\n    public decimal Balance { get; private set; }\n    public bool IsActive { get; private set; }\n    public List<Transaction> Transactions { get; private set; }\n    \n    public BankAccount(string accountNumber, string owner, decimal initialBalance = 0)\n    {\n        if (string.IsNullOrWhiteSpace(accountNumber))\n            throw new ArgumentException(\"លេខគណនីមិនអាចទទេបានទេ\");\n        \n        if (string.IsNullOrWhiteSpace(owner))\n            throw new ArgumentException(\"ឈ្មោះម្ចាស់គណនីមិនអាចទទេបានទេ\");\n        \n        if (initialBalance < 0)\n            throw new ArgumentException(\"សមតុល្យដំបូងមិនអាចអវិជ្ជមានបានទេ\");\n        \n        AccountNumber = accountNumber;\n        Owner = owner;\n        Balance = initialBalance;\n        IsActive = true;\n        Transactions = new List<Transaction>();\n        \n        if (initialBalance > 0)\n        {\n            Transactions.Add(new Transaction(TransactionType.Deposit, initialBalance, \"សមតុល្យដំបូង\"));\n        }\n    }\n    \n    public void Deposit(decimal amount, string description = \"\")\n    {\n        if (!IsActive)\n            throw new InvalidOperationException(\"គណនីមិនសកម្ម\");\n        \n        if (amount <= 0)\n            throw new ArgumentException(\"ចំនួនទឹកប្រាក់ដាក់ត្រូវតែធំជាងសូន្យ\");\n        \n        Balance += amount;\n        Transactions.Add(new Transaction(TransactionType.Deposit, amount, description));\n    }\n    \n    public void Withdraw(decimal amount, string description = \"\")\n    {\n        if (!IsActive)\n            throw new InvalidOperationException(\"គណនីមិនសកម្ម\");\n        \n        if (amount <= 0)\n            throw new ArgumentException(\"ចំនួនទឹកប្រាក់ដកត្រូវតែធំជាងសូន្យ\");\n        \n        if (amount > Balance)\n            throw new InvalidOperationException(\"សមតុល្យមិនគ្រប់គ្រា\");\n        \n        Balance -= amount;\n        Transactions.Add(new Transaction(TransactionType.Withdrawal, amount, description));\n    }\n    \n    public void Transfer(BankAccount targetAccount, decimal amount, string description = \"\")\n    {\n        if (targetAccount == null)\n            throw new ArgumentNullException(nameof(targetAccount));\n        \n        if (targetAccount == this)\n            throw new ArgumentException(\"មិនអាចផ្ទេរទៅគណនីដូចគ្នាបានទេ\");\n        \n        Withdraw(amount, $\"ផ្ទេរទៅ {targetAccount.AccountNumber}: {description}\");\n        targetAccount.Deposit(amount, $\"ទទួលពី {AccountNumber}: {description}\");\n    }\n    \n    public void CloseAccount()\n    {\n        if (Balance > 0)\n            throw new InvalidOperationException(\"មិនអាចបិទគណនីដែលមានសមតុល្យបានទេ\");\n        \n        IsActive = false;\n    }\n    \n    public decimal GetTransactionTotal(TransactionType type)\n    {\n        return Transactions.Where(t => t.Type == type).Sum(t => t.Amount);\n    }\n}\n\npublic class Transaction\n{\n    public TransactionType Type { get; set; }\n    public decimal Amount { get; set; }\n    public string Description { get; set; }\n    public DateTime Timestamp { get; set; }\n    \n    public Transaction(TransactionType type, decimal amount, string description)\n    {\n        Type = type;\n        Amount = amount;\n        Description = description;\n        Timestamp = DateTime.Now;\n    }\n}\n\npublic enum TransactionType\n{\n    Deposit,\n    Withdrawal\n}\n\n// ថ្នាក់ StringHelper សម្រាប់ការដំណើរការ string\npublic static class StringHelper\n{\n    public static bool IsPalindrome(string text)\n    {\n        if (string.IsNullOrEmpty(text))\n            return false;\n        \n        string cleaned = text.ToLower().Replace(\" \", \"\");\n        string reversed = new string(cleaned.Reverse().ToArray());\n        return cleaned == reversed;\n    }\n    \n    public static int CountWords(string text)\n    {\n        if (string.IsNullOrWhiteSpace(text))\n            return 0;\n        \n        return text.Split(new char[] { ' ', '\\t', '\\n', '\\r' }, StringSplitOptions.RemoveEmptyEntries).Length;\n    }\n    \n    public static string Capitalize(string text)\n    {\n        if (string.IsNullOrEmpty(text))\n            return text;\n        \n        if (text.Length == 1)\n            return text.ToUpper();\n        \n        return char.ToUpper(text[0]) + text.Substring(1).ToLower();\n    }\n    \n    public static string ReverseWords(string text)\n    {\n        if (string.IsNullOrWhiteSpace(text))\n            return text;\n        \n        string[] words = text.Split(' ');\n        Array.Reverse(words);\n        return string.Join(\" \", words);\n    }\n}\n\n// ===== SIMPLE TEST FRAMEWORK =====\n\n// Attributes សម្រាប់ការសាកល្បង\n[AttributeUsage(AttributeTargets.Class)]\npublic class TestClassAttribute : Attribute { }\n\n[AttributeUsage(AttributeTargets.Method)]\npublic class TestMethodAttribute : Attribute { }\n\n[AttributeUsage(AttributeTargets.Method)]\npublic class SetupAttribute : Attribute { }\n\n[AttributeUsage(AttributeTargets.Method)]\npublic class TeardownAttribute : Attribute { }\n\n// ថ្នាក់សម្រាប់ការ assert\npublic static class Assert\n{\n    public static void AreEqual<T>(T expected, T actual, string message = \"\")\n    {\n        if (!EqualityComparer<T>.Default.Equals(expected, actual))\n        {\n            throw new AssertionException($\"Expected: {expected}, Actual: {actual}. {message}\");\n        }\n    }\n    \n    public static void AreNotEqual<T>(T expected, T actual, string message = \"\")\n    {\n        if (EqualityComparer<T>.Default.Equals(expected, actual))\n        {\n            throw new AssertionException($\"Expected values to be different, but both were: {expected}. {message}\");\n        }\n    }\n    \n    public static void IsTrue(bool condition, string message = \"\")\n    {\n        if (!condition)\n        {\n            throw new AssertionException($\"Expected: True, Actual: False. {message}\");\n        }\n    }\n    \n    public static void IsFalse(bool condition, string message = \"\")\n    {\n        if (condition)\n        {\n            throw new AssertionException($\"Expected: False, Actual: True. {message}\");\n        }\n    }\n    \n    public static void IsNull(object obj, string message = \"\")\n    {\n        if (obj != null)\n        {\n            throw new AssertionException($\"Expected: null, Actual: {obj}. {message}\");\n        }\n    }\n    \n    public static void IsNotNull(object obj, string message = \"\")\n    {\n        if (obj == null)\n        {\n            throw new AssertionException($\"Expected: not null, Actual: null. {message}\");\n        }\n    }\n    \n    public static void Throws<T>(Action action, string message = \"\") where T : Exception\n    {\n        try\n        {\n            action();\n            throw new AssertionException($\"Expected exception of type {typeof(T).Name}, but no exception was thrown. {message}\");\n        }\n        catch (T)\n        {\n            // Expected exception was thrown\n        }\n        catch (Exception ex)\n        {\n            throw new AssertionException($\"Expected exception of type {typeof(T).Name}, but got {ex.GetType().Name}. {message}\");\n        }\n    }\n}\n\npublic class AssertionException : Exception\n{\n    public AssertionException(string message) : base(message) { }\n}\n\n// ===== TEST CLASSES =====\n\n[TestClass]\npublic class CalculatorTests\n{\n    private Calculator calculator;\n    \n    [Setup]\n    public void Setup()\n    {\n        calculator = new Calculator();\n        Console.WriteLine(\"Setup: បានបង្កើត Calculator instance\");\n    }\n    \n    [Teardown]\n    public void Teardown()\n    {\n        calculator = null;\n        Console.WriteLine(\"Teardown: បានសម្អាត Calculator instance\");\n    }\n    \n    [TestMethod]\n    public void Add_TwoPositiveNumbers_ReturnsCorrectSum()\n    {\n        // Arrange\n        double a = 5;\n        double b = 3;\n        double expected = 8;\n        \n        // Act\n        double result = calculator.Add(a, b);\n        \n        // Assert\n        Assert.AreEqual(expected, result, \"ការបូកលេខវិជ្ជមានមិនត្រឹមត្រូវ\");\n    }\n    \n    [TestMethod]\n    public void Add_NegativeNumbers_ReturnsCorrectSum()\n    {\n        // Arrange\n        double a = -5;\n        double b = -3;\n        double expected = -8;\n        \n        // Act\n        double result = calculator.Add(a, b);\n        \n        // Assert\n        Assert.AreEqual(expected, result, \"ការបូកលេខអវិជ្ជមានមិនត្រឹមត្រូវ\");\n    }\n    \n    [TestMethod]\n    public void Divide_ByZero_ThrowsException()\n    {\n        // Arrange\n        double a = 10;\n        double b = 0;\n        \n        // Act & Assert\n        Assert.Throws<DivideByZeroException>(() => calculator.Divide(a, b), \"គួរតែបង្កកំហុសនៅពេលចែកដោយសូន្យ\");\n    }\n    \n    [TestMethod]\n    public void SquareRoot_NegativeNumber_ThrowsException()\n    {\n        // Arrange\n        double number = -4;\n        \n        // Act & Assert\n        Assert.Throws<ArgumentException>(() => calculator.SquareRoot(number), \"គួរតែបង្កកំហុសនៅពេលរកឫសការ៉េលេខអវិជ្ជមាន\");\n    }\n    \n    [TestMethod]\n    public void SquareRoot_PositiveNumber_ReturnsCorrectResult()\n    {\n        // Arrange\n        double number = 16;\n        double expected = 4;\n        \n        // Act\n        double result = calculator.SquareRoot(number);\n        \n        // Assert\n        Assert.AreEqual(expected, result, \"ការរកឫសការ៉េមិនត្រឹមត្រូវ\");\n    }\n}\n\n[TestClass]\npublic class BankAccountTests\n{\n    private BankAccount account;\n    \n    [Setup]\n    public void Setup()\n    {\n        account = new BankAccount(\"ACC001\", \"សុខា\", 1000);\n        Console.WriteLine(\"Setup: បានបង្កើត BankAccount\");\n    }\n    \n    [TestMethod]\n    public void Constructor_ValidParameters_CreatesAccount()\n    {\n        // Assert\n        Assert.AreEqual(\"ACC001\", account.AccountNumber);\n        Assert.AreEqual(\"សុខា\", account.Owner);\n        Assert.AreEqual(1000m, account.Balance);\n        Assert.IsTrue(account.IsActive);\n        Assert.AreEqual(1, account.Transactions.Count);\n    }\n    \n    [TestMethod]\n    public void Constructor_EmptyAccountNumber_ThrowsException()\n    {\n        // Act & Assert\n        Assert.Throws<ArgumentException>(() => new BankAccount(\"\", \"សុខា\", 1000));\n    }\n    \n    [TestMethod]\n    public void Deposit_ValidAmount_IncreasesBalance()\n    {\n        // Arrange\n        decimal initialBalance = account.Balance;\n        decimal depositAmount = 500;\n        \n        // Act\n        account.Deposit(depositAmount, \"ការដាក់ប្រាក់\");\n        \n        // Assert\n        Assert.AreEqual(initialBalance + depositAmount, account.Balance);\n        Assert.AreEqual(2, account.Transactions.Count);\n    }\n    \n    [TestMethod]\n    public void Withdraw_ValidAmount_DecreasesBalance()\n    {\n        // Arrange\n        decimal initialBalance = account.Balance;\n        decimal withdrawAmount = 300;\n        \n        // Act\n        account.Withdraw(withdrawAmount, \"ការដកប្រាក់\");\n        \n        // Assert\n        Assert.AreEqual(initialBalance - withdrawAmount, account.Balance);\n        Assert.AreEqual(2, account.Transactions.Count);\n    }\n    \n    [TestMethod]\n    public void Withdraw_InsufficientFunds_ThrowsException()\n    {\n        // Arrange\n        decimal withdrawAmount = 1500; // លើសពីសមតុល្យ\n        \n        // Act & Assert\n        Assert.Throws<InvalidOperationException>(() => account.Withdraw(withdrawAmount));\n    }\n    \n    [TestMethod]\n    public void Transfer_ValidAmount_UpdatesBothAccounts()\n    {\n        // Arrange\n        BankAccount targetAccount = new BankAccount(\"ACC002\", \"ចន្ទា\", 500);\n        decimal transferAmount = 200;\n        decimal initialSourceBalance = account.Balance;\n        decimal initialTargetBalance = targetAccount.Balance;\n        \n        // Act\n        account.Transfer(targetAccount, transferAmount, \"ការផ្ទេរប្រាក់\");\n        \n        // Assert\n        Assert.AreEqual(initialSourceBalance - transferAmount, account.Balance);\n        Assert.AreEqual(initialTargetBalance + transferAmount, targetAccount.Balance);\n    }\n}\n\n[TestClass]\npublic class StringHelperTests\n{\n    [TestMethod]\n    public void IsPalindrome_ValidPalindrome_ReturnsTrue()\n    {\n        // Arrange\n        string text = \"racecar\";\n        \n        // Act\n        bool result = StringHelper.IsPalindrome(text);\n        \n        // Assert\n        Assert.IsTrue(result, \"racecar គួរតែជា palindrome\");\n    }\n    \n    [TestMethod]\n    public void IsPalindrome_NotPalindrome_ReturnsFalse()\n    {\n        // Arrange\n        string text = \"hello\";\n        \n        // Act\n        bool result = StringHelper.IsPalindrome(text);\n        \n        // Assert\n        Assert.IsFalse(result, \"hello មិនមែនជា palindrome\");\n    }\n    \n    [TestMethod]\n    public void CountWords_NormalSentence_ReturnsCorrectCount()\n    {\n        // Arrange\n        string text = \"នេះគឺជាប្រយោគមួយ\";\n        int expected = 4;\n        \n        // Act\n        int result = StringHelper.CountWords(text);\n        \n        // Assert\n        Assert.AreEqual(expected, result, \"ការរាប់ពាក្យមិនត្រឹមត្រូវ\");\n    }\n    \n    [TestMethod]\n    public void CountWords_EmptyString_ReturnsZero()\n    {\n        // Arrange\n        string text = \"\";\n        int expected = 0;\n        \n        // Act\n        int result = StringHelper.CountWords(text);\n        \n        // Assert\n        Assert.AreEqual(expected, result, \"ការរាប់ពាក្យក្នុង string ទទេគួរតែបាន 0\");\n    }\n    \n    [TestMethod]\n    public void Capitalize_LowercaseWord_ReturnsCapitalized()\n    {\n        // Arrange\n        string text = \"hello\";\n        string expected = \"Hello\";\n        \n        // Act\n        string result = StringHelper.Capitalize(text);\n        \n        // Assert\n        Assert.AreEqual(expected, result, \"ការធ្វើអក្សរធំមិនត្រឹមត្រូវ\");\n    }\n}\n\n// ===== TEST RUNNER =====\n\npublic class TestRunner\n{\n    public static void RunAllTests()\n    {\n        Console.WriteLine(\"=== ចាប់ផ្តើមការសាកល្បង Unit Tests ===\");\n        \n        Type[] testClasses = {\n            typeof(CalculatorTests),\n            typeof(BankAccountTests),\n            typeof(StringHelperTests)\n        };\n        \n        int totalTests = 0;\n        int passedTests = 0;\n        int failedTests = 0;\n        \n        foreach (Type testClass in testClasses)\n        {\n            Console.WriteLine($\"\\n--- ការសាកល្បង {testClass.Name} ---\");\n            \n            var classResults = RunTestClass(testClass);\n            totalTests += classResults.Total;\n            passedTests += classResults.Passed;\n            failedTests += classResults.Failed;\n        }\n        \n        Console.WriteLine($\"\\n=== សរុបលទ្ធផលការសាកល្បង ===\");\n        Console.WriteLine($\"សរុប: {totalTests} tests\");\n        Console.WriteLine($\"ជោគជ័យ: {passedTests} tests\");\n        Console.WriteLine($\"បរាជ័យ: {failedTests} tests\");\n        Console.WriteLine($\"អត្រាជោគជ័យ: {(totalTests > 0 ? (double)passedTests / totalTests * 100 : 0):F1}%\");\n    }\n    \n    private static (int Total, int Passed, int Failed) RunTestClass(Type testClass)\n    {\n        if (!testClass.GetCustomAttributes(typeof(TestClassAttribute), false).Any())\n        {\n            Console.WriteLine($\"{testClass.Name} មិនមែនជា test class\");\n            return (0, 0, 0);\n        }\n        \n        var testMethods = testClass.GetMethods()\n            .Where(m => m.GetCustomAttributes(typeof(TestMethodAttribute), false).Any())\n            .ToArray();\n        \n        var setupMethod = testClass.GetMethods()\n            .FirstOrDefault(m => m.GetCustomAttributes(typeof(SetupAttribute), false).Any());\n        \n        var teardownMethod = testClass.GetMethods()\n            .FirstOrDefault(m => m.GetCustomAttributes(typeof(TeardownAttribute), false).Any());\n        \n        int passed = 0;\n        int failed = 0;\n        \n        foreach (var testMethod in testMethods)\n        {\n            object testInstance = Activator.CreateInstance(testClass);\n            \n            try\n            {\n                // Run setup\n                setupMethod?.Invoke(testInstance, null);\n                \n                // Run test\n                testMethod.Invoke(testInstance, null);\n                \n                Console.WriteLine($\"✅ {testMethod.Name} - ជោគជ័យ\");\n                passed++;\n            }\n            catch (Exception ex)\n            {\n                Exception innerEx = ex.InnerException ?? ex;\n                Console.WriteLine($\"❌ {testMethod.Name} - បរាជ័យ: {innerEx.Message}\");\n                failed++;\n            }\n            finally\n            {\n                try\n                {\n                    // Run teardown\n                    teardownMethod?.Invoke(testInstance, null);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"⚠️ Teardown error in {testMethod.Name}: {ex.Message}\");\n                }\n            }\n        }\n        \n        return (testMethods.Length, passed, failed);\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"=== Unit Testing ក្នុង C# ===\");\n        \n        // ដំណើរការ tests ទាំងអស់\n        TestRunner.RunAllTests();\n        \n        Console.WriteLine(\"\\n=== បញ្ចប់ការបង្ហាញ Unit Testing ===\");\n        Console.WriteLine(\"\\nចំណាំ: នេះគឺជា test framework សាមញ្ញ។ ក្នុងការអភិវឌ្ឍន៍ពិត សូមប្រើ frameworks ដូចជា NUnit, xUnit, ឬ MSTest។\");\n    }\n}",
    "tip": "ប្រើ AAA pattern (Arrange, Act, Assert) ដើម្បីរៀបចំ unit tests ឱ្យបានច្បាស់លាស់"
  },
  {
    "id": 24,
    "category": "C#",
    "path": "/csharp/performance-optimization",
    "title": "មេរៀនទី២៤: ការកែលម្អប្រសិទ្ធភាព (Performance Optimization)",
    "explanation": "ការកែលម្អប្រសិទ្ធភាពគឺជាដំណើរការធ្វើឱ្យកម្មវិធីដំណើរការលឿនជាង ប្រើ memory តិច និងប្រើ resources បានប្រកបដោយប្រសិទ្ធភាព។ វារួមបញ្ចូលការវាស់ស្ទង់ ការវិភាគ និងការកែលម្អ។",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Collections.Concurrent;\nusing System.Runtime.CompilerServices;\n\n// ===== PERFORMANCE MEASUREMENT UTILITIES =====\n\npublic static class PerformanceHelper\n{\n    public static TimeSpan MeasureTime(Action action)\n    {\n        Stopwatch stopwatch = Stopwatch.StartNew();\n        action();\n        stopwatch.Stop();\n        return stopwatch.Elapsed;\n    }\n    \n    public static (T Result, TimeSpan Time) MeasureTime<T>(Func<T> func)\n    {\n        Stopwatch stopwatch = Stopwatch.StartNew();\n        T result = func();\n        stopwatch.Stop();\n        return (result, stopwatch.Elapsed);\n    }\n    \n    public static void ComparePerformance(string description, params (string Name, Action Action)[] actions)\n    {\n        Console.WriteLine($\"\\n=== {description} ===\");\n        \n        var results = new List<(string Name, TimeSpan Time)>();\n        \n        // Warm up\n        foreach (var (name, action) in actions)\n        {\n            action();\n        }\n        \n        // Measure\n        foreach (var (name, action) in actions)\n        {\n            GC.Collect();\n            GC.WaitForPendingFinalizers();\n            GC.Collect();\n            \n            var time = MeasureTime(action);\n            results.Add((name, time));\n            Console.WriteLine($\"{name}: {time.TotalMilliseconds:F2} ms\");\n        }\n        \n        // Show comparison\n        if (results.Count > 1)\n        {\n            var fastest = results.OrderBy(r => r.Time).First();\n            Console.WriteLine($\"\\nលឿនបំផុត: {fastest.Name}\");\n            \n            foreach (var result in results.Where(r => r.Name != fastest.Name))\n            {\n                double ratio = result.Time.TotalMilliseconds / fastest.Time.TotalMilliseconds;\n                Console.WriteLine($\"{result.Name} យឺតជាង {ratio:F2}x\");\n            }\n        }\n    }\n    \n    public static long GetMemoryUsage()\n    {\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n        GC.Collect();\n        return GC.GetTotalMemory(false);\n    }\n    \n    public static void MeasureMemoryUsage(string description, Action action)\n    {\n        long memoryBefore = GetMemoryUsage();\n        action();\n        long memoryAfter = GetMemoryUsage();\n        \n        long memoryUsed = memoryAfter - memoryBefore;\n        Console.WriteLine($\"{description}: {memoryUsed:N0} bytes ({memoryUsed / 1024.0:F2} KB)\");\n    }\n}\n\n// ===== STRING PERFORMANCE EXAMPLES =====\n\npublic static class StringPerformanceExamples\n{\n    public static void DemoStringConcatenation()\n    {\n        const int iterations = 10000;\n        \n        PerformanceHelper.ComparePerformance(\n            \"ការបន្ថែម String\",\n            (\"String concatenation (+)\", () => ConcatenateWithPlus(iterations)),\n            (\"StringBuilder\", () => ConcatenateWithStringBuilder(iterations)),\n            (\"String.Join\", () => ConcatenateWithJoin(iterations)),\n            (\"String interpolation\", () => ConcatenateWithInterpolation(iterations))\n        );\n    }\n    \n    private static string ConcatenateWithPlus(int count)\n    {\n        string result = \"\";\n        for (int i = 0; i < count; i++)\n        {\n            result += $\"Item {i} \";\n        }\n        return result;\n    }\n    \n    private static string ConcatenateWithStringBuilder(int count)\n    {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < count; i++)\n        {\n            sb.Append($\"Item {i} \");\n        }\n        return sb.ToString();\n    }\n    \n    private static string ConcatenateWithJoin(int count)\n    {\n        var items = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            items[i] = $\"Item {i}\";\n        }\n        return string.Join(\" \", items);\n    }\n    \n    private static string ConcatenateWithInterpolation(int count)\n    {\n        var items = new List<string>();\n        for (int i = 0; i < count; i++)\n        {\n            items.Add($\"Item {i}\");\n        }\n        return string.Join(\" \", items);\n    }\n}\n\n// ===== COLLECTION PERFORMANCE EXAMPLES =====\n\npublic static class CollectionPerformanceExamples\n{\n    public static void DemoCollectionOperations()\n    {\n        const int size = 100000;\n        \n        // ការបន្ថែមធាតុ\n        PerformanceHelper.ComparePerformance(\n            \"ការបន្ថែមធាតុ\",\n            (\"List<int>\", () => AddToList(size)),\n            (\"LinkedList<int>\", () => AddToLinkedList(size)),\n            (\"HashSet<int>\", () => AddToHashSet(size)),\n            (\"Dictionary<int, int>\", () => AddToDictionary(size))\n        );\n        \n        // ការស្វែងរក\n        var list = Enumerable.Range(0, size).ToList();\n        var hashSet = new HashSet<int>(list);\n        var dictionary = list.ToDictionary(x => x, x => x);\n        \n        PerformanceHelper.ComparePerformance(\n            \"ការស្វែងរកធាតុ\",\n            (\"List.Contains\", () => SearchInList(list, size / 2)),\n            (\"HashSet.Contains\", () => SearchInHashSet(hashSet, size / 2)),\n            (\"Dictionary.ContainsKey\", () => SearchInDictionary(dictionary, size / 2))\n        );\n    }\n    \n    private static void AddToList(int count)\n    {\n        var list = new List<int>();\n        for (int i = 0; i < count; i++)\n        {\n            list.Add(i);\n        }\n    }\n    \n    private static void AddToLinkedList(int count)\n    {\n        var linkedList = new LinkedList<int>();\n        for (int i = 0; i < count; i++)\n        {\n            linkedList.AddLast(i);\n        }\n    }\n    \n    private static void AddToHashSet(int count)\n    {\n        var hashSet = new HashSet<int>();\n        for (int i = 0; i < count; i++)\n        {\n            hashSet.Add(i);\n        }\n    }\n    \n    private static void AddToDictionary(int count)\n    {\n        var dictionary = new Dictionary<int, int>();\n        for (int i = 0; i < count; i++)\n        {\n            dictionary[i] = i;\n        }\n    }\n    \n    private static bool SearchInList(List<int> list, int target)\n    {\n        return list.Contains(target);\n    }\n    \n    private static bool SearchInHashSet(HashSet<int> hashSet, int target)\n    {\n        return hashSet.Contains(target);\n    }\n    \n    private static bool SearchInDictionary(Dictionary<int, int> dictionary, int target)\n    {\n        return dictionary.ContainsKey(target);\n    }\n}\n\n// ===== LINQ PERFORMANCE EXAMPLES =====\n\npublic static class LinqPerformanceExamples\n{\n    public static void DemoLinqVsLoop()\n    {\n        var numbers = Enumerable.Range(1, 1000000).ToArray();\n        \n        PerformanceHelper.ComparePerformance(\n            \"ការរកលេខគូ\",\n            (\"LINQ Where\", () => FindEvenWithLinq(numbers)),\n            (\"For loop\", () => FindEvenWithLoop(numbers)),\n            (\"Parallel LINQ\", () => FindEvenWithPLinq(numbers))\n        );\n        \n        PerformanceHelper.ComparePerformance(\n            \"ការគណនាផលបូក\",\n            (\"LINQ Sum\", () => SumWithLinq(numbers)),\n            (\"For loop\", () => SumWithLoop(numbers)),\n            (\"Parallel LINQ\", () => SumWithPLinq(numbers))\n        );\n    }\n    \n    private static List<int> FindEvenWithLinq(int[] numbers)\n    {\n        return numbers.Where(x => x % 2 == 0).ToList();\n    }\n    \n    private static List<int> FindEvenWithLoop(int[] numbers)\n    {\n        var result = new List<int>();\n        for (int i = 0; i < numbers.Length; i++)\n        {\n            if (numbers[i] % 2 == 0)\n            {\n                result.Add(numbers[i]);\n            }\n        }\n        return result;\n    }\n    \n    private static List<int> FindEvenWithPLinq(int[] numbers)\n    {\n        return numbers.AsParallel().Where(x => x % 2 == 0).ToList();\n    }\n    \n    private static long SumWithLinq(int[] numbers)\n    {\n        return numbers.Sum(x => (long)x);\n    }\n    \n    private static long SumWithLoop(int[] numbers)\n    {\n        long sum = 0;\n        for (int i = 0; i < numbers.Length; i++)\n        {\n            sum += numbers[i];\n        }\n        return sum;\n    }\n    \n    private static long SumWithPLinq(int[] numbers)\n    {\n        return numbers.AsParallel().Sum(x => (long)x);\n    }\n}\n\n// ===== MEMORY OPTIMIZATION EXAMPLES =====\n\npublic class MemoryOptimizationExamples\n{\n    // Struct vs Class\n    public struct PointStruct\n    {\n        public int X { get; set; }\n        public int Y { get; set; }\n        \n        public PointStruct(int x, int y)\n        {\n            X = x;\n            Y = y;\n        }\n    }\n    \n    public class PointClass\n    {\n        public int X { get; set; }\n        public int Y { get; set; }\n        \n        public PointClass(int x, int y)\n        {\n            X = x;\n            Y = y;\n        }\n    }\n    \n    public static void DemoStructVsClass()\n    {\n        const int count = 1000000;\n        \n        PerformanceHelper.MeasureMemoryUsage(\n            \"បង្កើត Struct array\",\n            () => CreateStructArray(count)\n        );\n        \n        PerformanceHelper.MeasureMemoryUsage(\n            \"បង្កើត Class array\",\n            () => CreateClassArray(count)\n        );\n        \n        PerformanceHelper.ComparePerformance(\n            \"ការបង្កើត និងការចូលប្រើ\",\n            (\"Struct\", () => ProcessStructArray(count)),\n            (\"Class\", () => ProcessClassArray(count))\n        );\n    }\n    \n    private static PointStruct[] CreateStructArray(int count)\n    {\n        var points = new PointStruct[count];\n        for (int i = 0; i < count; i++)\n        {\n            points[i] = new PointStruct(i, i * 2);\n        }\n        return points;\n    }\n    \n    private static PointClass[] CreateClassArray(int count)\n    {\n        var points = new PointClass[count];\n        for (int i = 0; i < count; i++)\n        {\n            points[i] = new PointClass(i, i * 2);\n        }\n        return points;\n    }\n    \n    private static long ProcessStructArray(int count)\n    {\n        var points = CreateStructArray(count);\n        long sum = 0;\n        for (int i = 0; i < points.Length; i++)\n        {\n            sum += points[i].X + points[i].Y;\n        }\n        return sum;\n    }\n    \n    private static long ProcessClassArray(int count)\n    {\n        var points = CreateClassArray(count);\n        long sum = 0;\n        for (int i = 0; i < points.Length; i++)\n        {\n            sum += points[i].X + points[i].Y;\n        }\n        return sum;\n    }\n}\n\n// ===== ASYNC PERFORMANCE EXAMPLES =====\n\npublic static class AsyncPerformanceExamples\n{\n    public static async Task DemoAsyncPerformance()\n    {\n        const int taskCount = 100;\n        \n        Console.WriteLine(\"\\n=== ការប្រៀបធៀប Sync vs Async ===\");\n        \n        // Synchronous\n        var syncTime = PerformanceHelper.MeasureTime(() => RunSynchronousTasks(taskCount));\n        Console.WriteLine($\"Synchronous: {syncTime.TotalMilliseconds:F2} ms\");\n        \n        // Asynchronous\n        var (_, asyncTime) = await PerformanceHelper.MeasureTime(async () => await RunAsynchronousTasks(taskCount));\n        Console.WriteLine($\"Asynchronous: {asyncTime.TotalMilliseconds:F2} ms\");\n        \n        // Parallel\n        var (_, parallelTime) = await PerformanceHelper.MeasureTime(async () => await RunParallelTasks(taskCount));\n        Console.WriteLine($\"Parallel: {parallelTime.TotalMilliseconds:F2} ms\");\n        \n        Console.WriteLine($\"\\nAsync លឿនជាង Sync: {syncTime.TotalMilliseconds / asyncTime.TotalMilliseconds:F2}x\");\n        Console.WriteLine($\"Parallel លឿនជាង Sync: {syncTime.TotalMilliseconds / parallelTime.TotalMilliseconds:F2}x\");\n    }\n    \n    private static void RunSynchronousTasks(int count)\n    {\n        for (int i = 0; i < count; i++)\n        {\n            SimulateWork(50); // 50ms work\n        }\n    }\n    \n    private static async Task RunAsynchronousTasks(int count)\n    {\n        for (int i = 0; i < count; i++)\n        {\n            await SimulateWorkAsync(50);\n        }\n    }\n    \n    private static async Task RunParallelTasks(int count)\n    {\n        var tasks = new Task[count];\n        for (int i = 0; i < count; i++)\n        {\n            tasks[i] = SimulateWorkAsync(50);\n        }\n        await Task.WhenAll(tasks);\n    }\n    \n    private static void SimulateWork(int milliseconds)\n    {\n        System.Threading.Thread.Sleep(milliseconds);\n    }\n    \n    private static async Task SimulateWorkAsync(int milliseconds)\n    {\n        await Task.Delay(milliseconds);\n    }\n}\n\n// ===== CACHING EXAMPLES =====\n\npublic class CachingExample\n{\n    private static readonly Dictionary<int, int> _cache = new Dictionary<int, int>();\n    private static readonly ConcurrentDictionary<int, int> _concurrentCache = new ConcurrentDictionary<int, int>();\n    \n    public static void DemoCaching()\n    {\n        const int number = 40;\n        \n        PerformanceHelper.ComparePerformance(\n            \"ការគណនា Fibonacci\",\n            (\"មិនមាន Cache\", () => FibonacciWithoutCache(number)),\n            (\"មាន Cache\", () => FibonacciWithCache(number)),\n            (\"Concurrent Cache\", () => FibonacciWithConcurrentCache(number))\n        );\n        \n        // Clear cache for next run\n        _cache.Clear();\n        _concurrentCache.Clear();\n    }\n    \n    private static int FibonacciWithoutCache(int n)\n    {\n        if (n <= 1) return n;\n        return FibonacciWithoutCache(n - 1) + FibonacciWithoutCache(n - 2);\n    }\n    \n    private static int FibonacciWithCache(int n)\n    {\n        if (n <= 1) return n;\n        \n        if (_cache.ContainsKey(n))\n            return _cache[n];\n        \n        int result = FibonacciWithCache(n - 1) + FibonacciWithCache(n - 2);\n        _cache[n] = result;\n        return result;\n    }\n    \n    private static int FibonacciWithConcurrentCache(int n)\n    {\n        if (n <= 1) return n;\n        \n        return _concurrentCache.GetOrAdd(n, key => \n            FibonacciWithConcurrentCache(key - 1) + FibonacciWithConcurrentCache(key - 2));\n    }\n}\n\n// ===== OPTIMIZATION TIPS CLASS =====\n\npublic static class OptimizationTips\n{\n    public static void DemoOptimizationTechniques()\n    {\n        Console.WriteLine(\"\\n=== បច្ចេកទេសកែលម្អប្រសិទ្ធភាព ===\");\n        \n        // 1. Use appropriate data structures\n        Console.WriteLine(\"\\n1. ប្រើរចនាសម្ព័ន្ធទិន្នន័យសមស្រប:\");\n        Console.WriteLine(\"   - List<T>: សម្រាប់ការចូលប្រើតាម index\");\n        Console.WriteLine(\"   - HashSet<T>: សម្រាប់ការស្វែងរកលឿន\");\n        Console.WriteLine(\"   - Dictionary<K,V>: សម្រាប់ key-value mapping\");\n        Console.WriteLine(\"   - StringBuilder: សម្រាប់ការបន្ថែម string ច្រើន\");\n        \n        // 2. Avoid unnecessary allocations\n        Console.WriteLine(\"\\n2. ជៀសវាងការបង្កើត object មិនចាំបាច់:\");\n        Console.WriteLine(\"   - ប្រើ object pooling\");\n        Console.WriteLine(\"   - ប្រើ struct សម្រាប់ value types តូច\");\n        Console.WriteLine(\"   - ប្រើ ArrayPool<T> សម្រាប់ temporary arrays\");\n        \n        // 3. Use async/await properly\n        Console.WriteLine(\"\\n3. ប្រើ async/await ឱ្យបានត្រឹមត្រូវ:\");\n        Console.WriteLine(\"   - ប្រើ ConfigureAwait(false) ក្នុង libraries\");\n        Console.WriteLine(\"   - ជៀសវាង async void លើកលែងតែ event handlers\");\n        Console.WriteLine(\"   - ប្រើ Task.WhenAll សម្រាប់ parallel operations\");\n        \n        // 4. Optimize LINQ usage\n        Console.WriteLine(\"\\n4. កែលម្អការប្រើ LINQ:\");\n        Console.WriteLine(\"   - ប្រើ for loops សម្រាប់ performance-critical code\");\n        Console.WriteLine(\"   - ប្រើ AsParallel() សម្រាប់ large datasets\");\n        Console.WriteLine(\"   - ជៀសវាង multiple enumeration\");\n        \n        // 5. Memory management\n        Console.WriteLine(\"\\n5. ការគ្រប់គ្រង Memory:\");\n        Console.WriteLine(\"   - Dispose resources properly\");\n        Console.WriteLine(\"   - ប្រើ using statements\");\n        Console.WriteLine(\"   - ជៀសវាង memory leaks ក្នុង event subscriptions\");\n    }\n    \n    // Example of method inlining\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int FastAdd(int a, int b)\n    {\n        return a + b;\n    }\n    \n    // Example of avoiding boxing\n    public static void DemoBoxingAvoidance()\n    {\n        Console.WriteLine(\"\\n=== ការជៀសវាង Boxing ===\");\n        \n        const int iterations = 1000000;\n        \n        PerformanceHelper.ComparePerformance(\n            \"Boxing vs No Boxing\",\n            (\"With Boxing\", () => WithBoxing(iterations)),\n            (\"Without Boxing\", () => WithoutBoxing(iterations))\n        );\n    }\n    \n    private static void WithBoxing(int iterations)\n    {\n        var list = new List<object>();\n        for (int i = 0; i < iterations; i++)\n        {\n            list.Add(i); // Boxing occurs here\n        }\n    }\n    \n    private static void WithoutBoxing(int iterations)\n    {\n        var list = new List<int>();\n        for (int i = 0; i < iterations; i++)\n        {\n            list.Add(i); // No boxing\n        }\n    }\n}\n\nclass Program\n{\n    static async Task Main()\n    {\n        Console.WriteLine(\"=== Performance Optimization ក្នុង C# ===\");\n        \n        // String performance\n        StringPerformanceExamples.DemoStringConcatenation();\n        \n        // Collection performance\n        CollectionPerformanceExamples.DemoCollectionOperations();\n        \n        // LINQ performance\n        LinqPerformanceExamples.DemoLinqVsLoop();\n        \n        // Memory optimization\n        MemoryOptimizationExamples.DemoStructVsClass();\n        \n        // Async performance\n        await AsyncPerformanceExamples.DemoAsyncPerformance();\n        \n        // Caching\n        CachingExample.DemoCaching();\n        \n        // Boxing avoidance\n        OptimizationTips.DemoBoxingAvoidance();\n        \n        // Optimization tips\n        OptimizationTips.DemoOptimizationTechniques();\n        \n        Console.WriteLine(\"\\n=== បញ្ចប់ការបង្ហាញ Performance Optimization ===\");\n        Console.WriteLine(\"\\nចំណាំ: លទ្ធផល performance អាចខុសគ្នាអាស្រ័យលើ hardware និង environment។\");\n        Console.WriteLine(\"តែងតែវាស់ស្ទង់ performance ក្នុងបរិបទពិតប្រាកដមុនពេលធ្វើ optimization។\");\n    }\n}",
    "tip": "តែងតែវាស់ស្ទង់ performance មុនពេលធ្វើ optimization - \"Premature optimization is the root of all evil\""
  },
  {
    "id": 25,
    "category": "C#",
    "path": "/csharp/best-practices",
    "title": "មេរៀនទី២៥: ការអនុវត្តល្អបំផុត (Best Practices)",
    "explanation": "ការអនុវត្តល្អបំផុតគឺជាគោលការណ៍ណែនាំដែលជួយធ្វើឱ្យកូដមានគុណភាពខ្ពស់ ងាយស្រួលអាន ងាយស្រួលថែទាំ និងមានសុវត្ថិភាព។ វារួមបញ្ចូលការដាក់ឈ្មោះ ការរៀបចំកូដ ការគ្រប់គ្រងកំហុស និងការសរសេរកូដដែលអាចធ្វើតេស្តបាន។",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.ComponentModel.DataAnnotations;\nusing System.Text.Json;\nusing System.IO;\n\n// ===== NAMING CONVENTIONS =====\n\n// ✅ ការដាក់ឈ្មោះល្អ\npublic class StudentManagementSystem\n{\n    // Constants - PascalCase\n    public const int MaxStudentsPerClass = 30;\n    public const string DefaultGrade = \"មិនកំណត់\";\n    \n    // Private fields - camelCase with underscore prefix\n    private readonly List<Student> _students;\n    private readonly ILogger _logger;\n    private int _nextStudentId;\n    \n    // Properties - PascalCase\n    public int TotalStudents => _students.Count;\n    public bool HasStudents => _students.Any();\n    \n    // Constructor\n    public StudentManagementSystem(ILogger logger)\n    {\n        _students = new List<Student>();\n        _logger = logger ?? throw new ArgumentNullException(nameof(logger));\n        _nextStudentId = 1;\n    }\n    \n    // Methods - PascalCase, descriptive names\n    public async Task<Student> AddStudentAsync(string fullName, int age, string email)\n    {\n        // Input validation\n        if (string.IsNullOrWhiteSpace(fullName))\n            throw new ArgumentException(\"ឈ្មោះសិស្សមិនអាចទទេបានទេ\", nameof(fullName));\n        \n        if (age < 15 || age > 100)\n            throw new ArgumentOutOfRangeException(nameof(age), \"អាយុត្រូវតែនៅចន្លោះ 15 ដល់ 100 ឆ្នាំ\");\n        \n        if (!IsValidEmail(email))\n            throw new ArgumentException(\"ទម្រង់អ៊ីមែលមិនត្រឹមត្រូវ\", nameof(email));\n        \n        // Check for duplicate email\n        if (await IsEmailAlreadyExistsAsync(email))\n            throw new InvalidOperationException($\"អ៊ីមែល {email} មានរួចហើយ\");\n        \n        var student = new Student\n        {\n            Id = _nextStudentId++,\n            FullName = fullName.Trim(),\n            Age = age,\n            Email = email.ToLowerInvariant(),\n            EnrollmentDate = DateTime.Now,\n            IsActive = true\n        };\n        \n        _students.Add(student);\n        _logger.LogInfo($\"បានបន្ថែមសិស្ស: {student.FullName} (ID: {student.Id})\");\n        \n        return student;\n    }\n    \n    public async Task<bool> RemoveStudentAsync(int studentId)\n    {\n        var student = await FindStudentByIdAsync(studentId);\n        if (student == null)\n        {\n            _logger.LogWarning($\"រកមិនឃើញសិស្ស ID: {studentId}\");\n            return false;\n        }\n        \n        _students.Remove(student);\n        _logger.LogInfo($\"បានដកសិស្ស: {student.FullName} (ID: {student.Id})\");\n        return true;\n    }\n    \n    public async Task<Student> FindStudentByIdAsync(int studentId)\n    {\n        // Simulate async operation\n        await Task.Delay(1);\n        return _students.FirstOrDefault(s => s.Id == studentId);\n    }\n    \n    public async Task<List<Student>> SearchStudentsByNameAsync(string searchTerm)\n    {\n        if (string.IsNullOrWhiteSpace(searchTerm))\n            return new List<Student>();\n        \n        await Task.Delay(1); // Simulate async operation\n        \n        return _students\n            .Where(s => s.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))\n            .OrderBy(s => s.FullName)\n            .ToList();\n    }\n    \n    private async Task<bool> IsEmailAlreadyExistsAsync(string email)\n    {\n        await Task.Delay(1); // Simulate async database check\n        return _students.Any(s => s.Email.Equals(email, StringComparison.OrdinalIgnoreCase));\n    }\n    \n    private static bool IsValidEmail(string email)\n    {\n        if (string.IsNullOrWhiteSpace(email))\n            return false;\n        \n        try\n        {\n            var emailAttribute = new EmailAddressAttribute();\n            return emailAttribute.IsValid(email);\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n\n// ===== WELL-DESIGNED CLASSES =====\n\n// ✅ Student class with proper encapsulation\npublic class Student\n{\n    public int Id { get; set; }\n    \n    [Required(ErrorMessage = \"ឈ្មោះគឺចាំបាច់\")]\n    [StringLength(100, MinimumLength = 2, ErrorMessage = \"ឈ្មោះត្រូវតែមានពី 2 ដល់ 100 តួអក្សរ\")]\n    public string FullName { get; set; }\n    \n    [Range(15, 100, ErrorMessage = \"អាយុត្រូវតែនៅចន្លោះ 15 ដល់ 100 ឆ្នាំ\")]\n    public int Age { get; set; }\n    \n    [EmailAddress(ErrorMessage = \"ទម្រង់អ៊ីមែលមិនត្រឹមត្រូវ\")]\n    public string Email { get; set; }\n    \n    public DateTime EnrollmentDate { get; set; }\n    public bool IsActive { get; set; }\n    \n    // Navigation properties\n    public List<Course> Courses { get; set; } = new List<Course>();\n    public List<Grade> Grades { get; set; } = new List<Grade>();\n    \n    // Computed properties\n    public double GPA => CalculateGPA();\n    public int EnrollmentDurationInDays => (DateTime.Now - EnrollmentDate).Days;\n    \n    // Methods\n    public void EnrollInCourse(Course course)\n    {\n        if (course == null)\n            throw new ArgumentNullException(nameof(course));\n        \n        if (Courses.Any(c => c.Id == course.Id))\n            throw new InvalidOperationException($\"សិស្សបានចុះឈ្មោះក្នុងមុខវិជ្ជា {course.Name} រួចហើយ\");\n        \n        Courses.Add(course);\n    }\n    \n    public void AddGrade(Course course, double score)\n    {\n        if (course == null)\n            throw new ArgumentNullException(nameof(course));\n        \n        if (score < 0 || score > 100)\n            throw new ArgumentOutOfRangeException(nameof(score), \"ពិន្ទុត្រូវតែនៅចន្លោះ 0 ដល់ 100\");\n        \n        if (!Courses.Any(c => c.Id == course.Id))\n            throw new InvalidOperationException($\"សិស្សមិនបានចុះឈ្មោះក្នុងមុខវិជ្ជា {course.Name}\");\n        \n        var existingGrade = Grades.FirstOrDefault(g => g.CourseId == course.Id);\n        if (existingGrade != null)\n        {\n            existingGrade.Score = score;\n            existingGrade.DateRecorded = DateTime.Now;\n        }\n        else\n        {\n            Grades.Add(new Grade\n            {\n                StudentId = Id,\n                CourseId = course.Id,\n                Score = score,\n                DateRecorded = DateTime.Now\n            });\n        }\n    }\n    \n    private double CalculateGPA()\n    {\n        if (!Grades.Any())\n            return 0.0;\n        \n        return Grades.Average(g => ConvertScoreToGradePoint(g.Score));\n    }\n    \n    private static double ConvertScoreToGradePoint(double score)\n    {\n        return score switch\n        {\n            >= 90 => 4.0,\n            >= 80 => 3.0,\n            >= 70 => 2.0,\n            >= 60 => 1.0,\n            _ => 0.0\n        };\n    }\n    \n    public override string ToString()\n    {\n        return $\"{FullName} (ID: {Id}, GPA: {GPA:F2})\";\n    }\n    \n    public override bool Equals(object obj)\n    {\n        return obj is Student other && Id == other.Id;\n    }\n    \n    public override int GetHashCode()\n    {\n        return Id.GetHashCode();\n    }\n}\n\npublic class Course\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Code { get; set; }\n    public int Credits { get; set; }\n    public string Description { get; set; }\n    \n    public override string ToString()\n    {\n        return $\"{Code}: {Name} ({Credits} credits)\";\n    }\n}\n\npublic class Grade\n{\n    public int StudentId { get; set; }\n    public int CourseId { get; set; }\n    public double Score { get; set; }\n    public DateTime DateRecorded { get; set; }\n    \n    public string LetterGrade => Score switch\n    {\n        >= 90 => \"A\",\n        >= 80 => \"B\",\n        >= 70 => \"C\",\n        >= 60 => \"D\",\n        _ => \"F\"\n    };\n}\n\n// ===== INTERFACES AND DEPENDENCY INJECTION =====\n\npublic interface ILogger\n{\n    void LogInfo(string message);\n    void LogWarning(string message);\n    void LogError(string message, Exception exception = null);\n}\n\npublic class ConsoleLogger : ILogger\n{\n    public void LogInfo(string message)\n    {\n        Console.WriteLine($\"[INFO] {DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}\");\n    }\n    \n    public void LogWarning(string message)\n    {\n        Console.WriteLine($\"[WARNING] {DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}\");\n    }\n    \n    public void LogError(string message, Exception exception = null)\n    {\n        Console.WriteLine($\"[ERROR] {DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}\");\n        if (exception != null)\n        {\n            Console.WriteLine($\"Exception: {exception.Message}\");\n        }\n    }\n}\n\npublic interface IDataRepository<T>\n{\n    Task<T> GetByIdAsync(int id);\n    Task<List<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task<bool> UpdateAsync(T entity);\n    Task<bool> DeleteAsync(int id);\n}\n\n// ===== ERROR HANDLING BEST PRACTICES =====\n\npublic static class ErrorHandlingExamples\n{\n    // ✅ Proper exception handling\n    public static async Task<string> ReadFileContentAsync(string filePath)\n    {\n        // Input validation\n        if (string.IsNullOrWhiteSpace(filePath))\n            throw new ArgumentException(\"ផ្លូវឯកសារមិនអាចទទេបានទេ\", nameof(filePath));\n        \n        try\n        {\n            // Check if file exists\n            if (!File.Exists(filePath))\n                throw new FileNotFoundException($\"រកមិនឃើញឯកសារ: {filePath}\");\n            \n            // Read file content\n            string content = await File.ReadAllTextAsync(filePath);\n            return content;\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            throw new InvalidOperationException($\"មិនមានសិទ្ធិចូលប្រើឯកសារ: {filePath}\", ex);\n        }\n        catch (IOException ex)\n        {\n            throw new InvalidOperationException($\"កំហុសក្នុងការអានឯកសារ: {filePath}\", ex);\n        }\n        // Let other exceptions bubble up\n    }\n    \n    // ✅ Using Result pattern for better error handling\n    public class Result<T>\n    {\n        public bool IsSuccess { get; private set; }\n        public T Value { get; private set; }\n        public string ErrorMessage { get; private set; }\n        public Exception Exception { get; private set; }\n        \n        private Result(bool isSuccess, T value, string errorMessage, Exception exception)\n        {\n            IsSuccess = isSuccess;\n            Value = value;\n            ErrorMessage = errorMessage;\n            Exception = exception;\n        }\n        \n        public static Result<T> Success(T value)\n        {\n            return new Result<T>(true, value, null, null);\n        }\n        \n        public static Result<T> Failure(string errorMessage, Exception exception = null)\n        {\n            return new Result<T>(false, default(T), errorMessage, exception);\n        }\n    }\n    \n    public static async Task<Result<Student>> CreateStudentSafelyAsync(string name, int age, string email)\n    {\n        try\n        {\n            // Validation\n            if (string.IsNullOrWhiteSpace(name))\n                return Result<Student>.Failure(\"ឈ្មោះសិស្សមិនអាចទទេបានទេ\");\n            \n            if (age < 15 || age > 100)\n                return Result<Student>.Failure(\"អាយុត្រូវតែនៅចន្លោះ 15 ដល់ 100 ឆ្នាំ\");\n            \n            // Create student\n            var student = new Student\n            {\n                Id = new Random().Next(1000, 9999),\n                FullName = name,\n                Age = age,\n                Email = email,\n                EnrollmentDate = DateTime.Now,\n                IsActive = true\n            };\n            \n            return Result<Student>.Success(student);\n        }\n        catch (Exception ex)\n        {\n            return Result<Student>.Failure(\"កំហុសក្នុងការបង្កើតសិស្ស\", ex);\n        }\n    }\n}\n\n// ===== CONFIGURATION AND SETTINGS =====\n\npublic class AppSettings\n{\n    public string DatabaseConnectionString { get; set; }\n    public int MaxStudentsPerClass { get; set; } = 30;\n    public bool EnableLogging { get; set; } = true;\n    public string LogLevel { get; set; } = \"Info\";\n    public EmailSettings Email { get; set; } = new EmailSettings();\n}\n\npublic class EmailSettings\n{\n    public string SmtpServer { get; set; }\n    public int Port { get; set; } = 587;\n    public string Username { get; set; }\n    public string Password { get; set; }\n    public bool EnableSsl { get; set; } = true;\n}\n\n// ===== EXTENSION METHODS =====\n\npublic static class StringExtensions\n{\n    public static bool IsNullOrWhiteSpace(this string value)\n    {\n        return string.IsNullOrWhiteSpace(value);\n    }\n    \n    public static string ToTitleCase(this string value)\n    {\n        if (value.IsNullOrWhiteSpace())\n            return value;\n        \n        return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(value.ToLower());\n    }\n    \n    public static bool IsValidEmail(this string email)\n    {\n        if (email.IsNullOrWhiteSpace())\n            return false;\n        \n        try\n        {\n            var emailAttribute = new EmailAddressAttribute();\n            return emailAttribute.IsValid(email);\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n\npublic static class CollectionExtensions\n{\n    public static bool IsNullOrEmpty<T>(this IEnumerable<T> collection)\n    {\n        return collection == null || !collection.Any();\n    }\n    \n    public static void ForEach<T>(this IEnumerable<T> collection, Action<T> action)\n    {\n        if (collection == null || action == null)\n            return;\n        \n        foreach (T item in collection)\n        {\n            action(item);\n        }\n    }\n}\n\n// ===== BEST PRACTICES DEMONSTRATION =====\n\npublic static class BestPracticesDemo\n{\n    public static async Task RunDemonstrationAsync()\n    {\n        Console.WriteLine(\"=== ការបង្ហាញ Best Practices ===\");\n        \n        // 1. Dependency Injection\n        ILogger logger = new ConsoleLogger();\n        var studentSystem = new StudentManagementSystem(logger);\n        \n        // 2. Proper error handling with try-catch\n        try\n        {\n            // 3. Input validation and meaningful variable names\n            var student1 = await studentSystem.AddStudentAsync(\"សុខា ចន្ទ្រា\", 20, \"sokha@example.com\");\n            var student2 = await studentSystem.AddStudentAsync(\"ចន្ទា វិចិត្រ\", 19, \"chantha@example.com\");\n            \n            Console.WriteLine($\"បានបន្ថែមសិស្ស: {student1}\");\n            Console.WriteLine($\"បានបន្ថែមសិស្ស: {student2}\");\n            \n            // 4. Using Result pattern for safer operations\n            var result = await ErrorHandlingExamples.CreateStudentSafelyAsync(\"រតនា\", 21, \"ratana@example.com\");\n            if (result.IsSuccess)\n            {\n                Console.WriteLine($\"បង្កើតសិស្សដោយជោគជ័យ: {result.Value}\");\n            }\n            else\n            {\n                Console.WriteLine($\"បរាជ័យក្នុងការបង្កើតសិស្ស: {result.ErrorMessage}\");\n            }\n            \n            // 5. Using extension methods\n            string testEmail = \"test@example.com\";\n            Console.WriteLine($\"អ៊ីមែល '{testEmail}' ត្រឹមត្រូវ: {testEmail.IsValidEmail()}\");\n            \n            // 6. Proper resource management with using\n            await DemonstrateResourceManagementAsync();\n            \n        }\n        catch (ArgumentException ex)\n        {\n            logger.LogError($\"កំហុស argument: {ex.Message}\", ex);\n        }\n        catch (InvalidOperationException ex)\n        {\n            logger.LogError($\"កំហុសប្រតិបត្តិការ: {ex.Message}\", ex);\n        }\n        catch (Exception ex)\n        {\n            logger.LogError($\"កំហុសទូទៅ: {ex.Message}\", ex);\n        }\n    }\n    \n    private static async Task DemonstrateResourceManagementAsync()\n    {\n        // ✅ Proper resource management with using statement\n        string tempFile = Path.GetTempFileName();\n        \n        try\n        {\n            // Write to file\n            using (var writer = new StreamWriter(tempFile))\n            {\n                await writer.WriteLineAsync(\"នេះគឺជាឯកសារទេស្ត\");\n                await writer.WriteLineAsync(\"បន្ទាត់ទីពីរ\");\n            } // StreamWriter will be disposed automatically\n            \n            // Read from file\n            using (var reader = new StreamReader(tempFile))\n            {\n                string content = await reader.ReadToEndAsync();\n                Console.WriteLine($\"មាតិកាឯកសារ:\\n{content}\");\n            } // StreamReader will be disposed automatically\n        }\n        finally\n        {\n            // Clean up temporary file\n            if (File.Exists(tempFile))\n            {\n                File.Delete(tempFile);\n            }\n        }\n    }\n    \n    public static void ShowCodingStandards()\n    {\n        Console.WriteLine(\"\\n=== គោលការណ៍ណែនាំសម្រាប់ការសរសេរកូដ ===\");\n        \n        Console.WriteLine(\"\\n1. ការដាក់ឈ្មោះ (Naming Conventions):\");\n        Console.WriteLine(\"   ✅ ប្រើឈ្មោះដែលមានន័យ និងអាចអានបាន\");\n        Console.WriteLine(\"   ✅ PascalCase សម្រាប់ classes, methods, properties\");\n        Console.WriteLine(\"   ✅ camelCase សម្រាប់ local variables, parameters\");\n        Console.WriteLine(\"   ✅ _camelCase សម្រាប់ private fields\");\n        Console.WriteLine(\"   ✅ UPPER_CASE សម្រាប់ constants\");\n        \n        Console.WriteLine(\"\\n2. ការរៀបចំកូដ (Code Organization):\");\n        Console.WriteLine(\"   ✅ ថ្នាក់មួយក្នុងឯកសារមួយ\");\n        Console.WriteLine(\"   ✅ ដាក់ using statements នៅផ្នែកខាងលើ\");\n        Console.WriteLine(\"   ✅ ចាត់តាម members: fields, properties, constructors, methods\");\n        Console.WriteLine(\"   ✅ ប្រើ regions សម្រាប់ការរៀបចំធំ\");\n        \n        Console.WriteLine(\"\\n3. ការគ្រប់គ្រងកំហុស (Error Handling):\");\n        Console.WriteLine(\"   ✅ ប្រើ specific exceptions\");\n        Console.WriteLine(\"   ✅ Validate inputs នៅដើមវិធីសាស្ត្រ\");\n        Console.WriteLine(\"   ✅ ប្រើ using statements សម្រាប់ IDisposable\");\n        Console.WriteLine(\"   ✅ Log errors appropriately\");\n        \n        Console.WriteLine(\"\\n4. Performance:\");\n        Console.WriteLine(\"   ✅ ប្រើ async/await សម្រាប់ I/O operations\");\n        Console.WriteLine(\"   ✅ ជៀសវាង premature optimization\");\n        Console.WriteLine(\"   ✅ ប្រើ appropriate data structures\");\n        Console.WriteLine(\"   ✅ Profile before optimizing\");\n        \n        Console.WriteLine(\"\\n5. Security:\");\n        Console.WriteLine(\"   ✅ Validate all inputs\");\n        Console.WriteLine(\"   ✅ ប្រើ parameterized queries\");\n        Console.WriteLine(\"   ✅ Don't store sensitive data in plain text\");\n        Console.WriteLine(\"   ✅ ប្រើ HTTPS សម្រាប់ web applications\");\n        \n        Console.WriteLine(\"\\n6. Testing:\");\n        Console.WriteLine(\"   ✅ សរសេរ unit tests\");\n        Console.WriteLine(\"   ✅ ប្រើ dependency injection\");\n        Console.WriteLine(\"   ✅ Keep methods small and focused\");\n        Console.WriteLine(\"   ✅ Test edge cases\");\n    }\n}\n\nclass Program\n{\n    static async Task Main()\n    {\n        Console.WriteLine(\"=== Best Practices ក្នុង C# ===\");\n        \n        // Run demonstration\n        await BestPracticesDemo.RunDemonstrationAsync();\n        \n        // Show coding standards\n        BestPracticesDemo.ShowCodingStandards();\n        \n        Console.WriteLine(\"\\n=== សេចក្តីសន្និដ្ឋាន ===\");\n        Console.WriteLine(\"ការអនុវត្តតាម best practices ជួយធ្វើឱ្យកូដ:\");\n        Console.WriteLine(\"• មានគុណភាពខ្ពស់\");\n        Console.WriteLine(\"• ងាយស្រួលអាន និងយល់\");\n        Console.WriteLine(\"• ងាយស្រួលថែទាំ និងកែប្រែ\");\n        Console.WriteLine(\"• មានសុវត្ថិភាព និងមានប្រសិទ្ធភាព\");\n        Console.WriteLine(\"• អាចធ្វើការជាក្រុមបាន\");\n        \n        Console.WriteLine(\"\\n🎉 អបអរសាទរ! អ្នកបានបញ្ចប់មេរៀន C# ទាំង 25 ហើយ!\");\n        Console.WriteLine(\"បន្តអនុវត្ត និងសាងសង់គម្រោងពិតប្រាកដដើម្បីកែលម្អជំនាញរបស់អ្នក។\");\n    }\n}",
    "tip": "Best practices មិនមែនជាច្បាប់ទេ ប៉ុន្តែជាគោលការណ៍ណែនាំដែលបានសាកល្បងហើយ - ប្រើវាយ៉ាងសមហេតុផល"
  },
  
  {
    "id": 1,
    "category": "Bootstrap",
    "path": "/bootstrap/introduction",
    "title": "មេរៀនទី១: បុព្វហេតុ Bootstrap 5",
    "explanation": "Bootstrap 5 គឺជា CSS framework ដ៏ពេញនិយមបំផុតសម្រាប់បង្កើតគេហទំព័រ responsive។ វាផ្តល់នូវ components, utilities និង grid system ដែលរៀបចំរួចរាល់ ធ្វើឱ្យការអភិវឌ្ឍន៍កាន់តែលឿន។ Bootstrap 5 បានលុបចោល jQuery dependency និងបន្ថែមមុខងារថ្មីៗជាច្រើន។",
    "code": "<!DOCTYPE html>\n<html lang=\"km\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bootstrap 5 ទំព័រដំបូង</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"text-primary\">សួស្តី Bootstrap 5!</h1>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>",
    "tip": "ប្រើ CDN links ដើម្បីរៀបចំ Bootstrap 5 បានលឿន។ កុំភ្លេច viewport meta tag សម្រាប់ responsive design។"
  },
  {
    "id": 2,
    "category": "Bootstrap",
    "path": "/bootstrap/grid-system",
    "title": "មេរៀនទី២: Bootstrap Grid System",
    "explanation": "Bootstrap Grid System គឺជាមូលដ្ឋានគ្រឹះនៃ responsive design។ វាប្រើប្រាស់ 12-column layout ដែលអាចបត់បែនបានតាមទំហំអេក្រង់ផ្សេងៗ។ Grid system មាន containers, rows, និង columns ដែលធ្វើការជាមួយគ្នាដើម្បីបង្កើត layouts ស្អាត។",
    "code": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12 col-md-6 col-lg-4\">\n            <div class=\"bg-primary text-white p-3\">Column 1</div>\n        </div>\n        <div class=\"col-12 col-md-6 col-lg-4\">\n            <div class=\"bg-secondary text-white p-3\">Column 2</div>\n        </div>\n        <div class=\"col-12 col-md-12 col-lg-4\">\n            <div class=\"bg-success text-white p-3\">Column 3</div>\n        </div>\n    </div>\n</div>",
    "tip": "ប្រើ breakpoint classes (sm, md, lg, xl, xxl) ដើម្បីបង្កើត responsive layouts។ ចងចាំថា columns ត្រូវតែស្ថិតក្នុង rows។"
  },
  {
    "id": 3,
    "category": "Bootstrap",
    "path": "/bootstrap/containers",
    "title": "មេរៀនទី៣: Bootstrap Containers",
    "explanation": "Containers គឺជា building blocks មូលដ្ឋានបំផុតក្នុង Bootstrap។ មាន container types បីប្រភេទ៖ .container (responsive fixed widths), .container-fluid (full width), និង .container-{breakpoint} (responsive containers)។ Containers ផ្តល់នូវ padding និង centering សម្រាប់មាតិកា។",
    "code": "<!-- Fixed width container -->\n<div class=\"container\">\n    <h1>Fixed Width Container</h1>\n    <p>Container នេះមានទទឹងកំណត់តាម breakpoints។</p>\n</div>\n\n<!-- Full width container -->\n<div class=\"container-fluid\">\n    <h1>Full Width Container</h1>\n    <p>Container នេះពេញទទឹងអេក្រង់។</p>\n</div>\n\n<!-- Responsive container -->\n<div class=\"container-md\">\n    <h1>Responsive Container</h1>\n    <p>Container នេះ responsive ចាប់ពី md breakpoint។</p>\n</div>",
    "tip": "ប្រើ .container សម្រាប់ layout ធម្មតា និង .container-fluid សម្រាប់ full-width designs។"
  },
  {
    "id": 4,
    "category": "Bootstrap",
    "path": "/bootstrap/typography",
    "title": "មេរៀនទី៤: Bootstrap Typography",
    "explanation": "Bootstrap Typography ផ្តល់នូវ styles រៀបចំរួចសម្រាប់ headings, paragraphs, lists និង text utilities។ វាធានាថាអត្ថបទមានភាពស្អាតនិងអាចអានបានល្អលើគ្រប់ devices។ Bootstrap ក៏ផ្តល់នូវ utility classes សម្រាប់ text alignment, transformation និង styling។",
    "code": "<!-- Headings -->\n<h1 class=\"display-1\">Display Heading 1</h1>\n<h2 class=\"h1\">Heading ដូច h1</h2>\n\n<!-- Text Utilities -->\n<p class=\"text-primary fw-bold\">អត្ថបទពណ៌ primary និងដិត</p>\n<p class=\"text-muted text-center\">អត្ថបទពណ៌ muted និងកណ្តាល</p>\n<p class=\"text-uppercase\">អត្ថបទអក្សរធំ</p>\n\n<!-- Lead Text -->\n<p class=\"lead\">នេះជាអត្ថបទសំខាន់ដែលលេចធ្លោ។</p>",
    "tip": "ប្រើ display classes (.display-1 ដល់ .display-6) សម្រាប់ headings ធំៗ និង .lead សម្រាប់ paragraph សំខាន់។"
  },
  {
    "id": 5,
    "category": "Bootstrap",
    "path": "/bootstrap/buttons",
    "title": "មេរៀនទី៥: Bootstrap Buttons",
    "explanation": "Bootstrap Buttons មានស្ទីលជាច្រើនប្រភេទ និងទំហំផ្សេងៗ។ Buttons អាចមានពណ៌ផ្សេងៗ (primary, secondary, success, danger, warning, info, light, dark) និងអាចកំណត់ទំហំ (sm, lg) បាន។ Bootstrap ក៏ផ្តល់នូវ button groups និង button states។",
    "code": "<!-- Basic Buttons -->\n<button type=\"button\" class=\"btn btn-primary\">Primary</button>\n<button type=\"button\" class=\"btn btn-secondary\">Secondary</button>\n<button type=\"button\" class=\"btn btn-success\">Success</button>\n<button type=\"button\" class=\"btn btn-danger\">Danger</button>\n\n<!-- Button Sizes -->\n<button type=\"button\" class=\"btn btn-primary btn-lg\">ធំ</button>\n<button type=\"button\" class=\"btn btn-primary\">ធម្មតា</button>\n<button type=\"button\" class=\"btn btn-primary btn-sm\">តូច</button>\n\n<!-- Outline Buttons -->\n<button type=\"button\" class=\"btn btn-outline-primary\">Outline Primary</button>",
    "tip": "ប្រើ .btn-outline-* classes សម្រាប់ buttons ដែលមានតែ border។ ប្រើ .disabled ដើម្បី disable buttons។"
  },
  {
    "id": 6,
    "category": "Bootstrap",
    "path": "/bootstrap/cards",
    "title": "មេរៀនទី៦: Bootstrap Cards",
    "explanation": "Bootstrap Cards គឺជា flexible content containers ដែលមាន headers, footers, និង wide variety នៃមាតិកា។ Cards អាចមានរូបភាព អត្ថបទ buttons និង elements ផ្សេងៗទៀត។ Cards ក៏អាចរៀបចំជា groups ឬ decks បាន។",
    "code": "<!-- Basic Card -->\n<div class=\"card\" style=\"width: 18rem;\">\n    <img src=\"image.jpg\" class=\"card-img-top\" alt=\"រូបភាព\">\n    <div class=\"card-body\">\n        <h5 class=\"card-title\">ចំណងជើងកាត់</h5>\n        <p class=\"card-text\">មាតិកានៃកាត់ដែលពន្យល់អំពីអ្វីមួយ។</p>\n        <a href=\"#\" class=\"btn btn-primary\">ចុចទីនេះ</a>\n    </div>\n</div>\n\n<!-- Card with Header and Footer -->\n<div class=\"card\">\n    <div class=\"card-header\">Header</div>\n    <div class=\"card-body\">\n        <h5 class=\"card-title\">ចំណងជើង</h5>\n        <p class=\"card-text\">មាតិកា</p>\n    </div>\n    <div class=\"card-footer text-muted\">Footer</div>\n</div>",
    "tip": "ប្រើ .card-img-top ឬ .card-img-bottom សម្រាប់រូបភាពក្នុង cards។ Cards មានភាពទន់ភ្លន់ខ្ពស់។"
  },
  {
    "id": 7,
    "category": "Bootstrap",
    "path": "/bootstrap/navbar",
    "title": "មេរៀនទី៧: Bootstrap Navbar",
    "explanation": "Bootstrap Navbar គឺជា responsive navigation header ដែលអាចមាន branding, navigation links, forms និង buttons។ Navbar អាចកំណត់ពណ៌ (light/dark) និងអាច collapse នៅលើ mobile devices។ Navbar ក៏អាចមាន dropdowns និង search forms។",
    "code": "<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n    <div class=\"container\">\n        <a class=\"navbar-brand\" href=\"#\">ម៉ាកយីហោ</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav ms-auto\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link active\" href=\"#\">ទំព័រដើម</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"#\">អំពី</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"#\">ទំនាក់ទំនង</a>\n                </li>\n            </ul>\n        </div>\n    </div>\n</nav>",
    "tip": "ប្រើ .navbar-expand-{breakpoint} ដើម្បីកំណត់ពេលណា navbar នឹង collapse។ .ms-auto ដាក់ nav items ទៅខាងស្តាំ។"
  },
  {
    "id": 8,
    "category": "Bootstrap",
    "path": "/bootstrap/forms",
    "title": "មេរៀនទី៨: Bootstrap Forms",
    "explanation": "Bootstrap Forms ផ្តល់នូវ styling រៀបចំរួចសម្រាប់ form controls ទាំងអស់។ Forms អាចមាន input fields, textareas, selects, checkboxes, radio buttons និង switches។ Bootstrap ក៏ផ្តល់នូវ validation styles និង form layouts ផ្សេងៗ។",
    "code": "<form>\n    <div class=\"mb-3\">\n        <label for=\"email\" class=\"form-label\">អ៊ីមែល</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"name@example.com\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"password\" class=\"form-label\">ពាក្យសម្ងាត់</label>\n        <input type=\"password\" class=\"form-control\" id=\"password\">\n    </div>\n    <div class=\"mb-3 form-check\">\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"remember\">\n        <label class=\"form-check-label\" for=\"remember\">ចងចាំខ្ញុំ</label>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">ចូល</button>\n</form>",
    "tip": "ប្រើ .form-control សម្រាប់ input fields និង .form-label សម្រាប់ labels។ .mb-3 ផ្តល់ spacing រវាង form groups។"
  },
  {
    "id": 9,
    "category": "Bootstrap",
    "path": "/bootstrap/modals",
    "title": "មេរៀនទី៩: Bootstrap Modals",
    "explanation": "Bootstrap Modals គឺជា dialog boxes ដែលបង្ហាញនៅលើ current page។ Modals មានប្រយោជន៍សម្រាប់បង្ហាញព័ត៌មានបន្ថែម confirmations ឬ forms ដោយមិនចាកចេញពីទំព័របច្ចុប្បន្ន។ Modals អាចមាន headers, bodies និង footers។",
    "code": "<!-- Button trigger modal -->\n<button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n    បើក Modal\n</button>\n\n<!-- Modal -->\n<div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\">ចំណងជើង Modal</h5>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n            </div>\n            <div class=\"modal-body\">\n                <p>មាតិកានៃ modal នៅទីនេះ។</p>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">បិទ</button>\n                <button type=\"button\" class=\"btn btn-primary\">រក្សាទុក</button>\n            </div>\n        </div>\n    </div>\n</div>",
    "tip": "ប្រើ data-bs-toggle=\"modal\" និង data-bs-target ដើម្បីបើក modals។ .fade class ផ្តល់ animation។"
  },
  {
    "id": 10,
    "category": "Bootstrap",
    "path": "/bootstrap/alerts",
    "title": "មេរៀនទី១០: Bootstrap Alerts",
    "explanation": "Bootstrap Alerts គឺជា components សម្រាប់បង្ហាញសារព័ត៌មាន warnings, errors ឬ success messages។ Alerts មានពណ៌ផ្សេងៗតាមបរិបទ និងអាចមាន dismiss buttons។ Alerts ក៏អាចមាន icons និង additional content។",
    "code": "<!-- Basic Alerts -->\n<div class=\"alert alert-primary\" role=\"alert\">\n    នេះជាសារព័ត៌មាន primary alert!\n</div>\n<div class=\"alert alert-success\" role=\"alert\">\n    ជោគជ័យ! ការប្រតិបត្តិបានសម្រេច។\n</div>\n<div class=\"alert alert-warning\" role=\"alert\">\n    ការព្រមាន! សូមពិនិត្យម្តងទៀត។\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n    កំហុស! មានបញ្ហាកើតឡើង។\n</div>\n\n<!-- Dismissible Alert -->\n<div class=\"alert alert-info alert-dismissible fade show\" role=\"alert\">\n    Alert ដែលអាចបិទបាន។\n    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n</div>",
    "tip": "ប្រើ .alert-dismissible និង .fade .show ដើម្បីបង្កើត alerts ដែលអាចបិទបាន។"
  },
  {
    "id": 11,
    "category": "Bootstrap",
    "path": "/bootstrap/badges",
    "title": "មេរៀនទី១១: Bootstrap Badges",
    "explanation": "Bootstrap Badges គឺជា small count និង labeling components។ Badges ប្រើសម្រាប់បង្ហាញចំនួន status ឬ categories។ Badges អាចមានពណ៌ផ្សេងៗ និងអាចដាក់ជាមួយ buttons, links ឬ headings។",
    "code": "<!-- Basic Badges -->\n<h1>ចំណងជើង <span class=\"badge bg-secondary\">ថ្មី</span></h1>\n<h2>ផលិតផល <span class=\"badge bg-primary\">១០</span></h2>\n\n<!-- Button with Badge -->\n<button type=\"button\" class=\"btn btn-primary\">\n    សារ <span class=\"badge bg-danger\">៤</span>\n</button>\n\n<!-- Pill Badges -->\n<span class=\"badge rounded-pill bg-primary\">Primary</span>\n<span class=\"badge rounded-pill bg-success\">Success</span>\n<span class=\"badge rounded-pill bg-warning text-dark\">Warning</span>",
    "tip": "ប្រើ .rounded-pill ដើម្បីបង្កើត pill-shaped badges។ ប្រើ .text-dark លើ light colored badges។"
  },
  {
    "id": 12,
    "category": "Bootstrap",
    "path": "/bootstrap/breadcrumb",
    "title": "មេរៀនទី១២: Bootstrap Breadcrumb",
    "explanation": "Bootstrap Breadcrumb គឺជា navigation component ដែលបង្ហាញទីតាំងបច្ចុប្បន្នរបស់អ្នកប្រើក្នុង website hierarchy។ Breadcrumbs ជួយអ្នកប្រើយល់ពីទីតាំងរបស់ពួកគេ និងអាចត្រលប់ទៅទំព័រមុនៗបាន។",
    "code": "<!-- Basic Breadcrumb -->\n<nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a href=\"#\">ទំព័រដើម</a></li>\n        <li class=\"breadcrumb-item\"><a href=\"#\">បណ្ណាល័យ</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">ទិន្នន័យ</li>\n    </ol>\n</nav>\n\n<!-- Custom Divider -->\n<nav style=\"--bs-breadcrumb-divider: '>'; aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a href=\"#\">ទំព័រដើម</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">បច្ចុប្បន្ន</li>\n    </ol>\n</nav>",
    "tip": "ប្រើ aria-label=\"breadcrumb\" សម្រាប់ accessibility។ .active class សម្រាប់ current page។"
  },
  {
    "id": 13,
    "category": "Bootstrap",
    "path": "/bootstrap/pagination",
    "title": "មេរៀនទី១៣: Bootstrap Pagination",
    "explanation": "Bootstrap Pagination គឺជា component សម្រាប់បង្ហាញ pagination links។ វាប្រើសម្រាប់បែងចែកមាតិកាជាទំព័រច្រើន។ Pagination អាចមានទំហំផ្សេងៗ និងអាច disable specific links បាន។",
    "code": "<!-- Basic Pagination -->\n<nav aria-label=\"Page navigation\">\n    <ul class=\"pagination\">\n        <li class=\"page-item\">\n            <a class=\"page-link\" href=\"#\">មុន</a>\n        </li>\n        <li class=\"page-item\"><a class=\"page-link\" href=\"#\">១</a></li>\n        <li class=\"page-item active\">\n            <a class=\"page-link\" href=\"#\">២</a>\n        </li>\n        <li class=\"page-item\"><a class=\"page-link\" href=\"#\">៣</a></li>\n        <li class=\"page-item\">\n            <a class=\"page-link\" href=\"#\">បន្ទាប់</a>\n        </li>\n    </ul>\n</nav>\n\n<!-- Large Pagination -->\n<nav>\n    <ul class=\"pagination pagination-lg\">\n        <li class=\"page-item disabled\">\n            <a class=\"page-link\" href=\"#\">មុន</a>\n        </li>\n        <li class=\"page-item active\">\n            <a class=\"page-link\" href=\"#\">១</a>\n        </li>\n    </ul>\n</nav>",
    "tip": "ប្រើ .active សម្រាប់ current page និង .disabled សម្រាប់ unavailable links។"
  },
  {
    "id": 14,
    "category": "Bootstrap",
    "path": "/bootstrap/progress",
    "title": "មេរៀនទី១៤: Bootstrap Progress Bars",
    "explanation": "Bootstrap Progress Bars គឺជា components សម្រាប់បង្ហាញ progress នៃ tasks ឬ processes។ Progress bars អាចមានពណ៌ផ្សេងៗ labels និង animations។ ពួកវាមានប្រយោជន៍សម្រាប់បង្ហាញ loading states ឬ completion percentages។",
    "code": "<!-- Basic Progress Bar -->\n<div class=\"progress\" role=\"progressbar\">\n    <div class=\"progress-bar\" style=\"width: 25%\">២៥%</div>\n</div>\n\n<!-- Colored Progress Bars -->\n<div class=\"progress mb-2\">\n    <div class=\"progress-bar bg-success\" style=\"width: 40%\">៤០%</div>\n</div>\n<div class=\"progress mb-2\">\n    <div class=\"progress-bar bg-warning\" style=\"width: 60%\">៦០%</div>\n</div>\n<div class=\"progress mb-2\">\n    <div class=\"progress-bar bg-danger\" style=\"width: 80%\">៨០%</div>\n</div>\n\n<!-- Striped and Animated -->\n<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-striped progress-bar-animated\" style=\"width: 75%\"></div>\n</div>",
    "tip": "ប្រើ .progress-bar-striped និង .progress-bar-animated សម្រាប់ animated progress bars។"
  },
  {
    "id": 15,
    "category": "Bootstrap",
    "path": "/bootstrap/spinners",
    "title": "មេរៀនទី១៥: Bootstrap Spinners",
    "explanation": "Bootstrap Spinners គឺជា loading indicators ដែលបង្ហាញថាមានអ្វីមួយកំពុងដំណើរការ។ Spinners មានពីរប្រភេទ៖ border spinners និង growing spinners។ ពួកវាអាចមានទំហំ និងពណ៌ផ្សេងៗ។",
    "code": "<!-- Border Spinners -->\n<div class=\"spinner-border\" role=\"status\">\n    <span class=\"visually-hidden\">កំពុងផ្ទុក...</span>\n</div>\n<div class=\"spinner-border text-primary\" role=\"status\">\n    <span class=\"visually-hidden\">កំពុងផ្ទុក...</span>\n</div>\n\n<!-- Growing Spinners -->\n<div class=\"spinner-grow\" role=\"status\">\n    <span class=\"visually-hidden\">កំពុងផ្ទុក...</span>\n</div>\n<div class=\"spinner-grow text-success\" role=\"status\">\n    <span class=\"visually-hidden\">កំពុងផ្ទុក...</span>\n</div>\n\n<!-- Small Spinners -->\n<div class=\"spinner-border spinner-border-sm\" role=\"status\">\n    <span class=\"visually-hidden\">កំពុងផ្ទុក...</span>\n</div>",
    "tip": "ប្រើ .visually-hidden សម្រាប់ screen readers។ Spinners អាចដាក់ក្នុង buttons បាន។"
  },
  {
    "id": 16,
    "category": "Bootstrap",
    "path": "/bootstrap/dropdowns",
    "title": "មេរៀនទី១៦: Bootstrap Dropdowns",
    "explanation": "Bootstrap Dropdowns គឺជា toggleable overlays សម្រាប់បង្ហាញ lists នៃ links, actions ឬ content។ Dropdowns អាចប្រើជាមួយ buttons, nav items ឬ custom triggers។ ពួកវាអាចមាន dividers, headers និង disabled items។",
    "code": "<!-- Basic Dropdown -->\n<div class=\"dropdown\">\n    <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\">\n        ជម្រើស\n    </button>\n    <ul class=\"dropdown-menu\">\n        <li><a class=\"dropdown-item\" href=\"#\">ជម្រើសទី១</a></li>\n        <li><a class=\"dropdown-item\" href=\"#\">ជម្រើសទី២</a></li>\n        <li><hr class=\"dropdown-divider\"></li>\n        <li><a class=\"dropdown-item\" href=\"#\">ជម្រើសទី៣</a></li>\n    </ul>\n</div>\n\n<!-- Split Button Dropdown -->\n<div class=\"btn-group\">\n    <button type=\"button\" class=\"btn btn-primary\">ចុចទីនេះ</button>\n    <button type=\"button\" class=\"btn btn-primary dropdown-toggle dropdown-toggle-split\" data-bs-toggle=\"dropdown\">\n        <span class=\"visually-hidden\">Toggle Dropdown</span>\n    </button>\n    <ul class=\"dropdown-menu\">\n        <li><a class=\"dropdown-item\" href=\"#\">ជម្រើសទី១</a></li>\n        <li><a class=\"dropdown-item\" href=\"#\">ជម្រើសទី២</a></li>\n    </ul>\n</div>",
    "tip": "ប្រើ .dropdown-divider ដើម្បីបែងចែក menu items។ .dropdown-toggle-split សម្រាប់ split buttons។"
  },
  {
    "id": 17,
    "category": "Bootstrap",
    "path": "/bootstrap/carousel",
    "title": "មេរៀនទី១៧: Bootstrap Carousel",
    "explanation": "Bootstrap Carousel គឺជា slideshow component សម្រាប់បង្ហាញរូបភាព ឬ content ជា cycling series។ Carousel អាចមាន controls, indicators និង captions។ វាមានប្រយោជន៍សម្រាប់ hero sections ឬ image galleries។",
    "code": "<div id=\"carouselExample\" class=\"carousel slide\" data-bs-ride=\"carousel\">\n    <div class=\"carousel-indicators\">\n        <button type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide-to=\"0\" class=\"active\"></button>\n        <button type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide-to=\"1\"></button>\n        <button type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide-to=\"2\"></button>\n    </div>\n    <div class=\"carousel-inner\">\n        <div class=\"carousel-item active\">\n            <img src=\"slide1.jpg\" class=\"d-block w-100\" alt=\"រូបភាពទី១\">\n            <div class=\"carousel-caption d-none d-md-block\">\n                <h5>ចំណងជើងទី១</h5>\n                <p>ពន្យល់អំពីរូបភាពទី១។</p>\n            </div>\n        </div>\n        <div class=\"carousel-item\">\n            <img src=\"slide2.jpg\" class=\"d-block w-100\" alt=\"រូបភាពទី២\">\n        </div>\n    </div>\n    <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"prev\">\n        <span class=\"carousel-control-prev-icon\"></span>\n    </button>\n    <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"next\">\n        <span class=\"carousel-control-next-icon\"></span>\n    </button>\n</div>",
    "tip": "ប្រើ data-bs-ride=\"carousel\" សម្រាប់ auto-cycling។ .carousel-caption សម្រាប់ text overlays។"
  },
  {
    "id": 18,
    "category": "Bootstrap",
    "path": "/bootstrap/accordion",
    "title": "មេរៀនទី១៨: Bootstrap Accordion",
    "explanation": "Bootstrap Accordion គឺជា component ដែលអនុញ្ញាតឱ្យបង្ហាញ និងលាក់មាតិកាជាក្រុម។ Accordion មានប្រយោជន៍សម្រាប់ FAQs, menus ឬ content ដែលត្រូវការ space saving។ អាចកំណត់ឱ្យបើកតែមួយ item ក្នុងពេលតែមួយ។",
    "code": "<div class=\"accordion\" id=\"accordionExample\">\n    <div class=\"accordion-item\">\n        <h2 class=\"accordion-header\">\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\">\n                ចំណងជើងទី១\n            </button>\n        </h2>\n        <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n            <div class=\"accordion-body\">\n                មាតិកានៃ accordion item ទី១។\n            </div>\n        </div>\n    </div>\n    <div class=\"accordion-item\">\n        <h2 class=\"accordion-header\">\n            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\">\n                ចំណងជើងទី២\n            </button>\n        </h2>\n        <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n            <div class=\"accordion-body\">\n                មាតិកានៃ accordion item ទី២។\n            </div>\n        </div>\n    </div>\n</div>",
    "tip": "ប្រើ data-bs-parent ដើម្បីធ្វើឱ្យបើកតែមួយ item ក្នុងពេលតែមួយ។ .show class សម្រាប់ default open item។"
  },
  {
    "id": 19,
    "category": "Bootstrap",
    "path": "/bootstrap/tabs",
    "title": "មេរៀនទី១៩: Bootstrap Tabs",
    "explanation": "Bootstrap Tabs គឺជា navigation component ដែលអនុញ្ញាតឱ្យបង្ហាញមាតិកាផ្សេងៗក្នុងកន្លែងតែមួយ។ Tabs មានប្រយោជន៍សម្រាប់ organize content ជា categories ឬ sections។ អាចមាន pills style ឬ traditional tabs style។",
    "code": "<!-- Nav Tabs -->\n<ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n    <li class=\"nav-item\" role=\"presentation\">\n        <button class=\"nav-link active\" id=\"home-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#home\" type=\"button\">ទំព័រដើម</button>\n    </li>\n    <li class=\"nav-item\" role=\"presentation\">\n        <button class=\"nav-link\" id=\"profile-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#profile\" type=\"button\">ប្រវត្តិរូប</button>\n    </li>\n    <li class=\"nav-item\" role=\"presentation\">\n        <button class=\"nav-link\" id=\"contact-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#contact\" type=\"button\">ទំនាក់ទំនង</button>\n    </li>\n</ul>\n\n<!-- Tab Content -->\n<div class=\"tab-content\" id=\"myTabContent\">\n    <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\">\n        <p>មាតិកាទំព័រដើម</p>\n    </div>\n    <div class=\"tab-pane fade\" id=\"profile\" role=\"tabpanel\">\n        <p>មាតិកាប្រវត្តិរូប</p>\n    </div>\n    <div class=\"tab-pane fade\" id=\"contact\" role=\"tabpanel\">\n        <p>មាតិកាទំនាក់ទំនង</p>\n    </div>\n</div>",
    "tip": "ប្រើ .nav-pills ជំនួស .nav-tabs សម្រាប់ pills style។ .fade class ផ្តល់ transition effects។"
  },
  {
    "id": 20,
    "category": "Bootstrap",
    "path": "/bootstrap/tooltips",
    "title": "មេរៀនទី២០: Bootstrap Tooltips និង Popovers",
    "explanation": "Bootstrap Tooltips និង Popovers គឺជា small overlays ដែលផ្តល់ព័ត៌មានបន្ថែម។ Tooltips បង្ហាញអត្ថបទតូច ហើយ Popovers អាចមានមាតិកាច្រើនជាង។ ទាំងពីរត្រូវការ JavaScript initialization។",
    "code": "<!-- Tooltips -->\n<button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"នេះជា tooltip\">\n    Tooltip នៅលើ\n</button>\n<button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" title=\"នេះជា tooltip\">\n    Tooltip នៅស្តាំ\n</button>\n\n<!-- Popovers -->\n<button type=\"button\" class=\"btn btn-lg btn-danger\" data-bs-toggle=\"popover\" title=\"ចំណងជើង Popover\" data-bs-content=\"មាតិកា popover នៅទីនេះ។\">\n    ចុចដើម្បីបើក popover\n</button>\n\n<!-- JavaScript Initialization -->\n<script>\n// Initialize tooltips\nvar tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\nvar tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n    return new bootstrap.Tooltip(tooltipTriggerEl)\n})\n\n// Initialize popovers\nvar popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'))\nvar popoverList = popoverTriggerList.map(function (popoverTriggerEl) {\n    return new bootstrap.Popover(popoverTriggerEl)\n})\n</script>",
    "tip": "Tooltips និង Popovers ត្រូវការ JavaScript initialization។ ប្រើ data-bs-placement ដើម្បីកំណត់ទីតាំង។"
  },
  {
    "id": 21,
    "category": "Bootstrap",
    "path": "/bootstrap/offcanvas",
    "title": "មេរៀនទី២១: Bootstrap Offcanvas",
    "explanation": "Bootstrap Offcanvas គឺជា sidebar component ដែលអាចបើក/បិទបាន។ វាមានប្រយោជន៍សម្រាប់ navigation menus, shopping carts ឬ additional content។ Offcanvas អាចបើកពីទិសផ្សេងៗ (left, right, top, bottom)។",
    "code": "<!-- Offcanvas Trigger -->\n<button class=\"btn btn-primary\" type=\"button\" data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvasExample\">\n    បើក Offcanvas\n</button>\n\n<!-- Offcanvas -->\n<div class=\"offcanvas offcanvas-start\" tabindex=\"-1\" id=\"offcanvasExample\">\n    <div class=\"offcanvas-header\">\n        <h5 class=\"offcanvas-title\">ចំណងជើង Offcanvas</h5>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"offcanvas\"></button>\n    </div>\n    <div class=\"offcanvas-body\">\n        <div>\n            មាតិកានៃ offcanvas នៅទីនេះ។ អ្នកអាចដាក់ nav links, forms ឬ content ផ្សេងៗ។\n        </div>\n        <div class=\"dropdown mt-3\">\n            <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\">\n                Dropdown button\n            </button>\n            <ul class=\"dropdown-menu\">\n                <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>\n                <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>\n            </ul>\n        </div>\n    </div>\n</div>",
    "tip": "ប្រើ .offcanvas-start, .offcanvas-end, .offcanvas-top, .offcanvas-bottom ដើម្បីកំណត់ទិស។"
  },
  {
    "id": 22,
    "category": "Bootstrap",
    "path": "/bootstrap/list-group",
    "title": "មេរៀនទី២២: Bootstrap List Group",
    "explanation": "Bootstrap List Group គឺជា flexible component សម្រាប់បង្ហាញ series នៃ content។ List groups អាចមាន simple lists, linked items, buttons, ឬ custom content។ ពួកវាអាចមាន badges, colors និង states ផ្សេងៗ។",
    "code": "<!-- Basic List Group -->\n<ul class=\"list-group\">\n    <li class=\"list-group-item\">ធាតុទី១</li>\n    <li class=\"list-group-item\">ធាតុទី២</li>\n    <li class=\"list-group-item\">ធាតុទី៣</li>\n</ul>\n\n<!-- Active and Disabled Items -->\n<ul class=\"list-group\">\n    <li class=\"list-group-item active\">ធាតុសកម្ម</li>\n    <li class=\"list-group-item\">ធាតុទី២</li>\n    <li class=\"list-group-item disabled\">ធាតុបិទ</li>\n</ul>\n\n<!-- List Group with Badges -->\n<ul class=\"list-group\">\n    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n        សារ\n        <span class=\"badge bg-primary rounded-pill\">១៤</span>\n    </li>\n    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n        ការជូនដំណឹង\n        <span class=\"badge bg-primary rounded-pill\">២</span>\n    </li>\n</ul>",
    "tip": "ប្រើ .list-group-item-action សម្រាប់ clickable items។ .d-flex ជួយ align badges។"
  },
  {
    "id": 23,
    "category": "Bootstrap",
    "path": "/bootstrap/utilities-spacing",
    "title": "មេរៀនទី២៣: Bootstrap Spacing Utilities",
    "explanation": "Bootstrap Spacing Utilities គឺជា classes សម្រាប់កំណត់ margin និង padding បានលឿន។ ប្រើ m សម្រាប់ margin និង p សម្រាប់ padding។ អាចកំណត់ទិស (t, b, s, e, x, y) និងទំហំ (0-5, auto)។ Utilities ទាំងនេះជួយសន្សំពេលវេលាក្នុងការសរសេរ CSS។",
    "code": "<!-- Margin Examples -->\n<div class=\"m-3\">Margin ទាំងអស់ 3</div>\n<div class=\"mt-4\">Margin top 4</div>\n<div class=\"mb-2\">Margin bottom 2</div>\n<div class=\"ms-5\">Margin start (left) 5</div>\n<div class=\"me-1\">Margin end (right) 1</div>\n<div class=\"mx-auto\">Margin horizontal auto (center)</div>\n\n<!-- Padding Examples -->\n<div class=\"p-4 bg-light\">Padding ទាំងអស់ 4</div>\n<div class=\"pt-3 pb-3 bg-secondary text-white\">Padding top និង bottom 3</div>\n<div class=\"px-5 bg-primary text-white\">Padding horizontal 5</div>\n\n<!-- Responsive Spacing -->\n<div class=\"m-2 m-md-4 m-lg-5\">Responsive margins</div>",
    "tip": "ចងចាំ spacing scale: 0=0, 1=0.25rem, 2=0.5rem, 3=1rem, 4=1.5rem, 5=3rem។ ប្រើ auto សម្រាប់ centering។"
  },
  {
    "id": 24,
    "category": "Bootstrap",
    "path": "/bootstrap/utilities-colors",
    "title": "មេរៀនទី២៤: Bootstrap Color Utilities",
    "explanation": "Bootstrap Color Utilities ផ្តល់នូវ classes សម្រាប់កំណត់ពណ៌អត្ថបទ និង background បានលឿន។ មានពណ៌ theme colors (primary, secondary, success, danger, warning, info, light, dark) និង utility colors។ ពណ៌ទាំងនេះធានាភាព consistency នៅទូទាំង website។",
    "code": "<!-- Text Colors -->\n<p class=\"text-primary\">អត្ថបទពណ៌ primary</p>\n<p class=\"text-secondary\">អត្ថបទពណ៌ secondary</p>\n<p class=\"text-success\">អត្ថបទពណ៌ success</p>\n<p class=\"text-danger\">អត្ថបទពណ៌ danger</p>\n<p class=\"text-warning\">អត្ថបទពណ៌ warning</p>\n<p class=\"text-info\">អត្ថបទពណ៌ info</p>\n<p class=\"text-muted\">អត្ថបទពណ៌ muted</p>\n\n<!-- Background Colors -->\n<div class=\"bg-primary text-white p-3\">Background primary</div>\n<div class=\"bg-success text-white p-3\">Background success</div>\n<div class=\"bg-warning text-dark p-3\">Background warning</div>\n<div class=\"bg-light text-dark p-3\">Background light</div>\n\n<!-- Opacity -->\n<div class=\"bg-success p-2 text-white bg-opacity-75\">Background ជាមួយ opacity</div>",
    "tip": "ប្រើ .text-white ឬ .text-dark ដើម្បីធានាថាអត្ថបទអាចអានបានលើ background colors។"
  },
  {
    "id": 25,
    "category": "Bootstrap",
    "path": "/bootstrap/utilities-display",
    "title": "មេរៀនទី២៥: Bootstrap Display Utilities",
    "explanation": "Bootstrap Display Utilities អនុញ្ញាតឱ្យកំណត់ display properties របស់ elements បានលឿន។ អាចបង្ហាញ ឬលាក់ elements តាម breakpoints ផ្សេងៗ។ មាន classes សម្រាប់ block, inline, flex, grid និង none display values។ Utilities ទាំងនេះមានប្រយោជន៍ខ្លាំងសម្រាប់ responsive design។",
    "code": "<!-- Basic Display -->\n<div class=\"d-block\">Block element</div>\n<div class=\"d-inline\">Inline element</div>\n<div class=\"d-inline-block\">Inline-block element</div>\n<div class=\"d-none\">Hidden element</div>\n\n<!-- Responsive Display -->\n<div class=\"d-none d-md-block\">លាក់នៅ mobile, បង្ហាញនៅ md និងធំជាង</div>\n<div class=\"d-block d-md-none\">បង្ហាញនៅ mobile, លាក់នៅ md និងធំជាង</div>\n\n<!-- Flexbox Display -->\n<div class=\"d-flex justify-content-between\">\n    <div>ធាតុទី១</div>\n    <div>ធាតុទី២</div>\n</div>\n\n<!-- Print Display -->\n<div class=\"d-print-none\">លាក់ពេលបោះពុម្ព</div>\n<div class=\"d-none d-print-block\">បង្ហាញតែពេលបោះពុម្ព</div>",
    "tip": "ប្រើ responsive display utilities ដើម្បីបង្កើត mobile-first designs។ .d-print-* classes សម្រាប់ print styles។"
  }


  
]
